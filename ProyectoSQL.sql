-- Tabla FIDE_ESTADO_TB
CREATE TABLE FIDE_ESTADO_TB (
    ID_ESTADO_PK NUMBER NOT NULL,
    ESTADO_DESCRIPCION VARCHAR2(100) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_ESTADO_PK PRIMARY KEY (ID_ESTADO_PK)
);
/

-- Tabla FIDE_DIRECCION_PROVINCIA_TB
CREATE TABLE FIDE_DIRECCION_PROVINCIA_TB (
    ID_DIRECCION_PROVINCIA_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    NOMBRE_PROVINCIA VARCHAR2(100) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_DIRECCION_PROVINCIA_PK PRIMARY KEY (ID_DIRECCION_PROVINCIA_PK),
    CONSTRAINT FIDE_DIRECCION_PROVINCIA_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/

-- Tabla FIDE_DIRECCION_CANTON_TB
CREATE TABLE FIDE_DIRECCION_CANTON_TB (
    ID_DIRECCION_CANTON_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    NOMBRE_CANTON VARCHAR2(100) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_DIRECCION_CANTON_PK PRIMARY KEY (ID_DIRECCION_CANTON_PK),
    CONSTRAINT FIDE_DIRECCION_CANTON_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/

-- Tabla FIDE_DIRECCION_DISTRITO_TB
CREATE TABLE FIDE_DIRECCION_DISTRITO_TB (
    ID_DIRECCION_DISTRITO_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    NOMBRE_DISTRITO VARCHAR2(100) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_DIRECCION_DISTRITO_PK PRIMARY KEY (ID_DIRECCION_DISTRITO_PK),
    CONSTRAINT FIDE_DIRECCION_DISTRITO_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/

-- Tabla FIDE_DIRECCION_TB
CREATE TABLE FIDE_DIRECCION_TB (
    ID_DIRECCION_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    ID_DIRECCION_PROVINCIA_FK NUMBER NOT NULL,
    ID_DIRECCION_CANTON_FK NUMBER NOT NULL,
    ID_DIRECCION_DISTRITO_FK NUMBER NOT NULL,
    DIRECCION_SENNAS VARCHAR2(200),
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_DIRECCION_PK PRIMARY KEY (ID_DIRECCION_PK),
    CONSTRAINT FIDE_DIRECCION_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT FIDE_DIRECCION_PROVINCIA_FK FOREIGN KEY (ID_DIRECCION_PROVINCIA_FK) REFERENCES FIDE_DIRECCION_PROVINCIA_TB(ID_DIRECCION_PROVINCIA_PK),
    CONSTRAINT FIDE_DIRECCION_CANTON_FK FOREIGN KEY (ID_DIRECCION_CANTON_FK) REFERENCES FIDE_DIRECCION_CANTON_TB(ID_DIRECCION_CANTON_PK),
    CONSTRAINT FIDE_DIRECCION_DISTRITO_FK FOREIGN KEY (ID_DIRECCION_DISTRITO_FK) REFERENCES FIDE_DIRECCION_DISTRITO_TB(ID_DIRECCION_DISTRITO_PK)
);
/

-- Tabla FIDE_TELEFONO_CONTACTO_TB
CREATE TABLE FIDE_TELEFONO_CONTACTO_TB (
    ID_TELEFONO_CONTACTO_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    TELEFONO_CONTACTO NUMBER NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_TELEFONO_CONTACTO_PK PRIMARY KEY (ID_TELEFONO_CONTACTO_PK),
    CONSTRAINT FIDE_TELEFONO_CONTACTO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/

-- Tabla FIDE_TIPO_USUARIO_TB
CREATE TABLE FIDE_TIPO_USUARIO_TB (
    ID_TIPO_USUARIO_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    DESCRIPCION_TIPO_USUARIO VARCHAR2(100) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_TIPO_USUARIO_PK PRIMARY KEY (ID_TIPO_USUARIO_PK),
    CONSTRAINT FIDE_TIPO_USUARIO_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/

-- Tabla FIDE_ESPECIALIDAD_TB
CREATE TABLE FIDE_ESPECIALIDAD_TB (
    ID_ESPECIALIDAD_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    NOMBRE_ESPECIALIDAD VARCHAR2(100) NOT NULL,
    DESCRIPCION_ESPECIALIDAD VARCHAR2(200) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_ESPECIALIDAD_PK PRIMARY KEY (ID_ESPECIALIDAD_PK),
    CONSTRAINT FIDE_ESPECIALIDAD_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/

-- Tabla FIDE_USUARIOS_TB
CREATE TABLE FIDE_USUARIOS_TB (
    ID_USUARIO_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    ID_ESPECIALIDAD_FK NUMBER,
    ID_TIPO_USUARIO_FK NUMBER NOT NULL,
    ID_DIRECCION_FK NUMBER,
    ID_TELEFONO_CONTACTO_FK NUMBER,
    USUARIO_NOMBRE VARCHAR2(100),
    USUARIO_CORREO VARCHAR2(100),
    USUARIO_CONTRASENNA VARCHAR2(100),
    USUARIO_IDENTIFICACION NUMBER,
    USUARIO_FECHA_REGISTRO DATE,
    USUARIO_CUENTA_BANCARIA VARCHAR2(50),
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_USUARIOS_PK PRIMARY KEY (ID_USUARIO_PK),
    CONSTRAINT FIDE_USUARIOS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT FIDE_USUARIOS_ESPECIALIDAD_FK FOREIGN KEY (ID_ESPECIALIDAD_FK) REFERENCES FIDE_ESPECIALIDAD_TB(ID_ESPECIALIDAD_PK),
    CONSTRAINT FIDE_USUARIOS_TIPO_USUARIO_FK FOREIGN KEY (ID_TIPO_USUARIO_FK) REFERENCES FIDE_TIPO_USUARIO_TB(ID_TIPO_USUARIO_PK),
    CONSTRAINT FIDE_USUARIOS_DIRECCION_FK FOREIGN KEY (ID_DIRECCION_FK) REFERENCES FIDE_DIRECCION_TB(ID_DIRECCION_PK),
    CONSTRAINT FIDE_USUARIOS_TELEFONO_CONTACTO_FK FOREIGN KEY (ID_TELEFONO_CONTACTO_FK) REFERENCES FIDE_TELEFONO_CONTACTO_TB(ID_TELEFONO_CONTACTO_PK)
);
/

-- Tabla FIDE_MASCOTA_ESPECIE_TB
CREATE TABLE FIDE_MASCOTA_ESPECIE_TB (
    ID_MASCOTA_ESPECIE_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    NOMBRE_ESPECIE VARCHAR2(100) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_MASCOTA_ESPECIE_PK PRIMARY KEY (ID_MASCOTA_ESPECIE_PK),
    CONSTRAINT FIDE_MASCOTA_ESPECIE_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/

-- Tabla FIDE_MASCOTA_RAZA_TB
CREATE TABLE FIDE_MASCOTA_RAZA_TB (
    ID_MASCOTA_RAZA_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    NOMBRE_RAZA VARCHAR2(100) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_MASCOTA_RAZA_PK PRIMARY KEY (ID_MASCOTA_RAZA_PK),
    CONSTRAINT FIDE_MASCOTA_RAZA_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/

-- Tabla FIDE_MASCOTA_TB
CREATE TABLE FIDE_MASCOTA_TB (
    ID_MASCOTA_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    ID_MASCOTA_ESPECIE_FK NUMBER NOT NULL,
    ID_MASCOTA_RAZA_FK NUMBER,
    ID_USUARIO_FK NUMBER,
    NOMBRE_MASCOTA VARCHAR2(100),
    FECHA_NACIMIENTO DATE,
    GENERO VARCHAR2(10) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_MASCOTA_PK PRIMARY KEY (ID_MASCOTA_PK),
    CONSTRAINT FIDE_MASCOTA_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT FIDE_MASCOTA_ESPECIE_FK FOREIGN KEY (ID_MASCOTA_ESPECIE_FK) REFERENCES FIDE_MASCOTA_ESPECIE_TB(ID_MASCOTA_ESPECIE_PK),
    CONSTRAINT FIDE_MASCOTA_RAZA_FK FOREIGN KEY (ID_MASCOTA_RAZA_FK) REFERENCES FIDE_MASCOTA_RAZA_TB(ID_MASCOTA_RAZA_PK),
    CONSTRAINT FIDE_MASCOTA_USUARIO_FK FOREIGN KEY (ID_USUARIO_FK) REFERENCES FIDE_USUARIOS_TB(ID_USUARIO_PK)
);
/

-- Tabla FIDE_TIPO_EXAMEN_TB
CREATE TABLE FIDE_TIPO_EXAMEN_TB (
    ID_TIPO_EXAMEN_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    DESCRIPCION_EXAMEN VARCHAR2(200) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_TIPO_EXAMEN_PK PRIMARY KEY (ID_TIPO_EXAMEN_PK),
    CONSTRAINT FIDE_TIPO_EXAMEN_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/

-- Tabla FIDE_EXAMENES_TB
CREATE TABLE FIDE_EXAMENES_TB (
    ID_EXAMEN_PK NUMBER NOT NULL,
    ID_MASCOTA_FK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    ID_TIPO_EXAMEN_FK NUMBER NOT NULL,
    EXAMEN_RESULTADO VARCHAR2(100) NOT NULL,
    EXAMEN_FECHA_SEGUIMIENTO DATE,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_EXAMENES_PK PRIMARY KEY (ID_EXAMEN_PK),
    CONSTRAINT FIDE_EXAMENES_MASCOTA_FK FOREIGN KEY (ID_MASCOTA_FK) REFERENCES FIDE_MASCOTA_TB(ID_MASCOTA_PK),
    CONSTRAINT FIDE_EXAMENES_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT FIDE_EXAMENES_TIPO_EXAMEN_FK FOREIGN KEY (ID_TIPO_EXAMEN_FK) REFERENCES FIDE_TIPO_EXAMEN_TB(ID_TIPO_EXAMEN_PK)
);
/

-- Tabla FIDE_CONSULTA_MOTIVO_TB
CREATE TABLE FIDE_CONSULTA_MOTIVO_TB (
    ID_CONSULTA_MOTIVO_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    DESCRIPCION_MOTIVO VARCHAR2(200) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_CONSULTA_MOTIVO_PK PRIMARY KEY (ID_CONSULTA_MOTIVO_PK),
    CONSTRAINT FIDE_CONSULTA_MOTIVO_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/

-- Tabla FIDE_CONSULTAS_TB
CREATE TABLE FIDE_CONSULTAS_TB (
    ID_CONSULTA_PK NUMBER NOT NULL,
    CONSULTA_FECHA DATE NOT NULL,
    ID_CONSULTA_MOTIVO_FK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    ID_MASCOTA_FK NUMBER NOT NULL,
    ID_USUARIO_FK NUMBER,
    CONSULTA_OBSERVACIONES VARCHAR2(100),
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_CONSULTAS_PK PRIMARY KEY (ID_CONSULTA_PK),
    CONSTRAINT FIDE_CONSULTAS_MOTIVO_FK FOREIGN KEY (ID_CONSULTA_MOTIVO_FK) REFERENCES FIDE_CONSULTA_MOTIVO_TB(ID_CONSULTA_MOTIVO_PK),
    CONSTRAINT FIDE_CONSULTAS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT FIDE_CONSULTAS_MASCOTA_FK FOREIGN KEY (ID_MASCOTA_FK) REFERENCES FIDE_MASCOTA_TB(ID_MASCOTA_PK),
    CONSTRAINT FIDE_CONSULTAS_USUARIO_FK FOREIGN KEY (ID_USUARIO_FK) REFERENCES FIDE_USUARIOS_TB(ID_USUARIO_PK)
);
/

-- Tabla FIDE_FACTURACIONES_TB
CREATE TABLE FIDE_FACTURACIONES_TB (
    ID_FACTURA_PK NUMBER NOT NULL,
    ID_CONSULTA_FK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    FACTURA_FECHA_EMISION DATE NOT NULL,
    FACTURA_MONTO_TOTAL NUMBER NOT NULL,
    FACTURA_DESCUENTO NUMBER,
    FACTURA_IMPUESTOS NUMBER NOT NULL,
    FACTURA_MONTO_FINAL NUMBER NOT NULL,
    FACTURA_SUBTOTAL NUMBER NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_FACTURACIONES_PK PRIMARY KEY (ID_FACTURA_PK),
    CONSTRAINT FIDE_FACTURACIONES_CONSULTA_FK FOREIGN KEY (ID_CONSULTA_FK) REFERENCES FIDE_CONSULTAS_TB(ID_CONSULTA_PK),
    CONSTRAINT FIDE_FACTURACIONES_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/  
-- Tabla FIDE_PROVEEDORES_TB
CREATE TABLE FIDE_PROVEEDORES_TB (
    ID_PROVEEDOR_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    ID_DIRECCION_FK NUMBER,
    ID_TELEFONO_CONTACTO_FK NUMBER,
    PROVEEDOR_NOMBRE VARCHAR2(100) NOT NULL,
    PROVEEDOR_CORREO VARCHAR2(100),
    PROVEEDOR_DESCRIPCION_PRODUCTOS VARCHAR2(200),
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_PROVEEDORES_PK PRIMARY KEY (ID_PROVEEDOR_PK),
    CONSTRAINT FIDE_PROVEEDORES_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT FIDE_PROVEEDORES_DIRECCION_FK FOREIGN KEY (ID_DIRECCION_FK) REFERENCES FIDE_DIRECCION_TB(ID_DIRECCION_PK),
    CONSTRAINT FIDE_PROVEEDORES_TELEFONO_CONTACTO_FK FOREIGN KEY (ID_TELEFONO_CONTACTO_FK) REFERENCES FIDE_TELEFONO_CONTACTO_TB(ID_TELEFONO_CONTACTO_PK)
);
/

-- Tabla FIDE_PRODUCTOS_TB
CREATE TABLE FIDE_PRODUCTOS_TB (
    ID_PRODUCTO_PK NUMBER NOT NULL,
    ID_PROVEEDOR_FK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    PRODUCTO_NOMBRE VARCHAR2(100) NOT NULL,
    PRODUCTO_DESCRIPCION VARCHAR2(200) NOT NULL,
    PRODUCTO_PRECIO_UNITARIO NUMBER NOT NULL,
    PRODUCTO_STOCK NUMBER NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_PRODUCTOS_PK PRIMARY KEY (ID_PRODUCTO_PK),
    CONSTRAINT FIDE_PRODUCTOS_PROVEEDOR_FK FOREIGN KEY (ID_PROVEEDOR_FK) REFERENCES FIDE_PROVEEDORES_TB(ID_PROVEEDOR_PK),
    CONSTRAINT FIDE_PRODUCTOS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/

-- Tabla FIDE_ORDEN_PRODUCTOS_TB
CREATE TABLE FIDE_ORDEN_PRODUCTOS_TB (
    ID_ORDEN_PRODUCTO_PK NUMBER NOT NULL,
    ID_PRODUCTO_FK NUMBER NOT NULL,
    ID_ORDEN_COMPRA_FK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    ORDEN_PRODUCTO_CANTIDAD NUMBER NOT NULL,
    ORDEN_PRODUCTO_PRECIO_UNITARIO NUMBER NOT NULL,
    ORDEN_PRODUCTO_SUBTOTAL NUMBER NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_ORDEN_PRODUCTOS_PK PRIMARY KEY (ID_ORDEN_PRODUCTO_PK),
    CONSTRAINT FIDE_ORDEN_PRODUCTOS_PRODUCTO_FK FOREIGN KEY (ID_PRODUCTO_FK) REFERENCES FIDE_PRODUCTOS_TB(ID_PRODUCTO_PK),
    CONSTRAINT FIDE_ORDEN_PRODUCTOS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/

-- Tabla FIDE_ORDEN_COMPRA_TB
CREATE TABLE FIDE_ORDEN_COMPRA_TB (
    ID_ORDEN_COMPRA_PK NUMBER NOT NULL,
    ID_PROVEEDOR_FK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    ID_ORDEN_PRODUCTO_FK NUMBER NOT NULL,
    ORDEN_COMPRA_FECHA DATE NOT NULL,
    ORDEN_COMPRA_PRECIO_TOTAL NUMBER NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_ORDEN_COMPRA_PK PRIMARY KEY (ID_ORDEN_COMPRA_PK),
    CONSTRAINT FIDE_ORDEN_COMPRA_PROVEEDOR_FK FOREIGN KEY (ID_PROVEEDOR_FK) REFERENCES FIDE_PROVEEDORES_TB(ID_PROVEEDOR_PK),
    CONSTRAINT FIDE_ORDEN_COMPRA_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT FIDE_ORDEN_COMPRA_PRODUCTO_FK FOREIGN KEY (ID_ORDEN_PRODUCTO_FK) REFERENCES FIDE_ORDEN_PRODUCTOS_TB(ID_ORDEN_PRODUCTO_PK)
);
/

-- Tabla FIDE_TIPO_VIA_TB
CREATE TABLE FIDE_TIPO_VIA_TB (
    ID_TIPO_VIA_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    TIPO_VIA_DESCRIPCION VARCHAR2(100) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_TIPO_VIA_PK PRIMARY KEY (ID_TIPO_VIA_PK),
    CONSTRAINT FIDE_TIPO_VIA_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/

-- Tabla FIDE_ROLES_CIRUGIA_TB
CREATE TABLE FIDE_ROLES_CIRUGIA_TB (
    ID_ROL_CIRUGIA_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    MEDICO_CIRUJANO VARCHAR2(100) NOT NULL,
    ASISTENTE_ANESTESIOLOGO VARCHAR2(100) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_ROLES_CIRUGIA_PK PRIMARY KEY (ID_ROL_CIRUGIA_PK),
    CONSTRAINT FIDE_ROLES_CIRUGIA_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/

-- Tabla FIDE_REGISTRO_CIRUGIAS_TB
CREATE TABLE FIDE_REGISTRO_CIRUGIAS_TB (
    ID_CIRUGIA_PK NUMBER NOT NULL,
    CIRUGIA_FECHA_INICIO DATE NOT NULL,
    CIRUGIA_FECHA_FINAL DATE NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    ID_MASCOTA_FK NUMBER NOT NULL,
    CIRUGIA_ANOTACIONES VARCHAR2(100),
    CIRUGIA_DIAG_PREVIO VARCHAR2(100),
    CIRUGIA_DIAG_POST VARCHAR2(100) ,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_REGISTRO_CIRUGIAS_PK PRIMARY KEY (ID_CIRUGIA_PK),
    CONSTRAINT FIDE_REGISTRO_CIRUGIAS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT FIDE_REGISTRO_CIRUGIAS_MASCOTA_FK FOREIGN KEY (ID_MASCOTA_FK) REFERENCES FIDE_MASCOTA_TB(ID_MASCOTA_PK)
);
/

-- Tabla FIDE_CIRUGIAS_MEDICAMENTOS_TB
CREATE TABLE FIDE_CIRUGIAS_MEDICAMENTOS_TB (
    ID_CIRUGIA_MEDICAMENTO_PK NUMBER NOT NULL,
    ID_CIRUGIA_FK NUMBER NOT NULL,
    ID_PRODUCTO_FK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    ID_TIPO_VIA_FK NUMBER NOT NULL,
    CIRUGIA_MEDICAMENTO_DOSIS VARCHAR2(100) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_CIRUGIAS_MEDICAMENTOS_PK PRIMARY KEY (ID_CIRUGIA_MEDICAMENTO_PK),
    CONSTRAINT FIDE_CIRUGIAS_MEDICAMENTOS_CIRUGIA_FK FOREIGN KEY (ID_CIRUGIA_FK) REFERENCES FIDE_REGISTRO_CIRUGIAS_TB(ID_CIRUGIA_PK),
    CONSTRAINT FIDE_CIRUGIAS_MEDICAMENTOS_PRODUCTO_FK FOREIGN KEY (ID_PRODUCTO_FK) REFERENCES FIDE_PRODUCTOS_TB(ID_PRODUCTO_PK),
    CONSTRAINT FIDE_CIRUGIAS_MEDICAMENTOS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT FIDE_CIRUGIAS_MEDICAMENTOS_TIPO_VIA_FK FOREIGN KEY (ID_TIPO_VIA_FK) REFERENCES FIDE_TIPO_VIA_TB(ID_TIPO_VIA_PK)
);
/

-- Tabla FIDE_CIRUGIAS_PERSONAL_TB
CREATE TABLE FIDE_CIRUGIAS_PERSONAL_TB (
    ID_CIRUGIA_PERSONAL_PK NUMBER NOT NULL,
    ID_USUARIO_FK NUMBER NOT NULL,
    ID_TIPO_USUARIO_FK NUMBER NOT NULL,
    ID_CIRUGIA_FK NUMBER NOT NULL,
    ID_ROL_CIRUGIA_FK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    ANOTACIONES_ADICIONALES VARCHAR2(50),
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_CIRUGIAS_PERSONAL_PK PRIMARY KEY (ID_CIRUGIA_PERSONAL_PK),
    CONSTRAINT FIDE_CIRUGIAS_PERSONAL_USUARIO_FK FOREIGN KEY (ID_USUARIO_FK) REFERENCES FIDE_USUARIOS_TB(ID_USUARIO_PK),
    CONSTRAINT FIDE_CIRUGIAS_PERSONAL_TIPO_USUARIO_FK FOREIGN KEY (ID_TIPO_USUARIO_FK) REFERENCES FIDE_TIPO_USUARIO_TB(ID_TIPO_USUARIO_PK),
    CONSTRAINT FIDE_CIRUGIAS_PERSONAL_CIRUGIA_FK FOREIGN KEY (ID_CIRUGIA_FK) REFERENCES FIDE_REGISTRO_CIRUGIAS_TB(ID_CIRUGIA_PK),
    CONSTRAINT FIDE_CIRUGIAS_PERSONAL_ROL_CIRUGIA_FK FOREIGN KEY (ID_ROL_CIRUGIA_FK) REFERENCES FIDE_ROLES_CIRUGIA_TB(ID_ROL_CIRUGIA_PK),
    CONSTRAINT FIDE_CIRUGIAS_PERSONAL_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/

-- Tabla FIDE_HISTORIALES_MEDICOS_TB
CREATE TABLE FIDE_HISTORIALES_MEDICOS_TB (
    ID_HISTORIAL_MEDICO_PK NUMBER NOT NULL,
    ID_MASCOTA_FK NUMBER NOT NULL,
    ID_USUARIO_FK NUMBER,
    ID_TIPO_USUARIO_FK NUMBER,
    ID_CONSULTA_FK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    HISTORIAL_FECHA_REGISTRO DATE NOT NULL,
    HISTORIAL_DIAGNOSTICO VARCHAR2(100),
    HISTORIAL_TRATAMIENTO VARCHAR2(100),
    HISTORIAL_NOTAS VARCHAR2(100),
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_HISTORIALES_MEDICOS_PK PRIMARY KEY (ID_HISTORIAL_MEDICO_PK),
    CONSTRAINT FIDE_HISTORIALES_MEDICOS_MASCOTA_FK FOREIGN KEY (ID_MASCOTA_FK) REFERENCES FIDE_MASCOTA_TB(ID_MASCOTA_PK),
    CONSTRAINT FIDE_HISTORIALES_MEDICOS_USUARIO_FK FOREIGN KEY (ID_USUARIO_FK) REFERENCES FIDE_USUARIOS_TB(ID_USUARIO_PK),
    CONSTRAINT FIDE_HISTORIALES_MEDICOS_TIPO_USUARIO_FK FOREIGN KEY (ID_TIPO_USUARIO_FK) REFERENCES FIDE_TIPO_USUARIO_TB(ID_TIPO_USUARIO_PK),
    CONSTRAINT FIDE_HISTORIALES_MEDICOS_CONSULTA_FK FOREIGN KEY (ID_CONSULTA_FK) REFERENCES FIDE_CONSULTAS_TB(ID_CONSULTA_PK),
    CONSTRAINT FIDE_HISTORIALES_MEDICOS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/

-- Tabla FIDE_PAGOS_PLANILLAS_TB
CREATE TABLE FIDE_PAGOS_PLANILLAS_TB (
    ID_PAGO_PLANILLA_PK NUMBER NOT NULL,
    ID_USUARIO_FK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    PAGO_FECHA DATE NOT NULL,
    PAGO_SALARIO_BRUTO NUMBER NOT NULL,
    PAGO_SALARIO_NETO NUMBER NOT NULL,
    PAGO_HORAS_EXTRA NUMBER,
    PAGO_VACACIONES NUMBER,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_PAGOS_PLANILLAS_PK PRIMARY KEY (ID_PAGO_PLANILLA_PK),
    CONSTRAINT FIDE_PAGOS_PLANILLAS_USUARIO_FK FOREIGN KEY (ID_USUARIO_FK) REFERENCES FIDE_USUARIOS_TB(ID_USUARIO_PK),
    CONSTRAINT FIDE_PAGOS_PLANILLAS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/

--Creacion procedimiento de inserciones FIDE_ESTADO_TB
CREATE OR REPLACE PROCEDURE INSERT_ESTADO_TB_SP(
                                            P_ID_ESTADO IN FIDE_ESTADO_TB.ID_ESTADO_PK%TYPE,
                                            P_ESTADO_DESCRIPCION IN FIDE_ESTADO_TB.ESTADO_DESCRIPCION%TYPE,
                                            P_CREATED_BY IN FIDE_ESTADO_TB.CREATED_BY%TYPE,
                                            P_CREATION_DATE IN FIDE_ESTADO_TB.CREATION_DATE%TYPE,
                                            P_MODIFIED_BY IN FIDE_ESTADO_TB.MODIFIED_BY%TYPE,
                                            P_MODIFICATION_DATE IN FIDE_ESTADO_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN 
    INSERT INTO FIDE_ESTADO_TB(ID_ESTADO_PK, ESTADO_DESCRIPCION,CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
    VALUES(P_ID_ESTADO, P_ESTADO_DESCRIPCION, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
            WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
            WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END;
/
--Creacion procedimiento de inserciones FIDE_DIRECCION_PROVINCIA_TB
CREATE OR REPLACE PROCEDURE INSERT_DIRECCION_PROVINCIA_TB_SP(
                                            P_ID_DIRECCION_PROVINCIA IN FIDE_DIRECCION_PROVINCIA_TB.ID_DIRECCION_PROVINCIA_PK%TYPE,
                                            P_ESTADO IN FIDE_DIRECCION_PROVINCIA_TB.ID_ESTADO_FK%TYPE,
                                            P_NOMBRE_PROVINCIA IN FIDE_DIRECCION_PROVINCIA_TB.NOMBRE_PROVINCIA%TYPE,
                                            P_CREATED_BY IN FIDE_DIRECCION_PROVINCIA_TB.CREATED_BY%TYPE,
                                            P_CREATION_DATE IN FIDE_DIRECCION_PROVINCIA_TB.CREATION_DATE%TYPE,
                                            P_MODIFIED_BY IN FIDE_DIRECCION_PROVINCIA_TB.MODIFIED_BY%TYPE,
                                            P_MODIFICATION_DATE IN FIDE_DIRECCION_PROVINCIA_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN 
    INSERT INTO FIDE_DIRECCION_PROVINCIA_TB(ID_DIRECCION_PROVINCIA_PK, ID_ESTADO_FK, NOMBRE_PROVINCIA,CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
    VALUES(P_ID_DIRECCION_PROVINCIA, P_ESTADO, P_NOMBRE_PROVINCIA, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
            WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
            WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END;
/
--Creacion procedimiento de inserciones FIDE_DIRECCION_CANTON_TB
CREATE OR REPLACE PROCEDURE INSERT_DIRECCION_CANTON_TB_SP(
                                            P_ID_DIRECCION_CANTON IN FIDE_DIRECCION_CANTON_TB.ID_DIRECCION_CANTON_PK%TYPE,
                                            P_ESTADO IN FIDE_DIRECCION_CANTON_TB.ID_ESTADO_FK%TYPE,
                                            P_NOMBRE_CANTON IN FIDE_DIRECCION_CANTON_TB.NOMBRE_CANTON%TYPE,
                                            P_CREATED_BY IN FIDE_DIRECCION_CANTON_TB.CREATED_BY%TYPE,
                                            P_CREATION_DATE IN FIDE_DIRECCION_CANTON_TB.CREATION_DATE%TYPE,
                                            P_MODIFIED_BY IN FIDE_DIRECCION_CANTON_TB.MODIFIED_BY%TYPE,
                                            P_MODIFICATION_DATE IN FIDE_DIRECCION_CANTON_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN 
    INSERT INTO FIDE_DIRECCION_CANTON_TB(ID_DIRECCION_CANTON_PK, ID_ESTADO_FK, NOMBRE_CANTON,CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
    VALUES(P_ID_DIRECCION_CANTON, P_ESTADO, P_NOMBRE_CANTON, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
            WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
            WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END;
/
--Creacion procedimiento de inserciones FIDE_DIRECCION_DISTRITO_TB
CREATE OR REPLACE PROCEDURE INSERT_DIRECCION_DISTRITO_TB_SP(
                                            P_ID_DIRECCION_DISTRITO IN FIDE_DIRECCION_DISTRITO_TB.ID_DIRECCION_DISTRITO_PK%TYPE,
                                            P_ESTADO IN FIDE_DIRECCION_DISTRITO_TB.ID_ESTADO_FK%TYPE,
                                            P_NOMBRE_DISTRITO IN FIDE_DIRECCION_DISTRITO_TB.NOMBRE_DISTRITO%TYPE,
                                            P_CREATED_BY IN FIDE_DIRECCION_DISTRITO_TB.CREATED_BY%TYPE,
                                            P_CREATION_DATE IN FIDE_DIRECCION_DISTRITO_TB.CREATION_DATE%TYPE,
                                            P_MODIFIED_BY IN FIDE_DIRECCION_DISTRITO_TB.MODIFIED_BY%TYPE,
                                            P_MODIFICATION_DATE IN FIDE_DIRECCION_DISTRITO_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN 
    INSERT INTO FIDE_DIRECCION_DISTRITO_TB(ID_DIRECCION_DISTRITO_PK, ID_ESTADO_FK, NOMBRE_DISTRITO,CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
    VALUES(P_ID_DIRECCION_DISTRITO, P_ESTADO, P_NOMBRE_DISTRITO, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
            WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
            WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END;
/
--Creacion procedimiento de inserciones FIDE_DIRECCION_TB
CREATE OR REPLACE PROCEDURE INSERT_DIRECCION_TB_SP(
                                            P_ID_DIRECCION IN FIDE_DIRECCION_TB.ID_DIRECCION_PK%TYPE,
                                            P_ESTADO IN FIDE_DIRECCION_TB.ID_ESTADO_FK%TYPE,
                                            P_DIRECCION_PROVINCIA IN FIDE_DIRECCION_TB.ID_DIRECCION_PROVINCIA_FK%TYPE,
                                            P_DIRECCION_CANTON IN FIDE_DIRECCION_TB.ID_DIRECCION_CANTON_FK%TYPE,
                                            P_DIRECCION_DISTRITO IN FIDE_DIRECCION_TB.ID_DIRECCION_DISTRITO_FK%TYPE,
                                            P_DIRECCION_SENNAS IN FIDE_DIRECCION_TB.DIRECCION_SENNAS%TYPE,
                                            P_CREATED_BY IN FIDE_DIRECCION_TB.CREATED_BY%TYPE,
                                            P_CREATION_DATE IN FIDE_DIRECCION_TB.CREATION_DATE%TYPE,
                                            P_MODIFIED_BY IN FIDE_DIRECCION_TB.MODIFIED_BY%TYPE,
                                            P_MODIFICATION_DATE IN FIDE_DIRECCION_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN 
    INSERT INTO FIDE_DIRECCION_TB(ID_DIRECCION_PK, ID_ESTADO_FK, ID_DIRECCION_PROVINCIA_FK, ID_DIRECCION_CANTON_FK, ID_DIRECCION_DISTRITO_FK, DIRECCION_SENNAS,
                                    CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
    VALUES(P_ID_DIRECCION, P_ESTADO, P_DIRECCION_PROVINCIA, P_DIRECCION_CANTON, P_DIRECCION_DISTRITO, P_DIRECCION_SENNAS,
            P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
            WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
            WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END;
/
--Creacion procedimiento de inserciones FIDE_TELEFONO_CONTACTO_TB
CREATE OR REPLACE PROCEDURE INSERT_TELEFONO_CONTACTO_TB_SP(
                                            P_ID_TELEFONO_CONTACTO IN FIDE_TELEFONO_CONTACTO_TB.ID_TELEFONO_CONTACTO_PK%TYPE,
                                            P_ESTADO IN FIDE_TELEFONO_CONTACTO_TB.ID_ESTADO_FK%TYPE,
                                            P_TELEFONO_CONTACTO IN FIDE_TELEFONO_CONTACTO_TB.TELEFONO_CONTACTO%TYPE,
                                            P_CREATED_BY IN FIDE_TELEFONO_CONTACTO_TB.CREATED_BY%TYPE,
                                            P_CREATION_DATE IN FIDE_TELEFONO_CONTACTO_TB.CREATION_DATE%TYPE,
                                            P_MODIFIED_BY IN FIDE_TELEFONO_CONTACTO_TB.MODIFIED_BY%TYPE,
                                            P_MODIFICATION_DATE IN FIDE_TELEFONO_CONTACTO_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN 
    INSERT INTO FIDE_TELEFONO_CONTACTO_TB(ID_TELEFONO_CONTACTO_PK, ID_ESTADO_FK, TELEFONO_CONTACTO,CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
    VALUES(P_ID_TELEFONO_CONTACTO, P_ESTADO, P_TELEFONO_CONTACTO, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
            WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
            WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END;
/
--Creacion procedimiento de inserciones FIDE_TIPO_USUARIO_TB
CREATE OR REPLACE PROCEDURE INSERT_TIPO_USUARIO_TB_SP(
                                            P_ID_TIPO_USUARIO IN FIDE_TIPO_USUARIO_TB.ID_TIPO_USUARIO_PK%TYPE,
                                            P_ESTADO IN FIDE_TIPO_USUARIO_TB.ID_ESTADO_FK%TYPE,
                                            P_DESCRIPCION_TIPO_USUARIO IN FIDE_TIPO_USUARIO_TB.DESCRIPCION_TIPO_USUARIO%TYPE,
                                            P_CREATED_BY IN FIDE_TIPO_USUARIO_TB.CREATED_BY%TYPE,
                                            P_CREATION_DATE IN FIDE_TIPO_USUARIO_TB.CREATION_DATE%TYPE,
                                            P_MODIFIED_BY IN FIDE_TIPO_USUARIO_TB.MODIFIED_BY%TYPE,
                                            P_MODIFICATION_DATE IN FIDE_TIPO_USUARIO_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN 
    INSERT INTO FIDE_TIPO_USUARIO_TB(ID_TIPO_USUARIO_PK, ID_ESTADO_FK, DESCRIPCION_TIPO_USUARIO,CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
    VALUES(P_ID_TIPO_USUARIO, P_ESTADO, P_DESCRIPCION_TIPO_USUARIO, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
            WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
            WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END;
/
--Creacion procedimiento de inserciones FIDE_TIPO_USUARIO_TB
CREATE OR REPLACE PROCEDURE INSERT_TIPO_USUARIO_TB_SP(
                                            P_ID_TIPO_USUARIO IN FIDE_TIPO_USUARIO_TB.ID_TIPO_USUARIO_PK%TYPE,
                                            P_ESTADO IN FIDE_TIPO_USUARIO_TB.ID_ESTADO_FK%TYPE,
                                            P_DESCRIPCION_TIPO_USUARIO IN FIDE_TIPO_USUARIO_TB.DESCRIPCION_TIPO_USUARIO%TYPE,
                                            P_CREATED_BY IN FIDE_TIPO_USUARIO_TB.CREATED_BY%TYPE,
                                            P_CREATION_DATE IN FIDE_TIPO_USUARIO_TB.CREATION_DATE%TYPE,
                                            P_MODIFIED_BY IN FIDE_TIPO_USUARIO_TB.MODIFIED_BY%TYPE,
                                            P_MODIFICATION_DATE IN FIDE_TIPO_USUARIO_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN 
    INSERT INTO FIDE_TIPO_USUARIO_TB(ID_TIPO_USUARIO_PK, ID_ESTADO_FK, DESCRIPCION_TIPO_USUARIO,CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
    VALUES(P_ID_TIPO_USUARIO, P_ESTADO, P_DESCRIPCION_TIPO_USUARIO, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
            WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
            WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END;
/
--Creacion procedimiento de inserciones FIDE_ESPECIALIDAD_TB
CREATE OR REPLACE PROCEDURE INSERT_ESPECIALIDAD_TB_SP(
                                            P_ID_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.ID_ESPECIALIDAD_PK%TYPE,
                                            P_ESTADO IN FIDE_ESPECIALIDAD_TB.ID_ESTADO_FK%TYPE,
                                            P_NOMBRE_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.NOMBRE_ESPECIALIDAD%TYPE,
                                            P_DESCRIPCION_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.DESCRIPCION_ESPECIALIDAD%TYPE,
                                            P_CREATED_BY IN FIDE_ESPECIALIDAD_TB.CREATED_BY%TYPE,
                                            P_CREATION_DATE IN FIDE_ESPECIALIDAD_TB.CREATION_DATE%TYPE,
                                            P_MODIFIED_BY IN FIDE_ESPECIALIDAD_TB.MODIFIED_BY%TYPE,
                                            P_MODIFICATION_DATE IN FIDE_ESPECIALIDAD_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN 
    INSERT INTO FIDE_ESPECIALIDAD_TB(ID_ESPECIALIDAD_PK, ID_ESTADO_FK, NOMBRE_ESPECIALIDAD, DESCRIPCION_ESPECIALIDAD,CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
    VALUES(P_ID_ESPECIALIDAD, P_ESTADO, P_NOMBRE_ESPECIALIDAD, P_DESCRIPCION_ESPECIALIDAD, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
            WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
            WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END;
/
--Creacion procedimiento de inserciones FIDE_USUARIOS_TB
CREATE OR REPLACE PROCEDURE INSERT_USUARIOS_TB_SP(
                                            P_ID_USUARIO IN FIDE_USUARIOS_TB.ID_USUARIO_PK%TYPE,
                                            P_ESTADO IN FIDE_USUARIOS_TB.ID_ESTADO_FK%TYPE,
                                            P_ESPECIALIDAD IN FIDE_USUARIOS_TB.ID_ESPECIALIDAD_FK%TYPE,
                                            P_ID_TIPO_USUARIO IN FIDE_USUARIOS_TB.ID_TIPO_USUARIO_FK%TYPE,
                                            P_USUARIO_NOMBRE IN FIDE_USUARIOS_TB.USUARIO_NOMBRE%TYPE,
                                            P_USUARIO_CORREO IN FIDE_USUARIOS_TB.USUARIO_CORREO%TYPE,
                                            P_USUARIO_CONTRASENNA IN FIDE_USUARIOS_TB.USUARIO_CONTRASENNA%TYPE,
                                            P_USUARIO_IDENTIFICACION IN FIDE_USUARIOS_TB.USUARIO_IDENTIFICACION%TYPE,
                                            P_USUARIO_FECHA_REGISTRO IN FIDE_USUARIOS_TB.USUARIO_FECHA_REGISTRO%TYPE,
                                            P_USUARIO_CUENTA_BANCARIAO IN FIDE_USUARIOS_TB.USUARIO_CUENTA_BANCARIA%TYPE,                                            
                                            P_CREATED_BY IN FIDE_USUARIOS_TB.CREATED_BY%TYPE,
                                            P_CREATION_DATE IN FIDE_USUARIOS_TB.CREATION_DATE%TYPE,
                                            P_MODIFIED_BY IN FIDE_USUARIOS_TB.MODIFIED_BY%TYPE,
                                            P_MODIFICATION_DATE IN FIDE_USUARIOS_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN 
    INSERT INTO FIDE_USUARIOS_TB(ID_USUARIO_PK, ID_ESTADO_FK, ID_ESPECIALIDAD_FK, ID_TIPO_USUARIO_FK, USUARIO_NOMBRE, USUARIO_CORREO, USUARIO_CONTRASENNA, USUARIO_IDENTIFICACION, USUARIO_FECHA_REGISTRO,
                                  USUARIO_CUENTA_BANCARIA, CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
    VALUES(P_ID_USUARIO, P_ESTADO, P_ESPECIALIDAD, P_ID_TIPO_USUARIO, P_USUARIO_NOMBRE, P_USUARIO_CORREO, P_USUARIO_CONTRASENNA, P_USUARIO_IDENTIFICACION, P_USUARIO_FECHA_REGISTRO, 
        P_USUARIO_CUENTA_BANCARIAO, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
            WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
            WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END;
/
--Funcion para insertar datos en la tabla de especies
CREATE OR REPLACE PROCEDURE INSERT_MASCOTA_ESPECIE_TB_SP(
    P_ID_MASCOTA_ESPECIE   IN FIDE_MASCOTA_ESPECIE_TB.ID_MASCOTA_ESPECIE_PK%TYPE,
    P_ID_ESTADO_FK         IN FIDE_MASCOTA_ESPECIE_TB.ID_ESTADO_FK%TYPE,
    P_NOMBRE_ESPECIE       IN FIDE_MASCOTA_ESPECIE_TB.NOMBRE_ESPECIE%TYPE,
    P_CREATED_BY           IN FIDE_MASCOTA_ESPECIE_TB.CREATED_BY%TYPE,
    P_CREATION_DATE        IN FIDE_MASCOTA_ESPECIE_TB.CREATION_DATE%TYPE,
    P_MODIFIED_BY          IN FIDE_MASCOTA_ESPECIE_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE    IN FIDE_MASCOTA_ESPECIE_TB.MODIFICATION_DATE%TYPE
)
IS
BEGIN
    INSERT INTO FIDE_MASCOTA_ESPECIE_TB (
        ID_MASCOTA_ESPECIE_PK,
        ID_ESTADO_FK,
        NOMBRE_ESPECIE,
        CREATED_BY,
        CREATION_DATE,
        MODIFIED_BY,
        MODIFICATION_DATE
    )
    VALUES (
        P_ID_MASCOTA_ESPECIE,
        P_ID_ESTADO_FK,
        P_NOMBRE_ESPECIE,
        P_CREATED_BY,
        P_CREATION_DATE,
        P_MODIFIED_BY,
        P_MODIFICATION_DATE
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON ÉXITO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
END;
/
--Inserts para especies
BEGIN
    INSERT_MASCOTA_ESPECIE_TB_SP(1, 1, 'Perro', 'Cristopher Vargas', SYSDATE, NULL, NULL);
    INSERT_MASCOTA_ESPECIE_TB_SP(2, 1, 'Gato', 'Cristopher Vargas', SYSDATE, NULL, NULL);
    INSERT_MASCOTA_ESPECIE_TB_SP(3, 1, 'Conejo', 'Cristopher Vargas', SYSDATE, NULL, NULL);
    INSERT_MASCOTA_ESPECIE_TB_SP(4, 1, 'Hamster', 'Cristopher Vargas', SYSDATE, NULL, NULL);
    INSERT_MASCOTA_ESPECIE_TB_SP(5, 1, 'Loro', 'Cristopher Vargas', SYSDATE, NULL, NULL);
    INSERT_MASCOTA_ESPECIE_TB_SP(6, 1, 'Perico', 'Cristopher Vargas', SYSDATE, NULL, NULL);
END;