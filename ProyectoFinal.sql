/*
Proyecto Final - Grupo 3

Integrantes:
Cordero Ramirez Emmanuel
Sandi Molina Deyber 
Vargas Arias Cristopher
Velazquez Rojas Vivian Michelle
*/

/*==============================================================================
=================================BASE DE DATOS HUELLITAS========================
==============================================================================*/

/*------------------------------------------------------------------------------
---------------------------------CREACION DE TABLAS-----------------------------
------------------------------------------------------------------------------*/

--Creacion tabla FIDE_ESTADO_TB
CREATE TABLE FIDE_ESTADO_TB (
    ID_ESTADO_PK NUMBER NOT NULL,
    ESTADO_DESCRIPCION VARCHAR2(100) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_ESTADO_PK PRIMARY KEY (ID_ESTADO_PK)
);
/
--Creacion tabla FIDE_DIRECCION_PROVINCIA_TB
CREATE TABLE FIDE_DIRECCION_PROVINCIA_TB (
    ID_DIRECCION_PROVINCIA_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    NOMBRE_PROVINCIA VARCHAR2(100) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_DIRECCION_PROVINCIA_PK PRIMARY KEY (ID_DIRECCION_PROVINCIA_PK),
    CONSTRAINT FIDE_DIRECCION_PROVINCIA_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/
--Creacion tabla FIDE_DIRECCION_CANTON_TB
CREATE TABLE FIDE_DIRECCION_CANTON_TB (
    ID_DIRECCION_CANTON_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    NOMBRE_CANTON VARCHAR2(100) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_DIRECCION_CANTON_PK PRIMARY KEY (ID_DIRECCION_CANTON_PK),
    CONSTRAINT FIDE_DIRECCION_CANTON_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/
--Creacion tabla FIDE_DIRECCION_DISTRITO_TB
CREATE TABLE FIDE_DIRECCION_DISTRITO_TB (
    ID_DIRECCION_DISTRITO_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    NOMBRE_DISTRITO VARCHAR2(100) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_DIRECCION_DISTRITO_PK PRIMARY KEY (ID_DIRECCION_DISTRITO_PK),
    CONSTRAINT FIDE_DIRECCION_DISTRITO_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/
--Creacion tabla FIDE_DIRECCION_TB
CREATE TABLE FIDE_DIRECCION_TB (
    ID_DIRECCION_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    ID_DIRECCION_PROVINCIA_FK NUMBER NOT NULL,
    ID_DIRECCION_CANTON_FK NUMBER NOT NULL,
    ID_DIRECCION_DISTRITO_FK NUMBER NOT NULL,
    DIRECCION_SENNAS VARCHAR2(200),
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_DIRECCION_PK PRIMARY KEY (ID_DIRECCION_PK),
    CONSTRAINT FIDE_DIRECCION_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT FIDE_DIRECCION_PROVINCIA_FK FOREIGN KEY (ID_DIRECCION_PROVINCIA_FK) REFERENCES FIDE_DIRECCION_PROVINCIA_TB(ID_DIRECCION_PROVINCIA_PK),
    CONSTRAINT FIDE_DIRECCION_CANTON_FK FOREIGN KEY (ID_DIRECCION_CANTON_FK) REFERENCES FIDE_DIRECCION_CANTON_TB(ID_DIRECCION_CANTON_PK),
    CONSTRAINT FIDE_DIRECCION_DISTRITO_FK FOREIGN KEY (ID_DIRECCION_DISTRITO_FK) REFERENCES FIDE_DIRECCION_DISTRITO_TB(ID_DIRECCION_DISTRITO_PK)
);
/
-- Creacion tabla FIDE_TELEFONO_CONTACTO_TB
CREATE TABLE FIDE_TELEFONO_CONTACTO_TB (
    ID_TELEFONO_CONTACTO_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    TELEFONO_CONTACTO NUMBER NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_TELEFONO_CONTACTO_PK PRIMARY KEY (ID_TELEFONO_CONTACTO_PK),
    CONSTRAINT FIDE_TELEFONO_CONTACTO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla FIDE_TIPO_USUARIO_TB
CREATE TABLE FIDE_TIPO_USUARIO_TB (
    ID_TIPO_USUARIO_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    DESCRIPCION_TIPO_USUARIO VARCHAR2(100) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_TIPO_USUARIO_PK PRIMARY KEY (ID_TIPO_USUARIO_PK),
    CONSTRAINT FIDE_TIPO_USUARIO_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla FIDE_ESPECIALIDAD_TB
CREATE TABLE FIDE_ESPECIALIDAD_TB (
    ID_ESPECIALIDAD_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    NOMBRE_ESPECIALIDAD VARCHAR2(100) NOT NULL,
    DESCRIPCION_ESPECIALIDAD VARCHAR2(200) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_ESPECIALIDAD_PK PRIMARY KEY (ID_ESPECIALIDAD_PK),
    CONSTRAINT FIDE_ESPECIALIDAD_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla FIDE_USUARIOS_TB
CREATE TABLE FIDE_USUARIOS_TB (
    ID_USUARIO_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    ID_ESPECIALIDAD_FK NUMBER,
    ID_TIPO_USUARIO_FK NUMBER NOT NULL,
    ID_DIRECCION_FK NUMBER,
    ID_TELEFONO_CONTACTO_FK NUMBER,
    USUARIO_NOMBRE VARCHAR2(100),
    USUARIO_CORREO VARCHAR2(100),
    USUARIO_CONTRASENNA VARCHAR2(100),
    USUARIO_IDENTIFICACION NUMBER,
    USUARIO_FECHA_REGISTRO DATE,
    USUARIO_CUENTA_BANCARIA VARCHAR2(50),
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_USUARIOS_PK PRIMARY KEY (ID_USUARIO_PK),
    CONSTRAINT FIDE_USUARIOS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT FIDE_USUARIOS_ESPECIALIDAD_FK FOREIGN KEY (ID_ESPECIALIDAD_FK) REFERENCES FIDE_ESPECIALIDAD_TB(ID_ESPECIALIDAD_PK),
    CONSTRAINT FIDE_USUARIOS_TIPO_USUARIO_FK FOREIGN KEY (ID_TIPO_USUARIO_FK) REFERENCES FIDE_TIPO_USUARIO_TB(ID_TIPO_USUARIO_PK),
    CONSTRAINT FIDE_USUARIOS_DIRECCION_FK FOREIGN KEY (ID_DIRECCION_FK) REFERENCES FIDE_DIRECCION_TB(ID_DIRECCION_PK),
    CONSTRAINT FIDE_USUARIOS_TELEFONO_CONTACTO_FK FOREIGN KEY (ID_TELEFONO_CONTACTO_FK) REFERENCES FIDE_TELEFONO_CONTACTO_TB(ID_TELEFONO_CONTACTO_PK)
);
/
-- Creacion tabla FIDE_MASCOTA_ESPECIE_TB
CREATE TABLE FIDE_MASCOTA_ESPECIE_TB (
    ID_MASCOTA_ESPECIE_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    NOMBRE_ESPECIE VARCHAR2(100) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_MASCOTA_ESPECIE_PK PRIMARY KEY (ID_MASCOTA_ESPECIE_PK),
    CONSTRAINT FIDE_MASCOTA_ESPECIE_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla FIDE_MASCOTA_RAZA_TB
CREATE TABLE FIDE_MASCOTA_RAZA_TB (
    ID_MASCOTA_RAZA_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    NOMBRE_RAZA VARCHAR2(100) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_MASCOTA_RAZA_PK PRIMARY KEY (ID_MASCOTA_RAZA_PK),
    CONSTRAINT FIDE_MASCOTA_RAZA_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla FIDE_MASCOTA_TB
CREATE TABLE FIDE_MASCOTA_TB (
    ID_MASCOTA_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    ID_MASCOTA_ESPECIE_FK NUMBER NOT NULL,
    ID_MASCOTA_RAZA_FK NUMBER,
    ID_USUARIO_FK NUMBER,
    NOMBRE_MASCOTA VARCHAR2(100),
    FECHA_NACIMIENTO DATE,
    GENERO VARCHAR2(10) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_MASCOTA_PK PRIMARY KEY (ID_MASCOTA_PK),
    CONSTRAINT FIDE_MASCOTA_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT FIDE_MASCOTA_ESPECIE_FK FOREIGN KEY (ID_MASCOTA_ESPECIE_FK) REFERENCES FIDE_MASCOTA_ESPECIE_TB(ID_MASCOTA_ESPECIE_PK),
    CONSTRAINT FIDE_MASCOTA_RAZA_FK FOREIGN KEY (ID_MASCOTA_RAZA_FK) REFERENCES FIDE_MASCOTA_RAZA_TB(ID_MASCOTA_RAZA_PK),
    CONSTRAINT FIDE_MASCOTA_USUARIO_FK FOREIGN KEY (ID_USUARIO_FK) REFERENCES FIDE_USUARIOS_TB(ID_USUARIO_PK)
);
/
-- Creacion tabla FIDE_TIPO_EXAMEN_TB
CREATE TABLE FIDE_TIPO_EXAMEN_TB (
    ID_TIPO_EXAMEN_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    DESCRIPCION_EXAMEN VARCHAR2(200) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_TIPO_EXAMEN_PK PRIMARY KEY (ID_TIPO_EXAMEN_PK),
    CONSTRAINT FIDE_TIPO_EXAMEN_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla FIDE_EXAMENES_TB
CREATE TABLE FIDE_EXAMENES_TB (
    ID_EXAMEN_PK NUMBER NOT NULL,
    ID_MASCOTA_FK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    ID_TIPO_EXAMEN_FK NUMBER NOT NULL,
    EXAMEN_RESULTADO VARCHAR2(100) NOT NULL,
    EXAMEN_FECHA_SEGUIMIENTO DATE,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_EXAMENES_PK PRIMARY KEY (ID_EXAMEN_PK),
    CONSTRAINT FIDE_EXAMENES_MASCOTA_FK FOREIGN KEY (ID_MASCOTA_FK) REFERENCES FIDE_MASCOTA_TB(ID_MASCOTA_PK),
    CONSTRAINT FIDE_EXAMENES_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT FIDE_EXAMENES_TIPO_EXAMEN_FK FOREIGN KEY (ID_TIPO_EXAMEN_FK) REFERENCES FIDE_TIPO_EXAMEN_TB(ID_TIPO_EXAMEN_PK)
);
/
-- Creacion tabla FIDE_CONSULTA_MOTIVO_TB
CREATE TABLE FIDE_CONSULTA_MOTIVO_TB (
    ID_CONSULTA_MOTIVO_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    DESCRIPCION_MOTIVO VARCHAR2(200) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_CONSULTA_MOTIVO_PK PRIMARY KEY (ID_CONSULTA_MOTIVO_PK),
    CONSTRAINT FIDE_CONSULTA_MOTIVO_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla FIDE_CONSULTAS_TB
CREATE TABLE FIDE_CONSULTAS_TB (
    ID_CONSULTA_PK NUMBER NOT NULL,
    CONSULTA_FECHA DATE NOT NULL,
    ID_CONSULTA_MOTIVO_FK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    ID_MASCOTA_FK NUMBER NOT NULL,
    ID_USUARIO_FK NUMBER,
    CONSULTA_OBSERVACIONES VARCHAR2(100),
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_CONSULTAS_PK PRIMARY KEY (ID_CONSULTA_PK),
    CONSTRAINT FIDE_CONSULTAS_MOTIVO_FK FOREIGN KEY (ID_CONSULTA_MOTIVO_FK) REFERENCES FIDE_CONSULTA_MOTIVO_TB(ID_CONSULTA_MOTIVO_PK),
    CONSTRAINT FIDE_CONSULTAS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT FIDE_CONSULTAS_MASCOTA_FK FOREIGN KEY (ID_MASCOTA_FK) REFERENCES FIDE_MASCOTA_TB(ID_MASCOTA_PK),
    CONSTRAINT FIDE_CONSULTAS_USUARIO_FK FOREIGN KEY (ID_USUARIO_FK) REFERENCES FIDE_USUARIOS_TB(ID_USUARIO_PK)
);
/
-- Creacion tabla FIDE_FACTURACIONES_TB
CREATE TABLE FIDE_FACTURACIONES_TB (
    ID_FACTURA_PK varchar2(50),
    ID_CONSULTA_FK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    FACTURA_FECHA_EMISION DATE NOT NULL,
    FACTURA_MONTO_TOTAL NUMBER NOT NULL,
    FACTURA_DESCUENTO NUMBER,
    FACTURA_IMPUESTOS NUMBER NOT NULL,
    FACTURA_MONTO_FINAL NUMBER NOT NULL,
    FACTURA_SUBTOTAL NUMBER NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_FACTURACIONES_PK PRIMARY KEY (ID_FACTURA_PK),
    CONSTRAINT FIDE_FACTURACIONES_CONSULTA_FK FOREIGN KEY (ID_CONSULTA_FK) REFERENCES FIDE_CONSULTAS_TB(ID_CONSULTA_PK),
    CONSTRAINT FIDE_FACTURACIONES_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla FIDE_PROVEEDORES_TB
CREATE TABLE FIDE_PROVEEDORES_TB (
    ID_PROVEEDOR_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    ID_DIRECCION_FK NUMBER,
    ID_TELEFONO_CONTACTO_FK NUMBER,
    PROVEEDOR_NOMBRE VARCHAR2(100) NOT NULL,
    PROVEEDOR_CORREO VARCHAR2(100),
    PROVEEDOR_DESCRIPCION_PRODUCTOS VARCHAR2(200),
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_PROVEEDORES_PK PRIMARY KEY (ID_PROVEEDOR_PK),
    CONSTRAINT FIDE_PROVEEDORES_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT FIDE_PROVEEDORES_DIRECCION_FK FOREIGN KEY (ID_DIRECCION_FK) REFERENCES FIDE_DIRECCION_TB(ID_DIRECCION_PK),
    CONSTRAINT FIDE_PROVEEDORES_TELEFONO_CONTACTO_FK FOREIGN KEY (ID_TELEFONO_CONTACTO_FK) REFERENCES FIDE_TELEFONO_CONTACTO_TB(ID_TELEFONO_CONTACTO_PK)
);
/
-- Creacion tabla FIDE_PRODUCTOS_TB
CREATE TABLE FIDE_PRODUCTOS_TB (
    ID_PRODUCTO_PK NUMBER NOT NULL,
    ID_PROVEEDOR_FK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    PRODUCTO_NOMBRE VARCHAR2(100) NOT NULL,
    PRODUCTO_DESCRIPCION VARCHAR2(200) NOT NULL,
    PRODUCTO_PRECIO_UNITARIO NUMBER NOT NULL,
    PRODUCTO_STOCK NUMBER NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_PRODUCTOS_PK PRIMARY KEY (ID_PRODUCTO_PK),
    CONSTRAINT FIDE_PRODUCTOS_PROVEEDOR_FK FOREIGN KEY (ID_PROVEEDOR_FK) REFERENCES FIDE_PROVEEDORES_TB(ID_PROVEEDOR_PK),
    CONSTRAINT FIDE_PRODUCTOS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla FIDE_DETALLE_FACTURA_TB
CREATE TABLE FIDE_DETALLE_FACTURA_TB (
    ID_FACTURA_FK varchar2(50),
    LINEA NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    ID_PRODUCTO_FK NUMBER NOT NULL,
    MONTO_UNITARIO NUMBER NOT NULL,
    CANTIDAD NUMBER NOT NULL,
    TOTAL NUMBER NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_DETALLE_FACTURA_PK PRIMARY KEY (ID_FACTURA_FK, LINEA),
    CONSTRAINT FIDE_DETALLE_FACTURA_FACTURA_FK FOREIGN KEY (ID_FACTURA_FK) REFERENCES FIDE_FACTURACIONES_TB(ID_FACTURA_PK),
    CONSTRAINT FIDE_DETALLE_FACTURA_PRODUCTO_FK FOREIGN KEY (ID_PRODUCTO_FK) REFERENCES FIDE_PRODUCTOS_TB(ID_PRODUCTO_PK),
    CONSTRAINT FIDE_FACTURA_PRODUCTOS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla FIDE_ORDEN_COMPRA_TB
CREATE TABLE FIDE_ORDEN_COMPRA_TB (
    ID_ORDEN_COMPRA_PK NUMBER NOT NULL,
    ID_PROVEEDOR_FK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    ORDEN_COMPRA_FECHA DATE NOT NULL,
    ORDEN_COMPRA_PRECIO_TOTAL NUMBER NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_ORDEN_COMPRA_PK PRIMARY KEY (ID_ORDEN_COMPRA_PK),
    CONSTRAINT FIDE_ORDEN_COMPRA_PROVEEDOR_FK FOREIGN KEY (ID_PROVEEDOR_FK) REFERENCES FIDE_PROVEEDORES_TB(ID_PROVEEDOR_PK),
    CONSTRAINT FIDE_ORDEN_COMPRA_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla FIDE_ORDEN_PRODUCTOS_TB
CREATE TABLE FIDE_ORDEN_PRODUCTOS_TB (
    ID_ORDEN_COMPRA_FK NUMBER NOT NULL,
    ID_PRODUCTO_FK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    ORDEN_PRODUCTO_CANTIDAD NUMBER NOT NULL,
    ORDEN_PRODUCTO_PRECIO_UNITARIO NUMBER NOT NULL,
    ORDEN_PRODUCTO_SUBTOTAL NUMBER NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_ORDEN_PRODUCTOS_PK PRIMARY KEY (ID_ORDEN_COMPRA_FK, ID_PRODUCTO_FK),
    CONSTRAINT FIDE_ORDEN_PRODUCTOS_ORDEN_FK FOREIGN KEY (ID_ORDEN_COMPRA_FK) REFERENCES FIDE_ORDEN_COMPRA_TB(ID_ORDEN_COMPRA_PK),
    CONSTRAINT FIDE_ORDEN_PRODUCTOS_PRODUCTO_FK FOREIGN KEY (ID_PRODUCTO_FK) REFERENCES FIDE_PRODUCTOS_TB(ID_PRODUCTO_PK),
    CONSTRAINT FIDE_ORDEN_PRODUCTOS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla FIDE_TIPO_VIA_TB
CREATE TABLE FIDE_TIPO_VIA_TB (
    ID_TIPO_VIA_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    TIPO_VIA_DESCRIPCION VARCHAR2(100) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_TIPO_VIA_PK PRIMARY KEY (ID_TIPO_VIA_PK),
    CONSTRAINT FIDE_TIPO_VIA_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla FIDE_ROLES_CIRUGIA_TB
CREATE TABLE FIDE_ROLES_CIRUGIA_TB (
    ID_ROL_CIRUGIA_PK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    MEDICO_CIRUJANO VARCHAR2(100) NOT NULL,
    ASISTENTE_ANESTESIOLOGO VARCHAR2(100) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_ROLES_CIRUGIA_PK PRIMARY KEY (ID_ROL_CIRUGIA_PK),
    CONSTRAINT FIDE_ROLES_CIRUGIA_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla FIDE_REGISTRO_CIRUGIAS_TB
CREATE TABLE FIDE_REGISTRO_CIRUGIAS_TB (
    ID_CIRUGIA_PK NUMBER NOT NULL,
    CIRUGIA_FECHA_INICIO DATE NOT NULL,
    CIRUGIA_FECHA_FINAL DATE NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    ID_MASCOTA_FK NUMBER NOT NULL,
    CIRUGIA_ANOTACIONES VARCHAR2(100),
    CIRUGIA_DIAG_PREVIO VARCHAR2(100),
    CIRUGIA_DIAG_POST VARCHAR2(100),
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_REGISTRO_CIRUGIAS_PK PRIMARY KEY (ID_CIRUGIA_PK),
    CONSTRAINT FIDE_REGISTRO_CIRUGIAS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT FIDE_REGISTRO_CIRUGIAS_MASCOTA_FK FOREIGN KEY (ID_MASCOTA_FK) REFERENCES FIDE_MASCOTA_TB(ID_MASCOTA_PK)
);
/
-- Creacion tabla FIDE_CIRUGIAS_MEDICAMENTOS_TB
CREATE TABLE FIDE_CIRUGIAS_MEDICAMENTOS_TB (
    ID_CIRUGIA_FK NUMBER NOT NULL,
    ID_PRODUCTO_FK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    ID_TIPO_VIA_FK NUMBER NOT NULL,
    CIRUGIA_MEDICAMENTO_DOSIS VARCHAR2(100) NOT NULL,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_CIRUGIAS_MEDICAMENTOS_PK PRIMARY KEY (ID_CIRUGIA_FK, ID_PRODUCTO_FK),
    CONSTRAINT FIDE_CIRUGIAS_MEDICAMENTOS_CIRUGIA_FK FOREIGN KEY (ID_CIRUGIA_FK) REFERENCES FIDE_REGISTRO_CIRUGIAS_TB(ID_CIRUGIA_PK),
    CONSTRAINT FIDE_CIRUGIAS_MEDICAMENTOS_PRODUCTO_FK FOREIGN KEY (ID_PRODUCTO_FK) REFERENCES FIDE_PRODUCTOS_TB(ID_PRODUCTO_PK),
    CONSTRAINT FIDE_CIRUGIAS_MEDICAMENTOS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT FIDE_CIRUGIAS_MEDICAMENTOS_TIPO_VIA_FK FOREIGN KEY (ID_TIPO_VIA_FK) REFERENCES FIDE_TIPO_VIA_TB(ID_TIPO_VIA_PK)
);
/
-- Creacion tabla FIDE_CIRUGIAS_PERSONAL_TB
CREATE TABLE FIDE_CIRUGIAS_PERSONAL_TB (
    ID_CIRUGIA_FK NUMBER NOT NULL,
    ID_USUARIO_FK NUMBER NOT NULL,
    ID_ROL_CIRUGIA_FK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    ID_TIPO_USUARIO_FK NUMBER NOT NULL,
    ANOTACIONES_ADICIONALES VARCHAR2(50),
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_CIRUGIAS_PERSONAL_PK PRIMARY KEY (ID_CIRUGIA_FK, ID_USUARIO_FK, ID_ROL_CIRUGIA_FK),
    CONSTRAINT FIDE_CIRUGIAS_PERSONAL_CIRUGIA_FK FOREIGN KEY (ID_CIRUGIA_FK) REFERENCES FIDE_REGISTRO_CIRUGIAS_TB(ID_CIRUGIA_PK),
    CONSTRAINT FIDE_CIRUGIAS_PERSONAL_USUARIO_FK FOREIGN KEY (ID_USUARIO_FK) REFERENCES FIDE_USUARIOS_TB(ID_USUARIO_PK),
    CONSTRAINT FIDE_CIRUGIAS_PERSONAL_ROL_FK FOREIGN KEY (ID_ROL_CIRUGIA_FK) REFERENCES FIDE_ROLES_CIRUGIA_TB(ID_ROL_CIRUGIA_PK),
    CONSTRAINT FIDE_CIRUGIAS_PERSONAL_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT FIDE_CIRUGIAS_PERSONAL_TIPO_USUARIO_FK FOREIGN KEY (ID_TIPO_USUARIO_FK) REFERENCES FIDE_TIPO_USUARIO_TB(ID_TIPO_USUARIO_PK)
);
/
-- Creacion tabla FIDE_HISTORIALES_MEDICOS_TB
CREATE TABLE FIDE_HISTORIALES_MEDICOS_TB (
    ID_MASCOTA_FK NUMBER NOT NULL,
    ID_CONSULTA_FK NUMBER NOT NULL,
    ID_USUARIO_FK NUMBER,
    ID_TIPO_USUARIO_FK NUMBER,
    ID_ESTADO_FK NUMBER NOT NULL,
    HISTORIAL_FECHA_REGISTRO DATE NOT NULL,
    HISTORIAL_DIAGNOSTICO VARCHAR2(100),
    HISTORIAL_TRATAMIENTO VARCHAR2(100),
    HISTORIAL_NOTAS VARCHAR2(100),
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_HISTORIALES_MEDICOS_PK PRIMARY KEY (ID_MASCOTA_FK, ID_CONSULTA_FK),
    CONSTRAINT FIDE_HISTORIALES_MEDICOS_MASCOTA_FK FOREIGN KEY (ID_MASCOTA_FK) REFERENCES FIDE_MASCOTA_TB(ID_MASCOTA_PK),
    CONSTRAINT FIDE_HISTORIALES_MEDICOS_CONSULTA_FK FOREIGN KEY (ID_CONSULTA_FK) REFERENCES FIDE_CONSULTAS_TB(ID_CONSULTA_PK),
    CONSTRAINT FIDE_HISTORIALES_MEDICOS_USUARIO_FK FOREIGN KEY (ID_USUARIO_FK) REFERENCES FIDE_USUARIOS_TB(ID_USUARIO_PK),
    CONSTRAINT FIDE_HISTORIALES_MEDICOS_TIPO_USUARIO_FK FOREIGN KEY (ID_TIPO_USUARIO_FK) REFERENCES FIDE_TIPO_USUARIO_TB(ID_TIPO_USUARIO_PK),
    CONSTRAINT FIDE_HISTORIALES_MEDICOS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla FIDE_PAGOS_PLANILLAS_TB
CREATE TABLE FIDE_PAGOS_PLANILLAS_TB (
    ID_PAGO_PLANILLA_PK NUMBER NOT NULL,
    ID_USUARIO_FK NUMBER NOT NULL,
    ID_ESTADO_FK NUMBER NOT NULL,
    PAGO_FECHA DATE NOT NULL,
    PAGO_SALARIO_BRUTO NUMBER NOT NULL,
    PAGO_SALARIO_NETO NUMBER NOT NULL,
    PAGO_HORAS_EXTRA NUMBER,
    PAGO_VACACIONES NUMBER,
    CREATED_BY VARCHAR2(50),
    CREATION_DATE DATE,
    MODIFIED_BY VARCHAR2(50),
    MODIFICATION_DATE DATE,
    CONSTRAINT FIDE_PAGOS_PLANILLAS_PK PRIMARY KEY (ID_PAGO_PLANILLA_PK),
    CONSTRAINT FIDE_PAGOS_PLANILLAS_USUARIO_FK FOREIGN KEY (ID_USUARIO_FK) REFERENCES FIDE_USUARIOS_TB(ID_USUARIO_PK),
    CONSTRAINT FIDE_PAGOS_PLANILLAS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES FIDE_ESTADO_TB(ID_ESTADO_PK)
);
/
/*------------------------------------------------------------------------------
---------------------------------ALTER DE TABLAS--------------------------------
------------------------------------------------------------------------------*/
ALTER TABLE FIDE_ESTADO_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_DIRECCION_PROVINCIA_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_DIRECCION_CANTON_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_DIRECCION_DISTRITO_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_DIRECCION_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_TELEFONO_CONTACTO_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_TIPO_USUARIO_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_ESPECIALIDAD_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_USUARIOS_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_MASCOTA_ESPECIE_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_MASCOTA_RAZA_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_MASCOTA_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_TIPO_EXAMEN_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_EXAMENES_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_CONSULTA_MOTIVO_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_CONSULTAS_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_FACTURACIONES_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_PROVEEDORES_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_PRODUCTOS_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_DETALLE_FACTURA_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_ORDEN_PRODUCTOS_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_ORDEN_COMPRA_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_TIPO_VIA_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_ROLES_CIRUGIA_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_REGISTRO_CIRUGIAS_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_CIRUGIAS_MEDICAMENTOS_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_CIRUGIAS_PERSONAL_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_HISTORIALES_MEDICOS_TB ADD ACCION VARCHAR2(15);
ALTER TABLE FIDE_PAGOS_PLANILLAS_TB ADD ACCION VARCHAR2(15);
/
/*------------------------------------------------------------------------------
---------------------------------CREACION DE VISTAS-----------------------------
------------------------------------------------------------------------------*/
-- CREACION VISTA DE FACTURA
CREATE OR REPLACE VIEW FACTURA_DETALLES_V AS
SELECT
    F.ID_FACTURA_PK AS FACTURA_ID,
    F.FACTURA_FECHA_EMISION AS FECHA_EMISION,
    F.FACTURA_MONTO_TOTAL AS MONTO_TOTAL,
    F.FACTURA_DESCUENTO AS DESCUENTO,
    F.FACTURA_IMPUESTOS AS IMPUESTOS,
    F.FACTURA_MONTO_FINAL AS MONTO_FINAL,
    DF.LINEA AS LINEA_DETALLE,
    P.PRODUCTO_NOMBRE AS PRODUCTO,
    DF.CANTIDAD AS CANTIDAD,
    DF.MONTO_UNITARIO AS PRECIO_UNITARIO,
    DF.TOTAL AS SUBTOTAL
FROM
    FIDE_FACTURACIONES_TB F
    JOIN FIDE_DETALLE_FACTURA_TB DF ON F.ID_FACTURA_PK = DF.ID_FACTURA_FK
    JOIN FIDE_PRODUCTOS_TB P ON DF.ID_PRODUCTO_FK = P.ID_PRODUCTO_PK
WHERE
    F.ID_ESTADO_FK = 1;
/
-- CREACION VISTA DE INFORMACION DE MASCOTAS
CREATE OR REPLACE VIEW MASCOTA_DETALLES_V AS
SELECT
    M.ID_MASCOTA_PK AS MASCOTA_ID,
    M.NOMBRE_MASCOTA AS NOMBRE,
    M.FECHA_NACIMIENTO AS FECHA_NACIMIENTO,
    M.GENERO AS GENERO,
    ME.NOMBRE_ESPECIE AS ESPECIE,
    MR.NOMBRE_RAZA AS RAZA,
    U.USUARIO_NOMBRE AS DUENNO,
    U.USUARIO_CORREO AS CORREO_DUENNO
FROM
    FIDE_MASCOTA_TB M
    JOIN FIDE_MASCOTA_ESPECIE_TB ME ON M.ID_MASCOTA_ESPECIE_FK = ME.ID_MASCOTA_ESPECIE_PK
    JOIN FIDE_MASCOTA_RAZA_TB MR ON M.ID_MASCOTA_RAZA_FK = MR.ID_MASCOTA_RAZA_PK
    JOIN FIDE_USUARIOS_TB U ON M.ID_USUARIO_FK = U.ID_USUARIO_PK
WHERE
    M.ID_ESTADO_FK = 1;
/
-- CREACION VISTA DE INFORMACION DE CLIENTES
CREATE OR REPLACE VIEW INFO_CLIENTE_V AS
SELECT
    U.ID_USUARIO_PK AS USUARIO_ID,
    U.USUARIO_NOMBRE AS NOMBRE,
    U.USUARIO_CORREO AS CORREO,
    U.USUARIO_IDENTIFICACION AS IDENTIFICACION,
    U.USUARIO_FECHA_REGISTRO AS FECHA_REGISTRO,
    D.DIRECCION_SENNAS AS DIRECCION,
    DP.NOMBRE_PROVINCIA AS PROVINCIA,
    DC.NOMBRE_CANTON AS CANTON,
    DD.NOMBRE_DISTRITO AS DISTRITO,
    TC.TELEFONO_CONTACTO AS TELEFONO
FROM
    FIDE_USUARIOS_TB U
    JOIN FIDE_DIRECCION_TB D ON U.ID_DIRECCION_FK = D.ID_DIRECCION_PK
    JOIN FIDE_DIRECCION_PROVINCIA_TB DP ON D.ID_DIRECCION_PROVINCIA_FK = DP.ID_DIRECCION_PROVINCIA_PK
    JOIN FIDE_DIRECCION_CANTON_TB DC ON D.ID_DIRECCION_CANTON_FK = DC.ID_DIRECCION_CANTON_PK
    JOIN FIDE_DIRECCION_DISTRITO_TB DD ON D.ID_DIRECCION_DISTRITO_FK = DD.ID_DIRECCION_DISTRITO_PK
    JOIN FIDE_TELEFONO_CONTACTO_TB TC ON U.ID_TELEFONO_CONTACTO_FK = TC.ID_TELEFONO_CONTACTO_PK
WHERE
    U.ID_ESTADO_FK = 1
    and 
    U.ID_TIPO_USUARIO_FK = 8;
    
/
-- CREACION VISTA DE HISTORIAL MEDICO DE MASCOTA
CREATE OR REPLACE VIEW HISTORIAL_MEDICO_V AS
SELECT
    M.NOMBRE_MASCOTA AS MASCOTA,
    HM.HISTORIAL_FECHA_REGISTRO AS FECHA_REGISTRO,
    HM.HISTORIAL_DIAGNOSTICO AS DIAGNOSTICO,
    HM.HISTORIAL_TRATAMIENTO AS TRATAMIENTO,
    HM.HISTORIAL_NOTAS AS NOTAS,
    C.CONSULTA_FECHA AS FECHA_CONSULTA,
    CM.DESCRIPCION_MOTIVO AS MOTIVO_CONSULTA
FROM
    FIDE_HISTORIALES_MEDICOS_TB HM
    JOIN FIDE_MASCOTA_TB M ON HM.ID_MASCOTA_FK = M.ID_MASCOTA_PK
    JOIN FIDE_CONSULTAS_TB C ON HM.ID_CONSULTA_FK = C.ID_CONSULTA_PK
    JOIN FIDE_CONSULTA_MOTIVO_TB CM ON C.ID_CONSULTA_MOTIVO_FK = CM.ID_CONSULTA_MOTIVO_PK
WHERE
    HM.ID_ESTADO_FK = 1;
/
-- CREACION VISTA DE PRODUCTOS
CREATE OR REPLACE VIEW PRODUCTOS_DETALLES_V AS
SELECT
    P.ID_PRODUCTO_PK AS PRODUCTO_ID,
    P.PRODUCTO_NOMBRE AS NOMBRE,
    P.PRODUCTO_DESCRIPCION AS DESCRIPCION,
    P.PRODUCTO_PRECIO_UNITARIO AS PRECIO_UNITARIO,
    P.PRODUCTO_STOCK AS STOCK,
    PR.PROVEEDOR_NOMBRE AS PROVEEDOR,
    PR.PROVEEDOR_CORREO AS CORREO_PROVEEDOR,
    E.ESTADO_DESCRIPCION AS ESTADO
FROM
    FIDE_PRODUCTOS_TB P
    JOIN FIDE_PROVEEDORES_TB PR ON P.ID_PROVEEDOR_FK = PR.ID_PROVEEDOR_PK
    JOIN FIDE_ESTADO_TB E ON P.ID_ESTADO_FK = E.ID_ESTADO_PK
WHERE
    P.ID_ESTADO_FK = 1;

-- Vista para FIDE_ESTADO_TB
CREATE OR REPLACE VIEW FIDE_ESTADO_V AS
SELECT ID_ESTADO_PK, ESTADO_DESCRIPCION, CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE, ACCION
FROM FIDE_ESTADO_TB;

-- Vista para FIDE_DIRECCION_PROVINCIA_TB
CREATE OR REPLACE VIEW FIDE_DIRECCION_PROVINCIA_V AS
SELECT ID_DIRECCION_PROVINCIA_PK, ID_ESTADO_FK, NOMBRE_PROVINCIA,
       CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE, ACCION
FROM FIDE_DIRECCION_PROVINCIA_TB;

-- Vista para FIDE_DIRECCION_CANTON_TB
CREATE OR REPLACE VIEW FIDE_DIRECCION_CANTON_V AS
SELECT ID_DIRECCION_CANTON_PK, ID_ESTADO_FK, NOMBRE_CANTON,
       CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE, ACCION
FROM FIDE_DIRECCION_CANTON_TB;

-- Vista para FIDE_DIRECCION_DISTRITO_TB
CREATE OR REPLACE VIEW FIDE_DIRECCION_DISTRITO_V AS
SELECT ID_DIRECCION_DISTRITO_PK, ID_ESTADO_FK, NOMBRE_DISTRITO,
       CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE, ACCION
FROM FIDE_DIRECCION_DISTRITO_TB;

-- Vista para FIDE_DIRECCION_TB
CREATE OR REPLACE VIEW FIDE_DIRECCION_V AS
SELECT ID_DIRECCION_PK, ID_ESTADO_FK, ID_DIRECCION_PROVINCIA_FK,
       ID_DIRECCION_CANTON_FK, ID_DIRECCION_DISTRITO_FK,
       DIRECCION_SENNAS, CREATED_BY, CREATION_DATE,
       MODIFIED_BY, MODIFICATION_DATE, ACCION
FROM FIDE_DIRECCION_TB;

/*------------------------------------------------------------------------------
-----------------------------CREACION PACKAGE-----------------------------------
------------------------------------------------------------------------------*/
CREATE OR REPLACE PACKAGE PROYECTO_FUNCIONES_PROCEDIMIENTOS_PKG AS
    -- Procedimientos para FIDE_ESTADO_TB
    PROCEDURE INSERT_ESTADO_TB_SP(
        P_ID_ESTADO IN FIDE_ESTADO_TB.ID_ESTADO_PK%TYPE,
        P_ESTADO_DESCRIPCION IN FIDE_ESTADO_TB.ESTADO_DESCRIPCION%TYPE,
        P_CREATED_BY IN FIDE_ESTADO_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY IN FIDE_ESTADO_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE UPDATE_ESTADO_TB_SP(
        P_ID_ESTADO IN FIDE_ESTADO_TB.ID_ESTADO_PK%TYPE,
        P_ESTADO_DESCRIPCION IN FIDE_ESTADO_TB.ESTADO_DESCRIPCION%TYPE,
        P_MODIFIED_BY IN FIDE_ESTADO_TB.MODIFIED_BY%TYPE
    );
-- Procedimientos para FIDE_DIRECCION_PROVINCIA_TB
    PROCEDURE INSERT_DIRECCION_PROVINCIA_TB_SP(
        P_ID_DIRECCION_PROVINCIA IN FIDE_DIRECCION_PROVINCIA_TB.ID_DIRECCION_PROVINCIA_PK%TYPE,
        P_ESTADO IN FIDE_DIRECCION_PROVINCIA_TB.ID_ESTADO_FK%TYPE,
        P_NOMBRE_PROVINCIA IN FIDE_DIRECCION_PROVINCIA_TB.NOMBRE_PROVINCIA%TYPE,
        P_CREATED_BY IN FIDE_DIRECCION_PROVINCIA_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY IN FIDE_DIRECCION_PROVINCIA_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE UPDATE_DIRECCION_PROVINCIA_TB_SP(
        P_ID_DIRECCION_PROVINCIA IN FIDE_DIRECCION_PROVINCIA_TB.ID_DIRECCION_PROVINCIA_PK%TYPE,
        P_ESTADO IN FIDE_DIRECCION_PROVINCIA_TB.ID_ESTADO_FK%TYPE,
        P_NOMBRE_PROVINCIA IN FIDE_DIRECCION_PROVINCIA_TB.NOMBRE_PROVINCIA%TYPE,
        P_MODIFIED_BY IN FIDE_DIRECCION_PROVINCIA_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE DESACTIVAR_DIRECCION_PROVINCIA_TB_SP(
        P_ID_DIRECCION_PROVINCIA IN FIDE_DIRECCION_PROVINCIA_TB.ID_DIRECCION_PROVINCIA_PK%TYPE
    );

    -- Procedimientos para FIDE_DIRECCION_CANTON_TB
    PROCEDURE INSERT_DIRECCION_CANTON_TB_SP(
        P_ID_DIRECCION_CANTON IN FIDE_DIRECCION_CANTON_TB.ID_DIRECCION_CANTON_PK%TYPE,
        P_ESTADO IN FIDE_DIRECCION_CANTON_TB.ID_ESTADO_FK%TYPE,
        P_NOMBRE_CANTON IN FIDE_DIRECCION_CANTON_TB.NOMBRE_CANTON%TYPE,
        P_CREATED_BY IN FIDE_DIRECCION_CANTON_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY IN FIDE_DIRECCION_CANTON_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE UPDATE_DIRECCION_CANTON_TB_SP(
        P_ID_DIRECCION_CANTON IN FIDE_DIRECCION_CANTON_TB.ID_DIRECCION_CANTON_PK%TYPE,
        P_NOMBRE_CANTON IN FIDE_DIRECCION_CANTON_TB.NOMBRE_CANTON%TYPE,
        P_MODIFIED_BY IN FIDE_DIRECCION_CANTON_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE DESACTIVAR_DIRECCION_CANTON_TB_SP(
        P_ID_DIRECCION_CANTON IN FIDE_DIRECCION_CANTON_TB.ID_DIRECCION_CANTON_PK%TYPE
    );

    -- Procedimientos para FIDE_DIRECCION_DISTRITO_TB
    PROCEDURE INSERT_DIRECCION_DISTRITO_TB_SP(
        P_ID_DIRECCION_DISTRITO IN FIDE_DIRECCION_DISTRITO_TB.ID_DIRECCION_DISTRITO_PK%TYPE,
        P_ESTADO IN FIDE_DIRECCION_DISTRITO_TB.ID_ESTADO_FK%TYPE,
        P_NOMBRE_DISTRITO IN FIDE_DIRECCION_DISTRITO_TB.NOMBRE_DISTRITO%TYPE,
        P_CREATED_BY IN FIDE_DIRECCION_DISTRITO_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY IN FIDE_DIRECCION_DISTRITO_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE UPDATE_DIRECCION_DISTRITO_TB_SP(
        P_ID_DIRECCION_DISTRITO IN FIDE_DIRECCION_DISTRITO_TB.ID_DIRECCION_DISTRITO_PK%TYPE,
        P_NOMBRE_DISTRITO IN FIDE_DIRECCION_DISTRITO_TB.NOMBRE_DISTRITO%TYPE,
        P_MODIFIED_BY IN FIDE_DIRECCION_DISTRITO_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE DESACTIVAR_DIRECCION_DISTRITO_TB_SP(
        P_ID_DIRECCION_DISTRITO IN FIDE_DIRECCION_DISTRITO_TB.ID_DIRECCION_DISTRITO_PK%TYPE
    );

    -- Procedimientos para FIDE_DIRECCION_TB
    PROCEDURE INSERT_DIRECCION_TB_SP(
        P_ESTADO IN FIDE_DIRECCION_TB.ID_ESTADO_FK%TYPE,
        P_DIRECCION_PROVINCIA IN FIDE_DIRECCION_TB.ID_DIRECCION_PROVINCIA_FK%TYPE,
        P_DIRECCION_CANTON IN FIDE_DIRECCION_TB.ID_DIRECCION_CANTON_FK%TYPE,
        P_DIRECCION_DISTRITO IN FIDE_DIRECCION_TB.ID_DIRECCION_DISTRITO_FK%TYPE,
        P_DIRECCION_SENNAS IN FIDE_DIRECCION_TB.DIRECCION_SENNAS%TYPE,
        P_CREATED_BY IN FIDE_DIRECCION_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY IN FIDE_DIRECCION_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE UPDATE_DIRECCION_TB_SP(
        P_ID_DIRECCION IN FIDE_DIRECCION_TB.ID_DIRECCION_PK%TYPE,
        P_DIRECCION_SENNAS IN FIDE_DIRECCION_TB.DIRECCION_SENNAS%TYPE,
        P_MODIFIED_BY IN FIDE_DIRECCION_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE DESACTIVAR_DIRECCION_TB_SP(
        P_ID_DIRECCION IN FIDE_DIRECCION_TB.ID_DIRECCION_PK%TYPE
    );

    -- Procedimientos para FIDE_TELEFONO_CONTACTO_TB
    PROCEDURE INSERT_TELEFONO_CONTACTO_TB_SP(
        P_ESTADO IN FIDE_TELEFONO_CONTACTO_TB.ID_ESTADO_FK%TYPE,
        P_TELEFONO_CONTACTO IN FIDE_TELEFONO_CONTACTO_TB.TELEFONO_CONTACTO%TYPE,
        P_CREATED_BY IN FIDE_TELEFONO_CONTACTO_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY IN FIDE_TELEFONO_CONTACTO_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE UPDATE_TELEFONO_CONTACTO_TB_SP(
        P_ID_TELEFONO_CONTACTO IN FIDE_TELEFONO_CONTACTO_TB.ID_TELEFONO_CONTACTO_PK%TYPE,
        P_TELEFONO_CONTACTO IN FIDE_TELEFONO_CONTACTO_TB.TELEFONO_CONTACTO%TYPE,
        P_MODIFIED_BY IN FIDE_TELEFONO_CONTACTO_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE DESACTIVAR_TELEFONO_CONTACTO_TB_SP(
        P_ID_TELEFONO_CONTACTO IN FIDE_TELEFONO_CONTACTO_TB.ID_TELEFONO_CONTACTO_PK%TYPE
    );

    -- Procedimientos para FIDE_TIPO_USUARIO_TB
    PROCEDURE INSERT_TIPO_USUARIO_TB_SP(
        P_ESTADO IN FIDE_TIPO_USUARIO_TB.ID_ESTADO_FK%TYPE,
        P_DESCRIPCION_TIPO_USUARIO IN FIDE_TIPO_USUARIO_TB.DESCRIPCION_TIPO_USUARIO%TYPE,
        P_CREATED_BY IN FIDE_TIPO_USUARIO_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY IN FIDE_TIPO_USUARIO_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE UPDATE_TIPO_USUARIO_TB_SP(
        P_ID_TIPO_USUARIO IN FIDE_TIPO_USUARIO_TB.ID_TIPO_USUARIO_PK%TYPE,
        P_DESCRIPCION_TIPO_USUARIO IN FIDE_TIPO_USUARIO_TB.DESCRIPCION_TIPO_USUARIO%TYPE,
        P_MODIFIED_BY IN FIDE_TIPO_USUARIO_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE DESACTIVAR_TIPO_USUARIO_TB_SP(
        P_ID_TIPO_USUARIO IN FIDE_TIPO_USUARIO_TB.ID_TIPO_USUARIO_PK%TYPE
    );

    -- Procedimientos para FIDE_ESPECIALIDAD_TB
    PROCEDURE INSERT_ESPECIALIDAD_TB_SP(
        P_ESTADO IN FIDE_ESPECIALIDAD_TB.ID_ESTADO_FK%TYPE,
        P_NOMBRE_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.NOMBRE_ESPECIALIDAD%TYPE,
        P_DESCRIPCION_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.DESCRIPCION_ESPECIALIDAD%TYPE,
        P_CREATED_BY IN FIDE_ESPECIALIDAD_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY IN FIDE_ESPECIALIDAD_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE UPDATE_ESPECIALIDAD_TB_SP(
        P_ID_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.ID_ESPECIALIDAD_PK%TYPE,
        P_NOMBRE_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.NOMBRE_ESPECIALIDAD%TYPE,
        P_DESCRIPCION_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.DESCRIPCION_ESPECIALIDAD%TYPE,
        P_MODIFIED_BY IN FIDE_ESPECIALIDAD_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE DESACTIVAR_ESPECIALIDAD_TB_SP(
        P_ID_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.ID_ESPECIALIDAD_PK%TYPE
    );

    -- Procedimientos para FIDE_USUARIOS_TB
    PROCEDURE INSERT_USUARIOS_TB_SP(
        P_ESTADO IN FIDE_USUARIOS_TB.ID_ESTADO_FK%TYPE,
        P_ESPECIALIDAD IN FIDE_USUARIOS_TB.ID_ESPECIALIDAD_FK%TYPE,
        P_ID_TIPO_USUARIO IN FIDE_USUARIOS_TB.ID_TIPO_USUARIO_FK%TYPE,
        P_ID_DIRECCION_FK IN FIDE_USUARIOS_TB.ID_DIRECCION_FK%TYPE,
        P_ID_TELEFONO_CONTACTO_FK IN FIDE_USUARIOS_TB.ID_TELEFONO_CONTACTO_FK%TYPE,
        P_USUARIO_NOMBRE IN FIDE_USUARIOS_TB.USUARIO_NOMBRE%TYPE,
        P_USUARIO_CORREO IN FIDE_USUARIOS_TB.USUARIO_CORREO%TYPE,
        P_USUARIO_CONTRASENNA IN FIDE_USUARIOS_TB.USUARIO_CONTRASENNA%TYPE,
        P_USUARIO_IDENTIFICACION IN FIDE_USUARIOS_TB.USUARIO_IDENTIFICACION%TYPE,
        P_USUARIO_FECHA_REGISTRO IN FIDE_USUARIOS_TB.USUARIO_FECHA_REGISTRO%TYPE,
        P_USUARIO_CUENTA_BANCARIA IN FIDE_USUARIOS_TB.USUARIO_CUENTA_BANCARIA%TYPE,                                            
        P_CREATED_BY IN FIDE_USUARIOS_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY IN FIDE_USUARIOS_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE UPDATE_USUARIOS_TB_SP(
        P_ID_USUARIO IN FIDE_USUARIOS_TB.ID_USUARIO_PK%TYPE,
        P_ID_ESPECIALIDAD_FK IN FIDE_USUARIOS_TB.ID_ESPECIALIDAD_FK%TYPE,
        P_ID_TIPO_USUARIO_FK IN FIDE_USUARIOS_TB.ID_TIPO_USUARIO_FK%TYPE,
        P_ID_DIRECCION_FK IN FIDE_USUARIOS_TB.ID_DIRECCION_FK%TYPE,
        P_ID_TELEFONO_CONTACTO_FK IN FIDE_USUARIOS_TB.ID_TELEFONO_CONTACTO_FK%TYPE,
        P_USUARIO_NOMBRE IN FIDE_USUARIOS_TB.USUARIO_NOMBRE%TYPE,
        P_USUARIO_CORREO IN FIDE_USUARIOS_TB.USUARIO_CORREO%TYPE,
        P_USUARIO_CONTRASENNA IN FIDE_USUARIOS_TB.USUARIO_CONTRASENNA%TYPE,
        P_USUARIO_IDENTIFICACION IN FIDE_USUARIOS_TB.USUARIO_IDENTIFICACION%TYPE,
        P_USUARIO_FECHA_REGISTRO IN FIDE_USUARIOS_TB.USUARIO_FECHA_REGISTRO%TYPE,
        P_USUARIO_CUENTA_BANCARIA IN FIDE_USUARIOS_TB.USUARIO_CUENTA_BANCARIA%TYPE,
        P_MODIFIED_BY IN FIDE_USUARIOS_TB.MODIFIED_BY%TYPE
    );
    
    PROCEDURE DESACTIVAR_USUARIOS_TB_SP(
    P_ID_USUARIO IN FIDE_USUARIOS_TB.ID_USUARIO_PK%TYPE
    );
    
    PROCEDURE INSERT_MASCOTA_ESPECIE_TB_SP(
    P_ID_ESTADO_FK         IN FIDE_MASCOTA_ESPECIE_TB.ID_ESTADO_FK%TYPE,
    P_NOMBRE_ESPECIE       IN FIDE_MASCOTA_ESPECIE_TB.NOMBRE_ESPECIE%TYPE,
    P_CREATED_BY           IN FIDE_MASCOTA_ESPECIE_TB.CREATED_BY%TYPE,
    P_MODIFIED_BY          IN FIDE_MASCOTA_ESPECIE_TB.MODIFIED_BY%TYPE
    );
    
    --Procedimiento para hacer update de la tabla especies
    PROCEDURE UPDATE_MASCOTA_ESPECIE_TB_SP(
    P_ID_MASCOTA_ESPECIE   IN FIDE_MASCOTA_ESPECIE_TB.ID_MASCOTA_ESPECIE_PK%TYPE,
    P_ID_ESTADO_FK         IN FIDE_MASCOTA_ESPECIE_TB.ID_ESTADO_FK%TYPE,
    P_NOMBRE_ESPECIE       IN FIDE_MASCOTA_ESPECIE_TB.NOMBRE_ESPECIE%TYPE,
    P_MODIFIED_BY          IN FIDE_MASCOTA_ESPECIE_TB.MODIFIED_BY%TYPE
    );
    
    --Procedimiento para hacer un soft delete de la tabla especies
    PROCEDURE DESACTIVAR_MASCOTA_ESPECIE_TB_SP (
    P_ID_MASCOTA_ESPECIE  IN FIDE_MASCOTA_ESPECIE_TB.ID_MASCOTA_ESPECIE_PK%TYPE
    );
    
    
    
    PROCEDURE INSERT_MASCOTA_RAZA_TB_SP(
    P_ID_ESTADO_FK        IN FIDE_MASCOTA_RAZA_TB.ID_ESTADO_FK%TYPE,
    P_NOMBRE_RAZA         IN FIDE_MASCOTA_RAZA_TB.NOMBRE_RAZA%TYPE,
    P_CREATED_BY          IN FIDE_MASCOTA_RAZA_TB.CREATED_BY%TYPE,
    P_MODIFIED_BY         IN FIDE_MASCOTA_RAZA_TB.MODIFIED_BY%TYPE
    );
    
    PROCEDURE UPDATE_MASCOTA_RAZA_TB_SP(
    P_ID_MASCOTA_RAZA   IN FIDE_MASCOTA_RAZA_TB.ID_MASCOTA_RAZA_PK%TYPE,
    P_ID_ESTADO_FK      IN FIDE_MASCOTA_RAZA_TB.ID_ESTADO_FK%TYPE,
    P_NOMBRE_RAZA       IN FIDE_MASCOTA_RAZA_TB.NOMBRE_RAZA%TYPE,
    P_MODIFIED_BY       IN FIDE_MASCOTA_RAZA_TB.MODIFIED_BY%TYPE
    );
    
    PROCEDURE DESACTIVAR_MASCOTA_RAZA_TB_SP (
    P_ID_MASCOTA_RAZA  IN FIDE_MASCOTA_RAZA_TB.ID_MASCOTA_RAZA_PK%TYPE
    );
    
    PROCEDURE INSERT_MASCOTA_TB_SP (
    P_ID_ESTADO_FK           IN FIDE_MASCOTA_TB.ID_ESTADO_FK%TYPE,
    P_ID_MASCOTA_ESPECIE_FK  IN FIDE_MASCOTA_TB.ID_MASCOTA_ESPECIE_FK%TYPE,
    P_ID_MASCOTA_RAZA_FK     IN FIDE_MASCOTA_TB.ID_MASCOTA_RAZA_FK%TYPE,
    P_ID_USUARIO_FK          IN FIDE_MASCOTA_TB.ID_USUARIO_FK%TYPE,
    P_NOMBRE_MASCOTA         IN FIDE_MASCOTA_TB.NOMBRE_MASCOTA%TYPE,
    P_FECHA_NACIMIENTO       IN FIDE_MASCOTA_TB.FECHA_NACIMIENTO%TYPE,
    P_GENERO                 IN FIDE_MASCOTA_TB.GENERO%TYPE,
    P_CREATED_BY             IN FIDE_MASCOTA_TB.CREATED_BY%TYPE,
    P_MODIFIED_BY            IN FIDE_MASCOTA_TB.MODIFIED_BY%TYPE
    );
    
    PROCEDURE UPDATE_MASCOTA_TB_SP(
    P_ID_MASCOTA             IN FIDE_MASCOTA_TB.ID_MASCOTA_PK%TYPE,
    P_ID_ESTADO_FK           IN FIDE_MASCOTA_TB.ID_ESTADO_FK%TYPE,
    P_ID_MASCOTA_ESPECIE_FK  IN FIDE_MASCOTA_TB.ID_MASCOTA_ESPECIE_FK%TYPE,
    P_ID_MASCOTA_RAZA_FK     IN FIDE_MASCOTA_TB.ID_MASCOTA_RAZA_FK%TYPE,
    P_ID_USUARIO_FK          IN FIDE_MASCOTA_TB.ID_USUARIO_FK%TYPE,
    P_NOMBRE_MASCOTA         IN FIDE_MASCOTA_TB.NOMBRE_MASCOTA%TYPE,
    P_FECHA_NACIMIENTO       IN FIDE_MASCOTA_TB.FECHA_NACIMIENTO%TYPE,
    P_GENERO                 IN FIDE_MASCOTA_TB.GENERO%TYPE,
    P_MODIFIED_BY            IN FIDE_MASCOTA_TB.MODIFIED_BY%TYPE
    );
    
    PROCEDURE DESACTIVAR_MASCOTA_TB_SP (
    P_ID_MASCOTA IN FIDE_MASCOTA_TB.ID_MASCOTA_PK%TYPE
    );
    
    PROCEDURE INSERT_TIPO_EXAMEN_TB_SP(
    P_ID_ESTADO_FK         IN FIDE_TIPO_EXAMEN_TB.ID_ESTADO_FK%TYPE,
    P_DESCRIPCION_EXAMEN   IN FIDE_TIPO_EXAMEN_TB.DESCRIPCION_EXAMEN%TYPE,
    P_CREATED_BY           IN FIDE_TIPO_EXAMEN_TB.CREATED_BY%TYPE,
    P_MODIFIED_BY          IN FIDE_TIPO_EXAMEN_TB.MODIFIED_BY%TYPE
    );
    
    PROCEDURE UPDATE_TIPO_EXAMEN_TB_SP(
    P_ID_TIPO_EXAMEN       IN FIDE_TIPO_EXAMEN_TB.ID_TIPO_EXAMEN_PK%TYPE,
    P_ID_ESTADO_FK         IN FIDE_TIPO_EXAMEN_TB.ID_ESTADO_FK%TYPE,
    P_DESCRIPCION_EXAMEN   IN FIDE_TIPO_EXAMEN_TB.DESCRIPCION_EXAMEN%TYPE,
    P_MODIFIED_BY          IN FIDE_TIPO_EXAMEN_TB.MODIFIED_BY%TYPE
    );
    
    PROCEDURE DESACTIVAR_TIPO_EXAMEN_TB_SP (
    P_ID_TIPO_EXAMEN IN FIDE_TIPO_EXAMEN_TB.ID_TIPO_EXAMEN_PK%TYPE
    );
    
    PROCEDURE INSERT_EXAMENES_TB_SP(
    P_ID_MASCOTA_FK             IN FIDE_EXAMENES_TB.ID_MASCOTA_FK%TYPE,
    P_ID_ESTADO_FK              IN FIDE_EXAMENES_TB.ID_ESTADO_FK%TYPE,
    P_ID_TIPO_EXAMEN_FK         IN FIDE_EXAMENES_TB.ID_TIPO_EXAMEN_FK%TYPE,
    P_EXAMEN_RESULTADO          IN FIDE_EXAMENES_TB.EXAMEN_RESULTADO%TYPE,
    P_EXAMEN_FECHA_SEGUIMIENTO  IN FIDE_EXAMENES_TB.EXAMEN_FECHA_SEGUIMIENTO%TYPE,
    P_CREATED_BY                IN FIDE_EXAMENES_TB.CREATED_BY%TYPE,
    P_MODIFIED_BY               IN FIDE_EXAMENES_TB.MODIFIED_BY%TYPE
    );
    
    PROCEDURE UPDATE_EXAMENES_TB_SP(
    P_ID_EXAMEN              IN FIDE_EXAMENES_TB.ID_EXAMEN_PK%TYPE,
    P_ID_MASCOTA_FK          IN FIDE_EXAMENES_TB.ID_MASCOTA_FK%TYPE,
    P_ID_ESTADO_FK           IN FIDE_EXAMENES_TB.ID_ESTADO_FK%TYPE,
    P_ID_TIPO_EXAMEN_FK      IN FIDE_EXAMENES_TB.ID_TIPO_EXAMEN_FK%TYPE,
    P_EXAMEN_RESULTADO       IN FIDE_EXAMENES_TB.EXAMEN_RESULTADO%TYPE,
    P_EXAMEN_FECHA_SEGUIMIENTO IN FIDE_EXAMENES_TB.EXAMEN_FECHA_SEGUIMIENTO%TYPE,
    P_MODIFIED_BY            IN FIDE_EXAMENES_TB.MODIFIED_BY%TYPE
    );
    
    PROCEDURE DESACTIVAR_EXAMENES_TB_SP (
    P_ID_EXAMEN IN FIDE_EXAMENES_TB.ID_EXAMEN_PK%TYPE
    );
    
    
    PROCEDURE INSERT_CONSULTA_MOTIVO_TB_SP(
    P_ID_ESTADO_FK            IN FIDE_CONSULTA_MOTIVO_TB.ID_ESTADO_FK%TYPE,
    P_DESCRIPCION_MOTIVO      IN FIDE_CONSULTA_MOTIVO_TB.DESCRIPCION_MOTIVO%TYPE,
    P_CREATED_BY              IN FIDE_CONSULTA_MOTIVO_TB.CREATED_BY%TYPE,
    P_MODIFIED_BY             IN FIDE_CONSULTA_MOTIVO_TB.MODIFIED_BY%TYPE
    );
    
    PROCEDURE UPDATE_CONSULTA_MOTIVO_TB_SP(
    P_ID_CONSULTA_MOTIVO    IN FIDE_CONSULTA_MOTIVO_TB.ID_CONSULTA_MOTIVO_PK%TYPE,
    P_ID_ESTADO_FK          IN FIDE_CONSULTA_MOTIVO_TB.ID_ESTADO_FK%TYPE,
    P_DESCRIPCION_MOTIVO    IN FIDE_CONSULTA_MOTIVO_TB.DESCRIPCION_MOTIVO%TYPE,
    P_MODIFIED_BY           IN FIDE_CONSULTA_MOTIVO_TB.MODIFIED_BY%TYPE
    );
    
    PROCEDURE DESACTIVAR_CONSULTA_MOTIVO_TB_SP (
    P_ID_CONSULTA_MOTIVO IN FIDE_CONSULTA_MOTIVO_TB.ID_CONSULTA_MOTIVO_PK%TYPE
    );
    
    PROCEDURE INSERT_CONSULTAS_TB_SP(
    P_CONSULTA_FECHA          IN FIDE_CONSULTAS_TB.CONSULTA_FECHA%TYPE,
    P_ID_CONSULTA_MOTIVO_FK   IN FIDE_CONSULTAS_TB.ID_CONSULTA_MOTIVO_FK%TYPE,
    P_ID_ESTADO_FK            IN FIDE_CONSULTAS_TB.ID_ESTADO_FK%TYPE,
    P_ID_MASCOTA_FK           IN FIDE_CONSULTAS_TB.ID_MASCOTA_FK%TYPE,
    P_ID_USUARIO_FK           IN FIDE_CONSULTAS_TB.ID_USUARIO_FK%TYPE,
    P_CONSULTA_OBSERVACIONES  IN FIDE_CONSULTAS_TB.CONSULTA_OBSERVACIONES%TYPE,
    P_CREATED_BY              IN FIDE_CONSULTAS_TB.CREATED_BY%TYPE,
    P_MODIFIED_BY             IN FIDE_CONSULTAS_TB.MODIFIED_BY%TYPE
    );
    
    PROCEDURE UPDATE_CONSULTAS_TB_SP(
    P_ID_CONSULTA             IN FIDE_CONSULTAS_TB.ID_CONSULTA_PK%TYPE,
    P_CONSULTA_FECHA          IN FIDE_CONSULTAS_TB.CONSULTA_FECHA%TYPE,
    P_ID_CONSULTA_MOTIVO_FK   IN FIDE_CONSULTAS_TB.ID_CONSULTA_MOTIVO_FK%TYPE,
    P_ID_ESTADO_FK            IN FIDE_CONSULTAS_TB.ID_ESTADO_FK%TYPE,
    P_ID_MASCOTA_FK           IN FIDE_CONSULTAS_TB.ID_MASCOTA_FK%TYPE,
    P_ID_USUARIO_FK           IN FIDE_CONSULTAS_TB.ID_USUARIO_FK%TYPE,
    P_CONSULTA_OBSERVACIONES  IN FIDE_CONSULTAS_TB.CONSULTA_OBSERVACIONES%TYPE,
    P_MODIFIED_BY             IN FIDE_CONSULTAS_TB.MODIFIED_BY%TYPE
    );
    
    PROCEDURE DESACTIVAR_CONSULTAS_TB_SP (
    P_ID_CONSULTA IN FIDE_CONSULTAS_TB.ID_CONSULTA_PK%TYPE
    );
    
    PROCEDURE INSERT_FACTURACIONES_TB_SP(
    P_ID_CONSULTA_FK          IN FIDE_FACTURACIONES_TB.ID_CONSULTA_FK%TYPE,
    P_ID_ESTADO_FK            IN FIDE_FACTURACIONES_TB.ID_ESTADO_FK%TYPE,
    P_FACTURA_FECHA_EMISION   IN FIDE_FACTURACIONES_TB.FACTURA_FECHA_EMISION%TYPE,
    P_FACTURA_MONTO_TOTAL     IN FIDE_FACTURACIONES_TB.FACTURA_MONTO_TOTAL%TYPE,
    P_FACTURA_DESCUENTO       IN FIDE_FACTURACIONES_TB.FACTURA_DESCUENTO%TYPE,
    P_FACTURA_IMPUESTOS       IN FIDE_FACTURACIONES_TB.FACTURA_IMPUESTOS%TYPE,
    P_FACTURA_MONTO_FINAL     IN FIDE_FACTURACIONES_TB.FACTURA_MONTO_FINAL%TYPE,
    P_FACTURA_SUBTOTAL        IN FIDE_FACTURACIONES_TB.FACTURA_SUBTOTAL%TYPE,
    P_CREATED_BY              IN FIDE_FACTURACIONES_TB.CREATED_BY%TYPE,
    P_MODIFIED_BY             IN FIDE_FACTURACIONES_TB.MODIFIED_BY%TYPE
    );
    
    PROCEDURE UPDATE_FACTURACIONES_TB_SP(
    P_ID_FACTURA            IN FIDE_FACTURACIONES_TB.ID_FACTURA_PK%TYPE,
    P_ID_CONSULTA_FK        IN FIDE_FACTURACIONES_TB.ID_CONSULTA_FK%TYPE,
    P_ID_ESTADO_FK          IN FIDE_FACTURACIONES_TB.ID_ESTADO_FK%TYPE,
    P_FACTURA_FECHA_EMISION IN FIDE_FACTURACIONES_TB.FACTURA_FECHA_EMISION%TYPE,
    P_FACTURA_MONTO_TOTAL   IN FIDE_FACTURACIONES_TB.FACTURA_MONTO_TOTAL%TYPE,
    P_FACTURA_DESCUENTO     IN FIDE_FACTURACIONES_TB.FACTURA_DESCUENTO%TYPE,
    P_FACTURA_IMPUESTOS     IN FIDE_FACTURACIONES_TB.FACTURA_IMPUESTOS%TYPE,
    P_FACTURA_MONTO_FINAL   IN FIDE_FACTURACIONES_TB.FACTURA_MONTO_FINAL%TYPE,
    P_FACTURA_SUBTOTAL      IN FIDE_FACTURACIONES_TB.FACTURA_SUBTOTAL%TYPE,
    P_MODIFIED_BY           IN FIDE_FACTURACIONES_TB.MODIFIED_BY%TYPE
    );
    
    PROCEDURE DESACTIVAR_FACTURACIONES_TB_SP (
    P_ID_FACTURA IN FIDE_FACTURACIONES_TB.ID_FACTURA_PK%TYPE
    );
    
    PROCEDURE INSERT_PROVEEDORES_TB_SP(
    P_ID_ESTADO_FK                     IN FIDE_PROVEEDORES_TB.ID_ESTADO_FK%TYPE,
    P_ID_DIRECCION_FK                  IN FIDE_PROVEEDORES_TB.ID_DIRECCION_FK%TYPE,
    P_ID_TELEFONO_CONTACTO_FK          IN FIDE_PROVEEDORES_TB.ID_TELEFONO_CONTACTO_FK%TYPE,
    P_PROVEEDOR_NOMBRE                 IN FIDE_PROVEEDORES_TB.PROVEEDOR_NOMBRE%TYPE,
    P_PROVEEDOR_CORREO                 IN FIDE_PROVEEDORES_TB.PROVEEDOR_CORREO%TYPE,
    P_PROVEEDOR_DESCRIPCION_PRODUCTOS  IN FIDE_PROVEEDORES_TB.PROVEEDOR_DESCRIPCION_PRODUCTOS%TYPE,
    P_CREATED_BY                       IN FIDE_PROVEEDORES_TB.CREATED_BY%TYPE,
    P_MODIFIED_BY                      IN FIDE_PROVEEDORES_TB.MODIFIED_BY%TYPE
    );
    
    PROCEDURE UPDATE_PROVEEDORES_TB_SP(
    P_ID_PROVEEDOR_PK                  IN FIDE_PROVEEDORES_TB.ID_PROVEEDOR_PK%TYPE,
    P_ID_ESTADO_FK                     IN FIDE_PROVEEDORES_TB.ID_ESTADO_FK%TYPE,
    P_ID_DIRECCION_FK                  IN FIDE_PROVEEDORES_TB.ID_DIRECCION_FK%TYPE,
    P_ID_TELEFONO_CONTACTO_FK          IN FIDE_PROVEEDORES_TB.ID_TELEFONO_CONTACTO_FK%TYPE,
    P_PROVEEDOR_NOMBRE                 IN FIDE_PROVEEDORES_TB.PROVEEDOR_NOMBRE%TYPE,
    P_PROVEEDOR_CORREO                 IN FIDE_PROVEEDORES_TB.PROVEEDOR_CORREO%TYPE,
    P_PROVEEDOR_DESCRIPCION_PRODUCTOS  IN FIDE_PROVEEDORES_TB.PROVEEDOR_DESCRIPCION_PRODUCTOS%TYPE,
    P_MODIFIED_BY                      IN FIDE_PROVEEDORES_TB.MODIFIED_BY%TYPE
    );
    
    PROCEDURE DESACTIVAR_PROVEEDORES_TB_SP (
    P_ID_PROVEEDOR IN FIDE_PROVEEDORES_TB.ID_PROVEEDOR_PK%TYPE
    );
    
    FUNCTION EXISTE_USUARIO_FN(
    P_CORREO     IN FIDE_USUARIOS_TB.USUARIO_CORREO%TYPE,
    P_CONTRASENNA IN FIDE_USUARIOS_TB.USUARIO_CONTRASENNA%TYPE) 
    RETURN NUMBER;
    
    FUNCTION OBTENER_DIRECCION_USUARIO_FN (P_CEDULA_USUARIO VARCHAR2)
    RETURN VARCHAR2;
    
    FUNCTION OBTENER_MASCOTAS_USUARIO_FN (
    P_IDENTIFICACION_USUARIO VARCHAR2) 
    RETURN VARCHAR2;
    
    FUNCTION EXISTE_PROVINCIA_POR_NOMBRE_FN(
    P_NOMBRE_PROVINCIA IN FIDE_DIRECCION_PROVINCIA_TB.NOMBRE_PROVINCIA%TYPE
    ) RETURN NUMBER;
    
    FUNCTION OBTENER_NOMBRE_PRODUCTO_FN(
    P_ID_PRODUCTO IN FIDE_PRODUCTOS_TB.ID_PRODUCTO_PK%TYPE
    ) RETURN VARCHAR2;
    
    FUNCTION OBTENER_TOTAL_FACTURAS_USUARIO_FN(
    P_ID_USUARIO IN FIDE_USUARIOS_TB.ID_USUARIO_PK%TYPE
    ) RETURN NUMBER;
    
    FUNCTION PRODUCTO_EN_STOCK_FN(
    P_ID_PRODUCTO IN FIDE_PRODUCTOS_TB.ID_PRODUCTO_PK%TYPE
    ) RETURN NUMBER;
    
    FUNCTION OBTENER_INFO_CIRUGIA_FN(
    P_ID_CIRUGIA IN FIDE_REGISTRO_CIRUGIAS_TB.ID_CIRUGIA_PK%TYPE
    ) RETURN VARCHAR2;
    
    FUNCTION USUARIO_TIENE_MASCOTAS_FN(
    P_ID_USUARIO IN FIDE_USUARIOS_TB.ID_USUARIO_PK%TYPE
    ) RETURN NUMBER;
    
    FUNCTION OBTENER_PROVEEDOR_PRODUCTO_FN(
    P_ID_PRODUCTO IN FIDE_PRODUCTOS_TB.ID_PRODUCTO_PK%TYPE
    ) RETURN VARCHAR2;
    
    FUNCTION MASCOTA_TIENE_HISTORIAL_FN(
    P_ID_MASCOTA IN FIDE_MASCOTA_TB.ID_MASCOTA_PK%TYPE
    ) RETURN NUMBER;
    
    FUNCTION EXISTE_RAZA_POR_DESCRIPCION_FN(
    P_NOMBRE_RAZA VARCHAR2) 
    RETURN NUMBER;
    
    FUNCTION OBTENER_FECHA_CIRUGIA_FN(
    P_ID_CIRUGIA NUMBER) 
    RETURN DATE;
    
    FUNCTION OBTENER_DUENNO_MASCOTA_FN (P_ID_MASCOTA NUMBER) 
    RETURN VARCHAR2;
    
    FUNCTION OBTENER_USUARIO_POR_ID_FN(P_ID NUMBER)
    RETURN VARCHAR2;

    PROCEDURE FIDE_ESTADO_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_DIRECCION_PROVINCIA_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_DIRECCION_CANTON_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_DIRECCION_DISTRITO_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_DIRECCION_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_TELEFONO_CONTACTO_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_TIPO_USUARIO_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_ESPECIALIDAD_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_USUARIOS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_MASCOTA_ESPECIE_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_MASCOTA_RAZA_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_MASCOTA_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_TIPO_EXAMEN_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_EXAMENES_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_PAGOS_PLANILLAS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_HISTORIALES_MEDICOS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_CIRUGIAS_PERSONAL_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_CIRUGIAS_MEDICAMENTOS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_REGISTRO_CIRUGIAS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_ROLES_CIRUGIA_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_TIPO_VIA_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_ORDEN_PRODUCTOS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE INSERT_PRODUCTOS_SP(
        P_ID_PROVEEDOR IN FIDE_PRODUCTOS_TB.ID_PROVEEDOR_FK%TYPE,
        P_ID_ESTADO IN FIDE_PRODUCTOS_TB.ID_ESTADO_FK%TYPE,
        P_NOMBRE IN FIDE_PRODUCTOS_TB.PRODUCTO_NOMBRE%TYPE,
        P_DESCRIPCION IN FIDE_PRODUCTOS_TB.PRODUCTO_DESCRIPCION%TYPE,
        P_PRECIO_UNITARIO IN FIDE_PRODUCTOS_TB.PRODUCTO_PRECIO_UNITARIO%TYPE,
        P_STOCK IN FIDE_PRODUCTOS_TB.PRODUCTO_STOCK%TYPE,
        P_CREATED_BY IN FIDE_PRODUCTOS_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY IN FIDE_PRODUCTOS_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE UPDATE_PRODUCTOS_SP(
        P_ID_PRODUCTO IN FIDE_PRODUCTOS_TB.ID_PRODUCTO_PK%TYPE,
        P_ID_PROVEEDOR IN FIDE_PRODUCTOS_TB.ID_PROVEEDOR_FK%TYPE,
        P_ID_ESTADO IN FIDE_PRODUCTOS_TB.ID_ESTADO_FK%TYPE,
        P_NOMBRE IN FIDE_PRODUCTOS_TB.PRODUCTO_NOMBRE%TYPE,
        P_DESCRIPCION IN FIDE_PRODUCTOS_TB.PRODUCTO_DESCRIPCION%TYPE,
        P_PRECIO_UNITARIO IN FIDE_PRODUCTOS_TB.PRODUCTO_PRECIO_UNITARIO%TYPE,
        P_STOCK IN FIDE_PRODUCTOS_TB.PRODUCTO_STOCK%TYPE,
        P_MODIFIED_BY IN FIDE_PRODUCTOS_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE DESACTIVAR_PRODUCTOS_SP(
        P_ID_PRODUCTO IN FIDE_PRODUCTOS_TB.ID_PRODUCTO_PK%TYPE
    );
    ------------------- Procedimiento Orden compra  ---------------------------------
PROCEDURE INSERT_ORDEN_COMPRA_SP(
        P_ID_PROVEEDOR IN FIDE_ORDEN_COMPRA_TB.ID_PROVEEDOR_FK%TYPE,
        P_ID_ESTADO IN FIDE_ORDEN_COMPRA_TB.ID_ESTADO_FK%TYPE,
        P_FECHA IN FIDE_ORDEN_COMPRA_TB.ORDEN_COMPRA_FECHA%TYPE,
        P_PRECIO_TOTAL IN FIDE_ORDEN_COMPRA_TB.ORDEN_COMPRA_PRECIO_TOTAL%TYPE,
        P_CREATED_BY IN FIDE_ORDEN_COMPRA_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY IN FIDE_ORDEN_COMPRA_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE UPDATE_ORDEN_COMPRA_SP(
        P_ID_ORDEN IN FIDE_ORDEN_COMPRA_TB.ID_ORDEN_COMPRA_PK%TYPE,
        P_ID_PROVEEDOR IN FIDE_ORDEN_COMPRA_TB.ID_PROVEEDOR_FK%TYPE,
        P_ID_ESTADO IN FIDE_ORDEN_COMPRA_TB.ID_ESTADO_FK%TYPE,
        P_FECHA IN FIDE_ORDEN_COMPRA_TB.ORDEN_COMPRA_FECHA%TYPE,
        P_PRECIO_TOTAL IN FIDE_ORDEN_COMPRA_TB.ORDEN_COMPRA_PRECIO_TOTAL%TYPE,
        P_MODIFIED_BY IN FIDE_ORDEN_COMPRA_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE DESACTIVAR_ORDEN_COMPRA_SP(
        P_ID_ORDEN IN FIDE_ORDEN_COMPRA_TB.ID_ORDEN_COMPRA_PK%TYPE
    );    
    
--- Procedimientos para FIDE_TIPO_VIA_TB

    PROCEDURE INSERT_TIPO_VIA_SP(
        P_ID_ESTADO IN FIDE_TIPO_VIA_TB.ID_ESTADO_FK%TYPE,
        P_DESCRIPCION IN FIDE_TIPO_VIA_TB.TIPO_VIA_DESCRIPCION%TYPE,
        P_CREATED_BY IN FIDE_TIPO_VIA_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY IN FIDE_TIPO_VIA_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE UPDATE_TIPO_VIA_SP(
        P_ID_TIPO_VIA IN FIDE_TIPO_VIA_TB.ID_TIPO_VIA_PK%TYPE,
        P_ID_ESTADO IN FIDE_TIPO_VIA_TB.ID_ESTADO_FK%TYPE,
        P_DESCRIPCION IN FIDE_TIPO_VIA_TB.TIPO_VIA_DESCRIPCION%TYPE,
        P_MODIFIED_BY IN FIDE_TIPO_VIA_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE DESACTIVAR_TIPO_VIA_SP(
        P_ID_TIPO_VIA IN FIDE_TIPO_VIA_TB.ID_TIPO_VIA_PK%TYPE
    );
--- Procedimientos para FIDE_PAGOS_PLANILLAS_TB

    PROCEDURE INSERT_PAGOS_PLANILLAS_SP(
        P_ID_USUARIO IN FIDE_PAGOS_PLANILLAS_TB.ID_USUARIO_FK%TYPE,
        P_ID_ESTADO IN FIDE_PAGOS_PLANILLAS_TB.ID_ESTADO_FK%TYPE,
        P_PAGO_FECHA IN FIDE_PAGOS_PLANILLAS_TB.PAGO_FECHA%TYPE,
        P_SALARIO_BRUTO IN FIDE_PAGOS_PLANILLAS_TB.PAGO_SALARIO_BRUTO%TYPE,
        P_SALARIO_NETO IN FIDE_PAGOS_PLANILLAS_TB.PAGO_SALARIO_NETO%TYPE,
        P_HORAS_EXTRA IN FIDE_PAGOS_PLANILLAS_TB.PAGO_HORAS_EXTRA%TYPE,
        P_VACACIONES IN FIDE_PAGOS_PLANILLAS_TB.PAGO_VACACIONES%TYPE,
        P_CREATED_BY IN FIDE_PAGOS_PLANILLAS_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY IN FIDE_PAGOS_PLANILLAS_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE UPDATE_PAGOS_PLANILLAS_SP(
        P_ID_PAGO IN FIDE_PAGOS_PLANILLAS_TB.ID_PAGO_PLANILLA_PK%TYPE,
        P_ID_USUARIO IN FIDE_PAGOS_PLANILLAS_TB.ID_USUARIO_FK%TYPE,
        P_ID_ESTADO IN FIDE_PAGOS_PLANILLAS_TB.ID_ESTADO_FK%TYPE,
        P_PAGO_FECHA IN FIDE_PAGOS_PLANILLAS_TB.PAGO_FECHA%TYPE,
        P_SALARIO_BRUTO IN FIDE_PAGOS_PLANILLAS_TB.PAGO_SALARIO_BRUTO%TYPE,
        P_SALARIO_NETO IN FIDE_PAGOS_PLANILLAS_TB.PAGO_SALARIO_NETO%TYPE,
        P_HORAS_EXTRA IN FIDE_PAGOS_PLANILLAS_TB.PAGO_HORAS_EXTRA%TYPE,
        P_VACACIONES IN FIDE_PAGOS_PLANILLAS_TB.PAGO_VACACIONES%TYPE,
        P_MODIFIED_BY IN FIDE_PAGOS_PLANILLAS_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE DESACTIVAR_PAGOS_PLANILLAS_SP(
        P_ID_PAGO IN FIDE_PAGOS_PLANILLAS_TB.ID_PAGO_PLANILLA_PK%TYPE
    );
    
    --- Procedimientos para FIDE_ROLES_CIRUGIA_TB
    PROCEDURE INSERT_ROLES_CIRUGIA_SP(
        P_ID_ESTADO IN FIDE_ROLES_CIRUGIA_TB.ID_ESTADO_FK%TYPE,
        P_MEDICO_CIRUJANO IN FIDE_ROLES_CIRUGIA_TB.MEDICO_CIRUJANO%TYPE,
        P_ASISTENTE_ANESTESIOLOGO IN FIDE_ROLES_CIRUGIA_TB.ASISTENTE_ANESTESIOLOGO%TYPE,
        P_CREATED_BY IN FIDE_ROLES_CIRUGIA_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY IN FIDE_ROLES_CIRUGIA_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE UPDATE_ROLES_CIRUGIA_SP(
        P_ID_ROL_CIRUGIA IN FIDE_ROLES_CIRUGIA_TB.ID_ROL_CIRUGIA_PK%TYPE,
        P_ID_ESTADO IN FIDE_ROLES_CIRUGIA_TB.ID_ESTADO_FK%TYPE,
        P_MEDICO_CIRUJANO IN FIDE_ROLES_CIRUGIA_TB.MEDICO_CIRUJANO%TYPE,
        P_ASISTENTE_ANESTESIOLOGO IN FIDE_ROLES_CIRUGIA_TB.ASISTENTE_ANESTESIOLOGO%TYPE,
        P_MODIFIED_BY IN FIDE_ROLES_CIRUGIA_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE DESACTIVAR_ROLES_CIRUGIA_SP(
        P_ID_ROL_CIRUGIA IN FIDE_ROLES_CIRUGIA_TB.ID_ROL_CIRUGIA_PK%TYPE
    );
    
--- Procedimientos para FIDE_REGISTRO_CIRUGIAS_TB
    PROCEDURE INSERT_REGISTRO_CIRUGIA_SP(
        P_CIRUGIA_FECHA_INICIO IN FIDE_REGISTRO_CIRUGIAS_TB.CIRUGIA_FECHA_INICIO%TYPE,
        P_CIRUGIA_FECHA_FINAL IN FIDE_REGISTRO_CIRUGIAS_TB.CIRUGIA_FECHA_FINAL%TYPE,
        P_ID_ESTADO IN FIDE_REGISTRO_CIRUGIAS_TB.ID_ESTADO_FK%TYPE,
        P_ID_MASCOTA IN FIDE_REGISTRO_CIRUGIAS_TB.ID_MASCOTA_FK%TYPE,
        P_CIRUGIA_ANOTACIONES IN FIDE_REGISTRO_CIRUGIAS_TB.CIRUGIA_ANOTACIONES%TYPE,
        P_CIRUGIA_DIAG_PREVIO IN FIDE_REGISTRO_CIRUGIAS_TB.CIRUGIA_DIAG_PREVIO%TYPE,
        P_CIRUGIA_DIAG_POST IN FIDE_REGISTRO_CIRUGIAS_TB.CIRUGIA_DIAG_POST%TYPE,
        P_CREATED_BY IN FIDE_REGISTRO_CIRUGIAS_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY IN FIDE_REGISTRO_CIRUGIAS_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE UPDATE_REGISTRO_CIRUGIA_SP(
        P_ID_CIRUGIA IN FIDE_REGISTRO_CIRUGIAS_TB.ID_CIRUGIA_PK%TYPE,
        P_CIRUGIA_FECHA_INICIO IN FIDE_REGISTRO_CIRUGIAS_TB.CIRUGIA_FECHA_INICIO%TYPE,
        P_CIRUGIA_FECHA_FINAL IN FIDE_REGISTRO_CIRUGIAS_TB.CIRUGIA_FECHA_FINAL%TYPE,
        P_ID_ESTADO IN FIDE_REGISTRO_CIRUGIAS_TB.ID_ESTADO_FK%TYPE,
        P_ID_MASCOTA IN FIDE_REGISTRO_CIRUGIAS_TB.ID_MASCOTA_FK%TYPE,
        P_CIRUGIA_ANOTACIONES IN FIDE_REGISTRO_CIRUGIAS_TB.CIRUGIA_ANOTACIONES%TYPE,
        P_CIRUGIA_DIAG_PREVIO IN FIDE_REGISTRO_CIRUGIAS_TB.CIRUGIA_DIAG_PREVIO%TYPE,
        P_CIRUGIA_DIAG_POST IN FIDE_REGISTRO_CIRUGIAS_TB.CIRUGIA_DIAG_POST%TYPE,
        P_MODIFIED_BY IN FIDE_REGISTRO_CIRUGIAS_TB.MODIFIED_BY%TYPE
    );

    PROCEDURE DESACTIVAR_REGISTRO_CIRUGIA_SP(
        P_ID_CIRUGIA IN FIDE_REGISTRO_CIRUGIAS_TB.ID_CIRUGIA_PK%TYPE
    );

  --- Procedimientos para FIDE_ORDEN_PRODUCTOS_TB
    PROCEDURE INSERT_ORDEN_PRODUCTO_SP(
    P_ID_ORDEN_COMPRA_FK              IN FIDE_ORDEN_PRODUCTOS_TB.ID_ORDEN_COMPRA_FK%TYPE,
    P_ID_PRODUCTO_FK                  IN FIDE_ORDEN_PRODUCTOS_TB.ID_PRODUCTO_FK%TYPE,
    P_ID_ESTADO_FK                    IN FIDE_ORDEN_PRODUCTOS_TB.ID_ESTADO_FK%TYPE,
    P_ORDEN_PRODUCTO_CANTIDAD         IN FIDE_ORDEN_PRODUCTOS_TB.ORDEN_PRODUCTO_CANTIDAD%TYPE,
    P_ORDEN_PRODUCTO_PRECIO_UNITARIO IN FIDE_ORDEN_PRODUCTOS_TB.ORDEN_PRODUCTO_PRECIO_UNITARIO%TYPE,
    P_CREATED_BY                      IN FIDE_ORDEN_PRODUCTOS_TB.CREATED_BY%TYPE,
    P_MODIFIED_BY                     IN FIDE_ORDEN_PRODUCTOS_TB.MODIFIED_BY%TYPE
  );

  PROCEDURE UPDATE_ORDEN_PRODUCTO_SP(
    P_ID_ORDEN_COMPRA_FK              IN FIDE_ORDEN_PRODUCTOS_TB.ID_ORDEN_COMPRA_FK%TYPE,
    P_ID_PRODUCTO_FK                  IN FIDE_ORDEN_PRODUCTOS_TB.ID_PRODUCTO_FK%TYPE,
    P_ID_ESTADO_FK                    IN FIDE_ORDEN_PRODUCTOS_TB.ID_ESTADO_FK%TYPE,
    P_ORDEN_PRODUCTO_CANTIDAD         IN FIDE_ORDEN_PRODUCTOS_TB.ORDEN_PRODUCTO_CANTIDAD%TYPE,
    P_ORDEN_PRODUCTO_PRECIO_UNITARIO IN FIDE_ORDEN_PRODUCTOS_TB.ORDEN_PRODUCTO_PRECIO_UNITARIO%TYPE,
    P_MODIFIED_BY                     IN FIDE_ORDEN_PRODUCTOS_TB.MODIFIED_BY%TYPE
  );

  PROCEDURE DESACTIVAR_ORDEN_PRODUCTO_SP(
    P_ID_ORDEN_COMPRA_FK IN FIDE_ORDEN_PRODUCTOS_TB.ID_ORDEN_COMPRA_FK%TYPE,
    P_ID_PRODUCTO_FK     IN FIDE_ORDEN_PRODUCTOS_TB.ID_PRODUCTO_FK%TYPE
  );
--- Procedimientos para FIDE_CIRUGIAS_MEDICAMENTOS_TB

 PROCEDURE INSERT_CIRUGIA_MEDICAMENTO_SP(
    P_ID_CIRUGIA_FK               IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.ID_CIRUGIA_FK%TYPE,
    P_ID_PRODUCTO_FK              IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.ID_PRODUCTO_FK%TYPE,
    P_ID_ESTADO_FK                IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.ID_ESTADO_FK%TYPE,
    P_ID_TIPO_VIA_FK             IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.ID_TIPO_VIA_FK%TYPE,
    P_DOSIS                       IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.CIRUGIA_MEDICAMENTO_DOSIS%TYPE,
    P_CREATED_BY                  IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.CREATED_BY%TYPE,
    P_MODIFIED_BY                 IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.MODIFIED_BY%TYPE
  );

  PROCEDURE UPDATE_CIRUGIA_MEDICAMENTO_SP(
    P_ID_CIRUGIA_FK               IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.ID_CIRUGIA_FK%TYPE,
    P_ID_PRODUCTO_FK              IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.ID_PRODUCTO_FK%TYPE,
    P_ID_ESTADO_FK                IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.ID_ESTADO_FK%TYPE,
    P_ID_TIPO_VIA_FK             IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.ID_TIPO_VIA_FK%TYPE,
    P_DOSIS                       IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.CIRUGIA_MEDICAMENTO_DOSIS%TYPE,
    P_MODIFIED_BY                 IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.MODIFIED_BY%TYPE
  );

  PROCEDURE DESACTIVAR_CIRUGIA_MEDICAMENTO_SP(
    P_ID_CIRUGIA_FK     IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.ID_CIRUGIA_FK%TYPE,
    P_ID_PRODUCTO_FK    IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.ID_PRODUCTO_FK%TYPE
    
  );

  --- Procedimientos para FIDE_CIRUGIAS_PERSONAL
  PROCEDURE INSERT_CIRUGIA_PERSONAL_SP(
    P_ID_CIRUGIA_FK              IN FIDE_CIRUGIAS_PERSONAL_TB.ID_CIRUGIA_FK%TYPE,
    P_ID_USUARIO_FK             IN FIDE_CIRUGIAS_PERSONAL_TB.ID_USUARIO_FK%TYPE,
    P_ID_ROL_CIRUGIA_FK         IN FIDE_CIRUGIAS_PERSONAL_TB.ID_ROL_CIRUGIA_FK%TYPE,
    P_ID_ESTADO_FK              IN FIDE_CIRUGIAS_PERSONAL_TB.ID_ESTADO_FK%TYPE,
    P_ID_TIPO_USUARIO_FK        IN FIDE_CIRUGIAS_PERSONAL_TB.ID_TIPO_USUARIO_FK%TYPE,
    P_ANOTACIONES               IN FIDE_CIRUGIAS_PERSONAL_TB.ANOTACIONES_ADICIONALES%TYPE,
    P_CREATED_BY                IN FIDE_CIRUGIAS_PERSONAL_TB.CREATED_BY%TYPE,
    P_MODIFIED_BY               IN FIDE_CIRUGIAS_PERSONAL_TB.MODIFIED_BY%TYPE
  );

  PROCEDURE UPDATE_CIRUGIA_PERSONAL_SP(
    P_ID_CIRUGIA_FK              IN FIDE_CIRUGIAS_PERSONAL_TB.ID_CIRUGIA_FK%TYPE,
    P_ID_USUARIO_FK             IN FIDE_CIRUGIAS_PERSONAL_TB.ID_USUARIO_FK%TYPE,
    P_ID_ROL_CIRUGIA_FK         IN FIDE_CIRUGIAS_PERSONAL_TB.ID_ROL_CIRUGIA_FK%TYPE,
    P_ID_ESTADO_FK              IN FIDE_CIRUGIAS_PERSONAL_TB.ID_ESTADO_FK%TYPE,
    P_ID_TIPO_USUARIO_FK        IN FIDE_CIRUGIAS_PERSONAL_TB.ID_TIPO_USUARIO_FK%TYPE,
    P_ANOTACIONES               IN FIDE_CIRUGIAS_PERSONAL_TB.ANOTACIONES_ADICIONALES%TYPE,
    P_MODIFIED_BY               IN FIDE_CIRUGIAS_PERSONAL_TB.MODIFIED_BY%TYPE
  );

  PROCEDURE DESACTIVAR_CIRUGIA_PERSONAL_SP(
    P_ID_CIRUGIA_FK              IN FIDE_CIRUGIAS_PERSONAL_TB.ID_CIRUGIA_FK%TYPE,
    P_ID_USUARIO_FK             IN FIDE_CIRUGIAS_PERSONAL_TB.ID_USUARIO_FK%TYPE,
    P_ID_ROL_CIRUGIA_FK         IN FIDE_CIRUGIAS_PERSONAL_TB.ID_ROL_CIRUGIA_FK%TYPE
  );
  
  ---------- Procedimientos para FIDE_HISTORIALES_MEDICOS_TB
  PROCEDURE INSERT_HISTORIAL_MEDICO_SP(
    P_ID_MASCOTA_FK            IN FIDE_HISTORIALES_MEDICOS_TB.ID_MASCOTA_FK%TYPE,
    P_ID_CONSULTA_FK           IN FIDE_HISTORIALES_MEDICOS_TB.ID_CONSULTA_FK%TYPE,
    P_ID_USUARIO_FK            IN FIDE_HISTORIALES_MEDICOS_TB.ID_USUARIO_FK%TYPE,
    P_ID_TIPO_USUARIO_FK       IN FIDE_HISTORIALES_MEDICOS_TB.ID_TIPO_USUARIO_FK%TYPE,
    P_ID_ESTADO_FK             IN FIDE_HISTORIALES_MEDICOS_TB.ID_ESTADO_FK%TYPE,
    P_FECHA_REGISTRO           IN FIDE_HISTORIALES_MEDICOS_TB.HISTORIAL_FECHA_REGISTRO%TYPE,
    P_DIAGNOSTICO              IN FIDE_HISTORIALES_MEDICOS_TB.HISTORIAL_DIAGNOSTICO%TYPE,
    P_TRATAMIENTO              IN FIDE_HISTORIALES_MEDICOS_TB.HISTORIAL_TRATAMIENTO%TYPE,
    P_NOTAS                    IN FIDE_HISTORIALES_MEDICOS_TB.HISTORIAL_NOTAS%TYPE,
    P_CREATED_BY               IN FIDE_HISTORIALES_MEDICOS_TB.CREATED_BY%TYPE,
    P_MODIFIED_BY              IN FIDE_HISTORIALES_MEDICOS_TB.MODIFIED_BY%TYPE
  );

  PROCEDURE UPDATE_HISTORIAL_MEDICO_SP(
    P_ID_MASCOTA_FK            IN FIDE_HISTORIALES_MEDICOS_TB.ID_MASCOTA_FK%TYPE,
    P_ID_CONSULTA_FK           IN FIDE_HISTORIALES_MEDICOS_TB.ID_CONSULTA_FK%TYPE,
    P_ID_USUARIO_FK            IN FIDE_HISTORIALES_MEDICOS_TB.ID_USUARIO_FK%TYPE,
    P_ID_TIPO_USUARIO_FK       IN FIDE_HISTORIALES_MEDICOS_TB.ID_TIPO_USUARIO_FK%TYPE,
    P_ID_ESTADO_FK             IN FIDE_HISTORIALES_MEDICOS_TB.ID_ESTADO_FK%TYPE,
    P_FECHA_REGISTRO           IN FIDE_HISTORIALES_MEDICOS_TB.HISTORIAL_FECHA_REGISTRO%TYPE,
    P_DIAGNOSTICO              IN FIDE_HISTORIALES_MEDICOS_TB.HISTORIAL_DIAGNOSTICO%TYPE,
    P_TRATAMIENTO              IN FIDE_HISTORIALES_MEDICOS_TB.HISTORIAL_TRATAMIENTO%TYPE,
    P_NOTAS                    IN FIDE_HISTORIALES_MEDICOS_TB.HISTORIAL_NOTAS%TYPE,
    P_MODIFIED_BY              IN FIDE_HISTORIALES_MEDICOS_TB.MODIFIED_BY%TYPE
  );

  PROCEDURE DESACTIVAR_HISTORIAL_MEDICO_SP(
    P_ID_MASCOTA_FK            IN FIDE_HISTORIALES_MEDICOS_TB.ID_MASCOTA_FK%TYPE,
    P_ID_CONSULTA_FK           IN FIDE_HISTORIALES_MEDICOS_TB.ID_CONSULTA_FK%TYPE
  );
  
----------Procedimiento Detalle Factura

 PROCEDURE INSERT_DETALLE_FACTURA_SP(
    P_ID_FACTURA_FK     IN FIDE_DETALLE_FACTURA_TB.ID_FACTURA_FK%TYPE,
    P_LINEA             IN FIDE_DETALLE_FACTURA_TB.LINEA%TYPE,
    P_ESTADO            IN FIDE_DETALLE_FACTURA_TB.ID_ESTADO_FK%TYPE,
    P_ID_PRODUCTO_FK    IN FIDE_DETALLE_FACTURA_TB.ID_PRODUCTO_FK%TYPE,
    P_MONTO_UNITARIO    IN FIDE_DETALLE_FACTURA_TB.MONTO_UNITARIO%TYPE,
    P_CANTIDAD          IN FIDE_DETALLE_FACTURA_TB.CANTIDAD%TYPE,
    P_CREATED_BY        IN FIDE_DETALLE_FACTURA_TB.CREATED_BY%TYPE,
    P_MODIFIED_BY       IN FIDE_DETALLE_FACTURA_TB.MODIFIED_BY%TYPE
  );

  PROCEDURE UPDATE_DETALLE_FACTURA_SP(
    P_ID_FACTURA_FK     IN FIDE_DETALLE_FACTURA_TB.ID_FACTURA_FK%TYPE,
    P_LINEA             IN FIDE_DETALLE_FACTURA_TB.LINEA%TYPE,
    P_ESTADO            IN FIDE_DETALLE_FACTURA_TB.ID_ESTADO_FK%TYPE,
    P_ID_PRODUCTO_FK    IN FIDE_DETALLE_FACTURA_TB.ID_PRODUCTO_FK%TYPE,
    P_MONTO_UNITARIO    IN FIDE_DETALLE_FACTURA_TB.MONTO_UNITARIO%TYPE,
    P_CANTIDAD          IN FIDE_DETALLE_FACTURA_TB.CANTIDAD%TYPE,
    P_MODIFIED_BY       IN FIDE_DETALLE_FACTURA_TB.MODIFIED_BY%TYPE
  );

  PROCEDURE DESACTIVAR_DETALLE_FACTURA_SP(
    P_ID_FACTURA_FK IN FIDE_DETALLE_FACTURA_TB.ID_FACTURA_FK%TYPE,
    P_LINEA         IN FIDE_DETALLE_FACTURA_TB.LINEA%TYPE
  ); 
  ---SELECTS---
    PROCEDURE FIDE_CONSULTA_MOTIVO_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);
    PROCEDURE FIDE_CONSULTAS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);
    PROCEDURE FIDE_FACTURACIONES_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);
    PROCEDURE FIDE_PROVEEDORES_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);
    PROCEDURE FIDE_PRODUCTOS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);
    PROCEDURE FIDE_DETALLE_FACTURA_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);
    PROCEDURE FIDE_ORDEN_COMPRA_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

END PROYECTO_FUNCIONES_PROCEDIMIENTOS_PKG;
/
CREATE OR REPLACE PACKAGE BODY PROYECTO_FUNCIONES_PROCEDIMIENTOS_PKG AS
--Creacion procedimiento de inserciones FIDE_ESTADO_TB
    PROCEDURE INSERT_ESTADO_TB_SP(
                                                P_ID_ESTADO IN FIDE_ESTADO_TB.ID_ESTADO_PK%TYPE,
                                                P_ESTADO_DESCRIPCION IN FIDE_ESTADO_TB.ESTADO_DESCRIPCION%TYPE,
                                                P_CREATED_BY IN FIDE_ESTADO_TB.CREATED_BY%TYPE,
                                                P_MODIFIED_BY IN FIDE_ESTADO_TB.MODIFIED_BY%TYPE
        )
        IS
        BEGIN 
        INSERT INTO FIDE_ESTADO_TB(ID_ESTADO_PK, ESTADO_DESCRIPCION,CREATED_BY, MODIFIED_BY)
        VALUES(P_ID_ESTADO, P_ESTADO_DESCRIPCION, P_CREATED_BY, P_MODIFIED_BY);
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
        EXCEPTION
                WHEN NO_DATA_FOUND THEN
                        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
                WHEN OTHERS THEN
                        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
        END INSERT_ESTADO_TB_SP;
    
    -- Update tabla estado
    PROCEDURE UPDATE_ESTADO_TB_SP(
            P_ID_ESTADO IN FIDE_ESTADO_TB.ID_ESTADO_PK%TYPE,
            P_ESTADO_DESCRIPCION IN FIDE_ESTADO_TB.ESTADO_DESCRIPCION%TYPE,
            P_MODIFIED_BY IN FIDE_ESTADO_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_ESTADO_TB
           SET ESTADO_DESCRIPCION = P_ESTADO_DESCRIPCION,
               MODIFIED_BY        = P_MODIFIED_BY
         WHERE ID_ESTADO_PK = P_ID_ESTADO;
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END UPDATE_ESTADO_TB_SP;
        
    --Creacion procedimiento de inserciones FIDE_DIRECCION_PROVINCIA_TB
PROCEDURE INSERT_DIRECCION_PROVINCIA_TB_SP(
                                                P_ID_DIRECCION_PROVINCIA IN FIDE_DIRECCION_PROVINCIA_TB.ID_DIRECCION_PROVINCIA_PK%TYPE,
                                                P_ESTADO IN FIDE_DIRECCION_PROVINCIA_TB.ID_ESTADO_FK%TYPE,
                                                P_NOMBRE_PROVINCIA IN FIDE_DIRECCION_PROVINCIA_TB.NOMBRE_PROVINCIA%TYPE,
                                                P_CREATED_BY IN FIDE_DIRECCION_PROVINCIA_TB.CREATED_BY%TYPE,
                                                P_MODIFIED_BY IN FIDE_DIRECCION_PROVINCIA_TB.MODIFIED_BY%TYPE
        )
        IS
        BEGIN 
        INSERT INTO FIDE_DIRECCION_PROVINCIA_TB(ID_DIRECCION_PROVINCIA_PK, ID_ESTADO_FK, NOMBRE_PROVINCIA,CREATED_BY, MODIFIED_BY)
        VALUES(P_ID_DIRECCION_PROVINCIA, P_ESTADO, P_NOMBRE_PROVINCIA, P_CREATED_BY, P_MODIFIED_BY);
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
        EXCEPTION
                WHEN NO_DATA_FOUND THEN
                        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
                WHEN OTHERS THEN
                        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
        END INSERT_DIRECCION_PROVINCIA_TB_SP;
    
    -- Update FIDE_DIRECCION_PROVINCIA_TB
    PROCEDURE UPDATE_DIRECCION_PROVINCIA_TB_SP(
                                                    P_ID_DIRECCION_PROVINCIA IN FIDE_DIRECCION_PROVINCIA_TB.ID_DIRECCION_PROVINCIA_PK%TYPE,
                                                    P_ESTADO IN FIDE_DIRECCION_PROVINCIA_TB.ID_ESTADO_FK%TYPE,
                                                    P_NOMBRE_PROVINCIA IN FIDE_DIRECCION_PROVINCIA_TB.NOMBRE_PROVINCIA%TYPE,
                                                    P_MODIFIED_BY IN FIDE_DIRECCION_PROVINCIA_TB.MODIFIED_BY%TYPE
            )
        IS
        BEGIN
            UPDATE FIDE_DIRECCION_PROVINCIA_TB
            SET ID_ESTADO_FK = P_ESTADO,
                NOMBRE_PROVINCIA = P_NOMBRE_PROVINCIA,
                MODIFIED_BY = P_MODIFIED_BY
            WHERE ID_DIRECCION_PROVINCIA_PK = P_ID_DIRECCION_PROVINCIA;
            COMMIT;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
        END UPDATE_DIRECCION_PROVINCIA_TB_SP;
    
    --Procedimiento para hacer un soft delete de la tabla FIDE_DIRECCION_PROVINCIA_TB
    PROCEDURE DESACTIVAR_DIRECCION_PROVINCIA_TB_SP(
        P_ID_DIRECCION_PROVINCIA IN FIDE_DIRECCION_PROVINCIA_TB.ID_DIRECCION_PROVINCIA_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_DIRECCION_PROVINCIA_TB
        SET ID_ESTADO_FK = 0
        WHERE ID_DIRECCION_PROVINCIA_PK = P_ID_DIRECCION_PROVINCIA;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro desactivado con exito.');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('No se encontro el registro con ID: ' || P_ID_DIRECCION_PROVINCIA);
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al desactivar el registro: ' || SQLERRM);
    END DESACTIVAR_DIRECCION_PROVINCIA_TB_SP;
    
    --Creacion procedimiento de inserciones FIDE_DIRECCION_CANTON_TB
    PROCEDURE INSERT_DIRECCION_CANTON_TB_SP(
                                                P_ID_DIRECCION_CANTON IN FIDE_DIRECCION_CANTON_TB.ID_DIRECCION_CANTON_PK%TYPE,
                                                P_ESTADO IN FIDE_DIRECCION_CANTON_TB.ID_ESTADO_FK%TYPE,
                                                P_NOMBRE_CANTON IN FIDE_DIRECCION_CANTON_TB.NOMBRE_CANTON%TYPE,
                                                P_CREATED_BY IN FIDE_DIRECCION_CANTON_TB.CREATED_BY%TYPE,
                                                P_MODIFIED_BY IN FIDE_DIRECCION_CANTON_TB.MODIFIED_BY%TYPE
        )
        IS
        BEGIN 
        INSERT INTO FIDE_DIRECCION_CANTON_TB(ID_DIRECCION_CANTON_PK,ID_ESTADO_FK, NOMBRE_CANTON,CREATED_BY, MODIFIED_BY)
        VALUES(P_ID_DIRECCION_CANTON, P_ESTADO, P_NOMBRE_CANTON, P_CREATED_BY,  P_MODIFIED_BY);
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
        EXCEPTION
                WHEN NO_DATA_FOUND THEN
                        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
                WHEN OTHERS THEN
                        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
        END INSERT_DIRECCION_CANTON_TB_SP;
    
    --Creacion procedimiento de update para la tabla FIDE_DIRECCION_CANTON_TB
    PROCEDURE UPDATE_DIRECCION_CANTON_TB_SP(
        P_ID_DIRECCION_CANTON IN FIDE_DIRECCION_CANTON_TB.ID_DIRECCION_CANTON_PK%TYPE,
        P_NOMBRE_CANTON IN FIDE_DIRECCION_CANTON_TB.NOMBRE_CANTON%TYPE,
        P_MODIFIED_BY IN FIDE_DIRECCION_CANTON_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_DIRECCION_CANTON_TB
        SET NOMBRE_CANTON = P_NOMBRE_CANTON,
            MODIFIED_BY = P_MODIFIED_BY
        WHERE ID_DIRECCION_CANTON_PK = P_ID_DIRECCION_CANTON;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro actualizado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al actualizar el registro: ' || SQLERRM);
    END UPDATE_DIRECCION_CANTON_TB_SP;
    
    --Procedimiento para hacer un soft delete de la tabla FIDE_DIRECCION_CANTON_TB
    PROCEDURE DESACTIVAR_DIRECCION_CANTON_TB_SP(
        P_ID_DIRECCION_CANTON IN FIDE_DIRECCION_CANTON_TB.ID_DIRECCION_CANTON_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_DIRECCION_CANTON_TB
        SET ID_ESTADO_FK = 0
        WHERE ID_DIRECCION_CANTON_PK = P_ID_DIRECCION_CANTON;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro desactivado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al desactivar el registro: ' || SQLERRM);
    END DESACTIVAR_DIRECCION_CANTON_TB_SP;

    
    --Creacion procedimiento de inserciones FIDE_DIRECCION_DISTRITO_TB
    PROCEDURE INSERT_DIRECCION_DISTRITO_TB_SP(
                                                P_ID_DIRECCION_DISTRITO IN FIDE_DIRECCION_DISTRITO_TB.ID_DIRECCION_DISTRITO_PK%TYPE,
                                                P_ESTADO IN FIDE_DIRECCION_DISTRITO_TB.ID_ESTADO_FK%TYPE,
                                                P_NOMBRE_DISTRITO IN FIDE_DIRECCION_DISTRITO_TB.NOMBRE_DISTRITO%TYPE,
                                                P_CREATED_BY IN FIDE_DIRECCION_DISTRITO_TB.CREATED_BY%TYPE,
                                                P_MODIFIED_BY IN FIDE_DIRECCION_DISTRITO_TB.MODIFIED_BY%TYPE
        )
        IS
        BEGIN 
        INSERT INTO FIDE_DIRECCION_DISTRITO_TB(ID_DIRECCION_DISTRITO_PK, ID_ESTADO_FK, NOMBRE_DISTRITO,CREATED_BY, MODIFIED_BY)
        VALUES(P_ID_DIRECCION_DISTRITO, P_ESTADO, P_NOMBRE_DISTRITO, P_CREATED_BY,  P_MODIFIED_BY);
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
        EXCEPTION
                WHEN NO_DATA_FOUND THEN
                        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
                WHEN OTHERS THEN
                        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
        END INSERT_DIRECCION_DISTRITO_TB_SP;
        
    --Creacion procedimiento de update para la tabla FIDE_DIRECCION_DISTRITO_TB
    PROCEDURE UPDATE_DIRECCION_DISTRITO_TB_SP(
        P_ID_DIRECCION_DISTRITO IN FIDE_DIRECCION_DISTRITO_TB.ID_DIRECCION_DISTRITO_PK%TYPE,
        P_NOMBRE_DISTRITO IN FIDE_DIRECCION_DISTRITO_TB.NOMBRE_DISTRITO%TYPE,
        P_MODIFIED_BY IN FIDE_DIRECCION_DISTRITO_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_DIRECCION_DISTRITO_TB
        SET NOMBRE_DISTRITO = P_NOMBRE_DISTRITO,
            MODIFIED_BY = P_MODIFIED_BY
        WHERE ID_DIRECCION_DISTRITO_PK = P_ID_DIRECCION_DISTRITO;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro actualizado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al actualizar el registro: ' || SQLERRM);
    END UPDATE_DIRECCION_DISTRITO_TB_SP;
    
    --Procedimiento para hacer un soft delete de la tabla FIDE_DIRECCION_DISTRITO_TB
    PROCEDURE DESACTIVAR_DIRECCION_DISTRITO_TB_SP(
        P_ID_DIRECCION_DISTRITO IN FIDE_DIRECCION_DISTRITO_TB.ID_DIRECCION_DISTRITO_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_DIRECCION_DISTRITO_TB
        SET ID_ESTADO_FK = 0
        WHERE ID_DIRECCION_DISTRITO_PK = P_ID_DIRECCION_DISTRITO;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro desactivado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al desactivar el registro: ' || SQLERRM);
    END DESACTIVAR_DIRECCION_DISTRITO_TB_SP;
    
    --Creacion procedimiento de inserciones FIDE_DIRECCION_TB
    PROCEDURE INSERT_DIRECCION_TB_SP(
                                                P_ESTADO IN FIDE_DIRECCION_TB.ID_ESTADO_FK%TYPE,
                                                P_DIRECCION_PROVINCIA IN FIDE_DIRECCION_TB.ID_DIRECCION_PROVINCIA_FK%TYPE,
                                                P_DIRECCION_CANTON IN FIDE_DIRECCION_TB.ID_DIRECCION_CANTON_FK%TYPE,
                                                P_DIRECCION_DISTRITO IN FIDE_DIRECCION_TB.ID_DIRECCION_DISTRITO_FK%TYPE,
                                                P_DIRECCION_SENNAS IN FIDE_DIRECCION_TB.DIRECCION_SENNAS%TYPE,
                                                P_CREATED_BY IN FIDE_DIRECCION_TB.CREATED_BY%TYPE,
                                                P_MODIFIED_BY IN FIDE_DIRECCION_TB.MODIFIED_BY%TYPE
        )
        IS
        BEGIN 
        INSERT INTO FIDE_DIRECCION_TB(ID_ESTADO_FK, ID_DIRECCION_PROVINCIA_FK, ID_DIRECCION_CANTON_FK, ID_DIRECCION_DISTRITO_FK, DIRECCION_SENNAS,
                                        CREATED_BY, MODIFIED_BY)
        VALUES(P_ESTADO, P_DIRECCION_PROVINCIA, P_DIRECCION_CANTON, P_DIRECCION_DISTRITO, P_DIRECCION_SENNAS,
                P_CREATED_BY, P_MODIFIED_BY);
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
        EXCEPTION
                WHEN NO_DATA_FOUND THEN
                        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
                WHEN OTHERS THEN
                        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
        END INSERT_DIRECCION_TB_SP;
    
    --Creacion procedimiento de update para la tabla FIDE_DIRECCION_TB
    PROCEDURE UPDATE_DIRECCION_TB_SP(
        P_ID_DIRECCION IN FIDE_DIRECCION_TB.ID_DIRECCION_PK%TYPE,
        P_DIRECCION_SENNAS IN FIDE_DIRECCION_TB.DIRECCION_SENNAS%TYPE,
        P_MODIFIED_BY IN FIDE_DIRECCION_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_DIRECCION_TB
        SET DIRECCION_SENNAS = P_DIRECCION_SENNAS,
            MODIFIED_BY = P_MODIFIED_BY
        WHERE ID_DIRECCION_PK = P_ID_DIRECCION;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro actualizado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al actualizar el registro: ' || SQLERRM);
    END UPDATE_DIRECCION_TB_SP;
    
    --Procedimiento para hacer un soft delete de la tabla FIDE_DIRECCION_TB
    PROCEDURE DESACTIVAR_DIRECCION_TB_SP(
        P_ID_DIRECCION IN FIDE_DIRECCION_TB.ID_DIRECCION_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_DIRECCION_TB
        SET ID_ESTADO_FK = 0
        WHERE ID_DIRECCION_PK = P_ID_DIRECCION;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro desactivado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al desactivar el registro: ' || SQLERRM);
    END DESACTIVAR_DIRECCION_TB_SP;
    
    
    --Creacion procedimiento de inserciones FIDE_TELEFONO_CONTACTO_TB
    PROCEDURE INSERT_TELEFONO_CONTACTO_TB_SP(
                                                P_ESTADO IN FIDE_TELEFONO_CONTACTO_TB.ID_ESTADO_FK%TYPE,
                                                P_TELEFONO_CONTACTO IN FIDE_TELEFONO_CONTACTO_TB.TELEFONO_CONTACTO%TYPE,
                                                P_CREATED_BY IN FIDE_TELEFONO_CONTACTO_TB.CREATED_BY%TYPE,
                                                P_MODIFIED_BY IN FIDE_TELEFONO_CONTACTO_TB.MODIFIED_BY%TYPE
        )
        IS
        BEGIN 
        INSERT INTO FIDE_TELEFONO_CONTACTO_TB(ID_ESTADO_FK, TELEFONO_CONTACTO,CREATED_BY, MODIFIED_BY)
        VALUES(P_ESTADO, P_TELEFONO_CONTACTO, P_CREATED_BY, P_MODIFIED_BY);
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
        EXCEPTION
                WHEN NO_DATA_FOUND THEN
                        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
                WHEN OTHERS THEN
                        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
        END INSERT_TELEFONO_CONTACTO_TB_SP;
    
    --Creacion procedimiento de update para la tabla FIDE_TELEFONO_CONTACTO_TB
    PROCEDURE UPDATE_TELEFONO_CONTACTO_TB_SP(
        P_ID_TELEFONO_CONTACTO IN FIDE_TELEFONO_CONTACTO_TB.ID_TELEFONO_CONTACTO_PK%TYPE,
        P_TELEFONO_CONTACTO IN FIDE_TELEFONO_CONTACTO_TB.TELEFONO_CONTACTO%TYPE,
        P_MODIFIED_BY IN FIDE_TELEFONO_CONTACTO_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_TELEFONO_CONTACTO_TB
        SET TELEFONO_CONTACTO = P_TELEFONO_CONTACTO,
            MODIFIED_BY = P_MODIFIED_BY
        WHERE ID_TELEFONO_CONTACTO_PK = P_ID_TELEFONO_CONTACTO;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro actualizado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al actualizar el registro: ' || SQLERRM);
    END UPDATE_TELEFONO_CONTACTO_TB_SP;
    
    --Procedimiento para hacer un soft delete de la tabla FIDE_TELEFONO_CONTACTO_TB
    PROCEDURE DESACTIVAR_TELEFONO_CONTACTO_TB_SP(
        P_ID_TELEFONO_CONTACTO IN FIDE_TELEFONO_CONTACTO_TB.ID_TELEFONO_CONTACTO_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_TELEFONO_CONTACTO_TB
        SET ID_ESTADO_FK = 0
        WHERE ID_TELEFONO_CONTACTO_PK = P_ID_TELEFONO_CONTACTO;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro desactivado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al desactivar el registro: ' || SQLERRM);
    END DESACTIVAR_TELEFONO_CONTACTO_TB_SP;
    
    --Creacion procedimiento de inserciones FIDE_TIPO_USUARIO_TB
    PROCEDURE INSERT_TIPO_USUARIO_TB_SP(
                                                P_ESTADO IN FIDE_TIPO_USUARIO_TB.ID_ESTADO_FK%TYPE,
                                                P_DESCRIPCION_TIPO_USUARIO IN FIDE_TIPO_USUARIO_TB.DESCRIPCION_TIPO_USUARIO%TYPE,
                                                P_CREATED_BY IN FIDE_TIPO_USUARIO_TB.CREATED_BY%TYPE,
                                                P_MODIFIED_BY IN FIDE_TIPO_USUARIO_TB.MODIFIED_BY%TYPE
        )
        IS
        BEGIN 
        INSERT INTO FIDE_TIPO_USUARIO_TB(ID_ESTADO_FK, DESCRIPCION_TIPO_USUARIO,CREATED_BY, MODIFIED_BY)
        VALUES(P_ESTADO, P_DESCRIPCION_TIPO_USUARIO, P_CREATED_BY, P_MODIFIED_BY);
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
        EXCEPTION
                WHEN NO_DATA_FOUND THEN
                        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
                WHEN OTHERS THEN
                        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
        END INSERT_TIPO_USUARIO_TB_SP;
    
    --Creacion procedimiento de update para la tabla FIDE_TIPO_USUARIO_TB
    PROCEDURE UPDATE_TIPO_USUARIO_TB_SP(
        P_ID_TIPO_USUARIO IN FIDE_TIPO_USUARIO_TB.ID_TIPO_USUARIO_PK%TYPE,
        P_DESCRIPCION_TIPO_USUARIO IN FIDE_TIPO_USUARIO_TB.DESCRIPCION_TIPO_USUARIO%TYPE,
        P_MODIFIED_BY IN FIDE_TIPO_USUARIO_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_TIPO_USUARIO_TB
        SET DESCRIPCION_TIPO_USUARIO = P_DESCRIPCION_TIPO_USUARIO,
            MODIFIED_BY = P_MODIFIED_BY
        WHERE ID_TIPO_USUARIO_PK = P_ID_TIPO_USUARIO;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro actualizado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al actualizar el registro: ' || SQLERRM);
    END UPDATE_TIPO_USUARIO_TB_SP;
    
    --Procedimiento para hacer un soft delete de la tabla FIDE_TIPO_USUARIO_TB
    PROCEDURE DESACTIVAR_TIPO_USUARIO_TB_SP(
        P_ID_TIPO_USUARIO IN FIDE_TIPO_USUARIO_TB.ID_TIPO_USUARIO_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_TIPO_USUARIO_TB
        SET ID_ESTADO_FK = 0  -- Asumiendo que 0 representa "inactivo"
        WHERE ID_TIPO_USUARIO_PK = P_ID_TIPO_USUARIO;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro desactivado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al desactivar el registro: ' || SQLERRM);
    END DESACTIVAR_TIPO_USUARIO_TB_SP;
    
    --Creacion procedimiento de inserciones FIDE_ESPECIALIDAD_TB
    PROCEDURE INSERT_ESPECIALIDAD_TB_SP(
                                                P_ESTADO IN FIDE_ESPECIALIDAD_TB.ID_ESTADO_FK%TYPE,
                                                P_NOMBRE_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.NOMBRE_ESPECIALIDAD%TYPE,
                                                P_DESCRIPCION_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.DESCRIPCION_ESPECIALIDAD%TYPE,
                                                P_CREATED_BY IN FIDE_ESPECIALIDAD_TB.CREATED_BY%TYPE,
                                                P_MODIFIED_BY IN FIDE_ESPECIALIDAD_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN 
    INSERT INTO FIDE_ESPECIALIDAD_TB(ID_ESTADO_FK, NOMBRE_ESPECIALIDAD, DESCRIPCION_ESPECIALIDAD,CREATED_BY, MODIFIED_BY)
    VALUES(P_ESTADO, P_NOMBRE_ESPECIALIDAD, P_DESCRIPCION_ESPECIALIDAD, P_CREATED_BY, P_MODIFIED_BY);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
            WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
            WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END INSERT_ESPECIALIDAD_TB_SP;
    
    --Creacion procedimiento de update para la tabla FIDE_ESPECIALIDAD_TB
    PROCEDURE UPDATE_ESPECIALIDAD_TB_SP(
        P_ID_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.ID_ESPECIALIDAD_PK%TYPE,
        P_NOMBRE_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.NOMBRE_ESPECIALIDAD%TYPE,
        P_DESCRIPCION_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.DESCRIPCION_ESPECIALIDAD%TYPE,
        P_MODIFIED_BY IN FIDE_ESPECIALIDAD_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_ESPECIALIDAD_TB
        SET NOMBRE_ESPECIALIDAD = P_NOMBRE_ESPECIALIDAD,
            DESCRIPCION_ESPECIALIDAD = P_DESCRIPCION_ESPECIALIDAD,
            MODIFIED_BY = P_MODIFIED_BY
        WHERE ID_ESPECIALIDAD_PK = P_ID_ESPECIALIDAD;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro actualizado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al actualizar el registro: ' || SQLERRM);
    END UPDATE_ESPECIALIDAD_TB_SP;
    
    --Procedimiento para hacer un soft delete de la tabla FIDE_ESPECIALIDAD_TB
    PROCEDURE DESACTIVAR_ESPECIALIDAD_TB_SP(
        P_ID_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.ID_ESPECIALIDAD_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_ESPECIALIDAD_TB
        SET ID_ESTADO_FK = 0
        WHERE ID_ESPECIALIDAD_PK = P_ID_ESPECIALIDAD;  
        DBMS_OUTPUT.PUT_LINE('Registro desactivado con exito');
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al desactivar el registro: ' || SQLERRM);
    END DESACTIVAR_ESPECIALIDAD_TB_SP;
    
    --Procedimiento de inserciones FIDE_USUARIOS_TB
    PROCEDURE INSERT_USUARIOS_TB_SP(
                                                P_ESTADO IN FIDE_USUARIOS_TB.ID_ESTADO_FK%TYPE,
                                                P_ESPECIALIDAD IN FIDE_USUARIOS_TB.ID_ESPECIALIDAD_FK%TYPE,
                                                P_ID_TIPO_USUARIO IN FIDE_USUARIOS_TB.ID_TIPO_USUARIO_FK%TYPE,
                                                P_ID_DIRECCION_FK IN FIDE_USUARIOS_TB.ID_DIRECCION_FK%TYPE,
                                                P_ID_TELEFONO_CONTACTO_FK IN FIDE_USUARIOS_TB.ID_TELEFONO_CONTACTO_FK%TYPE,
                                                P_USUARIO_NOMBRE IN FIDE_USUARIOS_TB.USUARIO_NOMBRE%TYPE,
                                                P_USUARIO_CORREO IN FIDE_USUARIOS_TB.USUARIO_CORREO%TYPE,
                                                P_USUARIO_CONTRASENNA IN FIDE_USUARIOS_TB.USUARIO_CONTRASENNA%TYPE,
                                                P_USUARIO_IDENTIFICACION IN FIDE_USUARIOS_TB.USUARIO_IDENTIFICACION%TYPE,
                                                P_USUARIO_FECHA_REGISTRO IN FIDE_USUARIOS_TB.USUARIO_FECHA_REGISTRO%TYPE,
                                                P_USUARIO_CUENTA_BANCARIA IN FIDE_USUARIOS_TB.USUARIO_CUENTA_BANCARIA%TYPE,                                            
                                                P_CREATED_BY IN FIDE_USUARIOS_TB.CREATED_BY%TYPE,
                                                P_MODIFIED_BY IN FIDE_USUARIOS_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN 
    INSERT INTO FIDE_USUARIOS_TB(ID_ESTADO_FK, ID_ESPECIALIDAD_FK, ID_TIPO_USUARIO_FK,ID_DIRECCION_FK, ID_TELEFONO_CONTACTO_FK, USUARIO_NOMBRE, USUARIO_CORREO, USUARIO_CONTRASENNA, USUARIO_IDENTIFICACION, USUARIO_FECHA_REGISTRO,
                                    USUARIO_CUENTA_BANCARIA, CREATED_BY, MODIFIED_BY)
    VALUES(P_ESTADO, P_ESPECIALIDAD, P_ID_TIPO_USUARIO,P_ID_DIRECCION_FK,P_ID_TELEFONO_CONTACTO_FK, P_USUARIO_NOMBRE, P_USUARIO_CORREO, P_USUARIO_CONTRASENNA, P_USUARIO_IDENTIFICACION, P_USUARIO_FECHA_REGISTRO, 
    P_USUARIO_CUENTA_BANCARIA, P_CREATED_BY, P_MODIFIED_BY);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
            WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
            WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END INSERT_USUARIOS_TB_SP;
    
    --Creacion procedimiento de update para la tabla FIDE_USUARIOS_TB
    PROCEDURE UPDATE_USUARIOS_TB_SP(
        P_ID_USUARIO IN FIDE_USUARIOS_TB.ID_USUARIO_PK%TYPE,
        P_ID_ESPECIALIDAD_FK IN FIDE_USUARIOS_TB.ID_ESPECIALIDAD_FK%TYPE,
        P_ID_TIPO_USUARIO_FK IN FIDE_USUARIOS_TB.ID_TIPO_USUARIO_FK%TYPE,
        P_ID_DIRECCION_FK IN FIDE_USUARIOS_TB.ID_DIRECCION_FK%TYPE,
        P_ID_TELEFONO_CONTACTO_FK IN FIDE_USUARIOS_TB.ID_TELEFONO_CONTACTO_FK%TYPE,
        P_USUARIO_NOMBRE IN FIDE_USUARIOS_TB.USUARIO_NOMBRE%TYPE,
        P_USUARIO_CORREO IN FIDE_USUARIOS_TB.USUARIO_CORREO%TYPE,
        P_USUARIO_CONTRASENNA IN FIDE_USUARIOS_TB.USUARIO_CONTRASENNA%TYPE,
        P_USUARIO_IDENTIFICACION IN FIDE_USUARIOS_TB.USUARIO_IDENTIFICACION%TYPE,
        P_USUARIO_FECHA_REGISTRO IN FIDE_USUARIOS_TB.USUARIO_FECHA_REGISTRO%TYPE,
        P_USUARIO_CUENTA_BANCARIA IN FIDE_USUARIOS_TB.USUARIO_CUENTA_BANCARIA%TYPE,
        P_MODIFIED_BY IN FIDE_USUARIOS_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_USUARIOS_TB
        SET 
            ID_ESPECIALIDAD_FK = P_ID_ESPECIALIDAD_FK,
            ID_TIPO_USUARIO_FK = P_ID_TIPO_USUARIO_FK,
            ID_DIRECCION_FK = P_ID_DIRECCION_FK,
            ID_TELEFONO_CONTACTO_FK = P_ID_TELEFONO_CONTACTO_FK,
            USUARIO_NOMBRE = P_USUARIO_NOMBRE,
            USUARIO_CORREO = P_USUARIO_CORREO,
            USUARIO_CONTRASENNA = P_USUARIO_CONTRASENNA,
            USUARIO_IDENTIFICACION = P_USUARIO_IDENTIFICACION,
            USUARIO_FECHA_REGISTRO = P_USUARIO_FECHA_REGISTRO,
            USUARIO_CUENTA_BANCARIA = P_USUARIO_CUENTA_BANCARIA,
            MODIFIED_BY = P_MODIFIED_BY
        WHERE ID_USUARIO_PK = P_ID_USUARIO;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro actualizado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al actualizar el registro: ' || SQLERRM);
    END UPDATE_USUARIOS_TB_SP;
    
    --Procedimiento para hacer un soft delete de la tabla FIDE_USUARIOS_TB
    PROCEDURE DESACTIVAR_USUARIOS_TB_SP(
        P_ID_USUARIO IN FIDE_USUARIOS_TB.ID_USUARIO_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_USUARIOS_TB
        SET ID_ESTADO_FK = 0
        WHERE ID_USUARIO_PK = P_ID_USUARIO;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro desactivado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al desactivar el registro: ' || SQLERRM);
    END DESACTIVAR_USUARIOS_TB_SP;
    
    --Procedimiento para insertar datos en la tabla de especies
    PROCEDURE INSERT_MASCOTA_ESPECIE_TB_SP(
        P_ID_ESTADO_FK         IN FIDE_MASCOTA_ESPECIE_TB.ID_ESTADO_FK%TYPE,
        P_NOMBRE_ESPECIE       IN FIDE_MASCOTA_ESPECIE_TB.NOMBRE_ESPECIE%TYPE,
        P_CREATED_BY           IN FIDE_MASCOTA_ESPECIE_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY          IN FIDE_MASCOTA_ESPECIE_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        INSERT INTO FIDE_MASCOTA_ESPECIE_TB (
            ID_ESTADO_FK,
            NOMBRE_ESPECIE,
            CREATED_BY,
            MODIFIED_BY
        )
        VALUES (
            P_ID_ESTADO_FK,
            P_NOMBRE_ESPECIE,
            P_CREATED_BY,
            P_MODIFIED_BY
        );
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END INSERT_MASCOTA_ESPECIE_TB_SP;
    
    --Procedimiento para hacer update de la tabla especies
    PROCEDURE UPDATE_MASCOTA_ESPECIE_TB_SP(
        P_ID_MASCOTA_ESPECIE   IN FIDE_MASCOTA_ESPECIE_TB.ID_MASCOTA_ESPECIE_PK%TYPE,
        P_ID_ESTADO_FK         IN FIDE_MASCOTA_ESPECIE_TB.ID_ESTADO_FK%TYPE,
        P_NOMBRE_ESPECIE       IN FIDE_MASCOTA_ESPECIE_TB.NOMBRE_ESPECIE%TYPE,
        P_MODIFIED_BY          IN FIDE_MASCOTA_ESPECIE_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_MASCOTA_ESPECIE_TB
           SET ID_ESTADO_FK       = P_ID_ESTADO_FK,
               NOMBRE_ESPECIE     = P_NOMBRE_ESPECIE,
               MODIFIED_BY        = P_MODIFIED_BY
         WHERE ID_MASCOTA_ESPECIE_PK = P_ID_MASCOTA_ESPECIE;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END UPDATE_MASCOTA_ESPECIE_TB_SP;
    
    --Procedimiento para hacer un soft delete de la tabla especies
    PROCEDURE DESACTIVAR_MASCOTA_ESPECIE_TB_SP (
        P_ID_MASCOTA_ESPECIE  IN FIDE_MASCOTA_ESPECIE_TB.ID_MASCOTA_ESPECIE_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_MASCOTA_ESPECIE_TB
           SET ID_ESTADO_FK = 0
         WHERE ID_MASCOTA_ESPECIE_PK = P_ID_MASCOTA_ESPECIE;
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END DESACTIVAR_MASCOTA_ESPECIE_TB_SP;
    
    --Procedimiento para insertar de razas
    PROCEDURE INSERT_MASCOTA_RAZA_TB_SP(
        P_ID_ESTADO_FK        IN FIDE_MASCOTA_RAZA_TB.ID_ESTADO_FK%TYPE,
        P_NOMBRE_RAZA         IN FIDE_MASCOTA_RAZA_TB.NOMBRE_RAZA%TYPE,
        P_CREATED_BY          IN FIDE_MASCOTA_RAZA_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY         IN FIDE_MASCOTA_RAZA_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        INSERT INTO FIDE_MASCOTA_RAZA_TB (
            ID_ESTADO_FK,
            NOMBRE_RAZA,
            CREATED_BY,
            MODIFIED_BY
        )
        VALUES (
            P_ID_ESTADO_FK,
            P_NOMBRE_RAZA,
            P_CREATED_BY,
            P_MODIFIED_BY
        );
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END INSERT_MASCOTA_RAZA_TB_SP;
    
    --Procedimiento para modificar razas
    PROCEDURE UPDATE_MASCOTA_RAZA_TB_SP(
        P_ID_MASCOTA_RAZA   IN FIDE_MASCOTA_RAZA_TB.ID_MASCOTA_RAZA_PK%TYPE,
        P_ID_ESTADO_FK      IN FIDE_MASCOTA_RAZA_TB.ID_ESTADO_FK%TYPE,
        P_NOMBRE_RAZA       IN FIDE_MASCOTA_RAZA_TB.NOMBRE_RAZA%TYPE,
        P_MODIFIED_BY       IN FIDE_MASCOTA_RAZA_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_MASCOTA_RAZA_TB
           SET ID_ESTADO_FK       = P_ID_ESTADO_FK,
               NOMBRE_RAZA        = P_NOMBRE_RAZA,
               MODIFIED_BY        = P_MODIFIED_BY
         WHERE ID_MASCOTA_RAZA_PK = P_ID_MASCOTA_RAZA;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END UPDATE_MASCOTA_RAZA_TB_SP;
    
    --Procedimiento para hacer soft delete de razas
    PROCEDURE DESACTIVAR_MASCOTA_RAZA_TB_SP (
        P_ID_MASCOTA_RAZA  IN FIDE_MASCOTA_RAZA_TB.ID_MASCOTA_RAZA_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_MASCOTA_RAZA_TB
           SET ID_ESTADO_FK = 0
         WHERE ID_MASCOTA_RAZA_PK = P_ID_MASCOTA_RAZA;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END DESACTIVAR_MASCOTA_RAZA_TB_SP;
    
        
    --Procedimiento para insertar mascotas
    PROCEDURE INSERT_MASCOTA_TB_SP (
        P_ID_ESTADO_FK           IN FIDE_MASCOTA_TB.ID_ESTADO_FK%TYPE,
        P_ID_MASCOTA_ESPECIE_FK  IN FIDE_MASCOTA_TB.ID_MASCOTA_ESPECIE_FK%TYPE,
        P_ID_MASCOTA_RAZA_FK     IN FIDE_MASCOTA_TB.ID_MASCOTA_RAZA_FK%TYPE,
        P_ID_USUARIO_FK          IN FIDE_MASCOTA_TB.ID_USUARIO_FK%TYPE,
        P_NOMBRE_MASCOTA         IN FIDE_MASCOTA_TB.NOMBRE_MASCOTA%TYPE,
        P_FECHA_NACIMIENTO       IN FIDE_MASCOTA_TB.FECHA_NACIMIENTO%TYPE,
        P_GENERO                 IN FIDE_MASCOTA_TB.GENERO%TYPE,
        P_CREATED_BY             IN FIDE_MASCOTA_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY            IN FIDE_MASCOTA_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        INSERT INTO FIDE_MASCOTA_TB (
             ID_ESTADO_FK,
             ID_MASCOTA_ESPECIE_FK,
             ID_MASCOTA_RAZA_FK,
             ID_USUARIO_FK,
             NOMBRE_MASCOTA,
             FECHA_NACIMIENTO,
             GENERO,
             CREATED_BY,
             MODIFIED_BY
        )
        VALUES (
             P_ID_ESTADO_FK,
             P_ID_MASCOTA_ESPECIE_FK,
             P_ID_MASCOTA_RAZA_FK,
             P_ID_USUARIO_FK,
             P_NOMBRE_MASCOTA,
             P_FECHA_NACIMIENTO,
             P_GENERO,
             P_CREATED_BY,
             P_MODIFIED_BY
        );
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMIQUESE CON TI: ' || SQLERRM);
    END INSERT_MASCOTA_TB_SP;
    
    --Procedimiento para modificar mascotas
    PROCEDURE UPDATE_MASCOTA_TB_SP(
        P_ID_MASCOTA             IN FIDE_MASCOTA_TB.ID_MASCOTA_PK%TYPE,
        P_ID_ESTADO_FK           IN FIDE_MASCOTA_TB.ID_ESTADO_FK%TYPE,
        P_ID_MASCOTA_ESPECIE_FK  IN FIDE_MASCOTA_TB.ID_MASCOTA_ESPECIE_FK%TYPE,
        P_ID_MASCOTA_RAZA_FK     IN FIDE_MASCOTA_TB.ID_MASCOTA_RAZA_FK%TYPE,
        P_ID_USUARIO_FK          IN FIDE_MASCOTA_TB.ID_USUARIO_FK%TYPE,
        P_NOMBRE_MASCOTA         IN FIDE_MASCOTA_TB.NOMBRE_MASCOTA%TYPE,
        P_FECHA_NACIMIENTO       IN FIDE_MASCOTA_TB.FECHA_NACIMIENTO%TYPE,
        P_GENERO                 IN FIDE_MASCOTA_TB.GENERO%TYPE,
        P_MODIFIED_BY            IN FIDE_MASCOTA_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_MASCOTA_TB
           SET ID_ESTADO_FK          = P_ID_ESTADO_FK,
               ID_MASCOTA_ESPECIE_FK = P_ID_MASCOTA_ESPECIE_FK,
               ID_MASCOTA_RAZA_FK    = P_ID_MASCOTA_RAZA_FK,
               ID_USUARIO_FK         = P_ID_USUARIO_FK,
               NOMBRE_MASCOTA        = P_NOMBRE_MASCOTA,
               FECHA_NACIMIENTO      = P_FECHA_NACIMIENTO,
               GENERO                = P_GENERO,
               MODIFIED_BY           = P_MODIFIED_BY
         WHERE ID_MASCOTA_PK         = P_ID_MASCOTA;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END UPDATE_MASCOTA_TB_SP;
    
    --Procedimiento para hacer soft delete de mascotas
    PROCEDURE DESACTIVAR_MASCOTA_TB_SP (
        P_ID_MASCOTA IN FIDE_MASCOTA_TB.ID_MASCOTA_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_MASCOTA_TB
           SET ID_ESTADO_FK = 0
         WHERE ID_MASCOTA_PK = P_ID_MASCOTA;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END DESACTIVAR_MASCOTA_TB_SP;
    
    --Procedimiento para insertar tipos de examen
    PROCEDURE INSERT_TIPO_EXAMEN_TB_SP(
        P_ID_ESTADO_FK         IN FIDE_TIPO_EXAMEN_TB.ID_ESTADO_FK%TYPE,
        P_DESCRIPCION_EXAMEN   IN FIDE_TIPO_EXAMEN_TB.DESCRIPCION_EXAMEN%TYPE,
        P_CREATED_BY           IN FIDE_TIPO_EXAMEN_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY          IN FIDE_TIPO_EXAMEN_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        INSERT INTO FIDE_TIPO_EXAMEN_TB (
            ID_ESTADO_FK,
            DESCRIPCION_EXAMEN,
            CREATED_BY,
            MODIFIED_BY
        )
        VALUES (
            P_ID_ESTADO_FK,
            P_DESCRIPCION_EXAMEN,
            P_CREATED_BY,
            P_MODIFIED_BY
        );
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END INSERT_TIPO_EXAMEN_TB_SP;
    
    --Procedimiento para modificar tipos de examen
    PROCEDURE UPDATE_TIPO_EXAMEN_TB_SP(
        P_ID_TIPO_EXAMEN       IN FIDE_TIPO_EXAMEN_TB.ID_TIPO_EXAMEN_PK%TYPE,
        P_ID_ESTADO_FK         IN FIDE_TIPO_EXAMEN_TB.ID_ESTADO_FK%TYPE,
        P_DESCRIPCION_EXAMEN   IN FIDE_TIPO_EXAMEN_TB.DESCRIPCION_EXAMEN%TYPE,
        P_MODIFIED_BY          IN FIDE_TIPO_EXAMEN_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_TIPO_EXAMEN_TB
           SET ID_ESTADO_FK       = P_ID_ESTADO_FK,
               DESCRIPCION_EXAMEN = P_DESCRIPCION_EXAMEN,
               MODIFIED_BY        = P_MODIFIED_BY
         WHERE ID_TIPO_EXAMEN_PK   = P_ID_TIPO_EXAMEN;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END UPDATE_TIPO_EXAMEN_TB_SP;
    
    --Procedimiento para hacer soft delete de examenes
    PROCEDURE DESACTIVAR_TIPO_EXAMEN_TB_SP (
        P_ID_TIPO_EXAMEN IN FIDE_TIPO_EXAMEN_TB.ID_TIPO_EXAMEN_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_TIPO_EXAMEN_TB
           SET ID_ESTADO_FK = 0
         WHERE ID_TIPO_EXAMEN_PK = P_ID_TIPO_EXAMEN;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END DESACTIVAR_TIPO_EXAMEN_TB_SP;
    
    --Procedimiento para insertar resultados de examenes
    PROCEDURE INSERT_EXAMENES_TB_SP(
        P_ID_MASCOTA_FK             IN FIDE_EXAMENES_TB.ID_MASCOTA_FK%TYPE,
        P_ID_ESTADO_FK              IN FIDE_EXAMENES_TB.ID_ESTADO_FK%TYPE,
        P_ID_TIPO_EXAMEN_FK         IN FIDE_EXAMENES_TB.ID_TIPO_EXAMEN_FK%TYPE,
        P_EXAMEN_RESULTADO          IN FIDE_EXAMENES_TB.EXAMEN_RESULTADO%TYPE,
        P_EXAMEN_FECHA_SEGUIMIENTO  IN FIDE_EXAMENES_TB.EXAMEN_FECHA_SEGUIMIENTO%TYPE,
        P_CREATED_BY                IN FIDE_EXAMENES_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY               IN FIDE_EXAMENES_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        INSERT INTO FIDE_EXAMENES_TB (
             ID_MASCOTA_FK,
             ID_ESTADO_FK,
             ID_TIPO_EXAMEN_FK,
             EXAMEN_RESULTADO,
             EXAMEN_FECHA_SEGUIMIENTO,
             CREATED_BY,
             MODIFIED_BY
        )
        VALUES (
             P_ID_MASCOTA_FK,
             P_ID_ESTADO_FK,
             P_ID_TIPO_EXAMEN_FK,
             P_EXAMEN_RESULTADO,
             P_EXAMEN_FECHA_SEGUIMIENTO,
             P_CREATED_BY,
             P_MODIFIED_BY
        );
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END INSERT_EXAMENES_TB_SP;
    
    --Procedimiento para modificar resultados de examenes
    PROCEDURE UPDATE_EXAMENES_TB_SP(
        P_ID_EXAMEN              IN FIDE_EXAMENES_TB.ID_EXAMEN_PK%TYPE,
        P_ID_MASCOTA_FK          IN FIDE_EXAMENES_TB.ID_MASCOTA_FK%TYPE,
        P_ID_ESTADO_FK           IN FIDE_EXAMENES_TB.ID_ESTADO_FK%TYPE,
        P_ID_TIPO_EXAMEN_FK      IN FIDE_EXAMENES_TB.ID_TIPO_EXAMEN_FK%TYPE,
        P_EXAMEN_RESULTADO       IN FIDE_EXAMENES_TB.EXAMEN_RESULTADO%TYPE,
        P_EXAMEN_FECHA_SEGUIMIENTO IN FIDE_EXAMENES_TB.EXAMEN_FECHA_SEGUIMIENTO%TYPE,
        P_MODIFIED_BY            IN FIDE_EXAMENES_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_EXAMENES_TB
           SET ID_MASCOTA_FK          = P_ID_MASCOTA_FK,
               ID_ESTADO_FK           = P_ID_ESTADO_FK,
               ID_TIPO_EXAMEN_FK      = P_ID_TIPO_EXAMEN_FK,
               EXAMEN_RESULTADO       = P_EXAMEN_RESULTADO,
               EXAMEN_FECHA_SEGUIMIENTO = P_EXAMEN_FECHA_SEGUIMIENTO,
               MODIFIED_BY            = P_MODIFIED_BY
         WHERE ID_EXAMEN_PK           = P_ID_EXAMEN;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END UPDATE_EXAMENES_TB_SP;
    
    --Procedmiento para hacer soft delete de resultados de examenes
    PROCEDURE DESACTIVAR_EXAMENES_TB_SP (
        P_ID_EXAMEN IN FIDE_EXAMENES_TB.ID_EXAMEN_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_EXAMENES_TB
           SET ID_ESTADO_FK = 0
         WHERE ID_EXAMEN_PK = P_ID_EXAMEN;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END DESACTIVAR_EXAMENES_TB_SP;
    

    
    --Procedimiento para insertar motivos de consulta
    PROCEDURE INSERT_CONSULTA_MOTIVO_TB_SP(
        P_ID_ESTADO_FK            IN FIDE_CONSULTA_MOTIVO_TB.ID_ESTADO_FK%TYPE,
        P_DESCRIPCION_MOTIVO      IN FIDE_CONSULTA_MOTIVO_TB.DESCRIPCION_MOTIVO%TYPE,
        P_CREATED_BY              IN FIDE_CONSULTA_MOTIVO_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY             IN FIDE_CONSULTA_MOTIVO_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        INSERT INTO FIDE_CONSULTA_MOTIVO_TB (
             ID_ESTADO_FK,
             DESCRIPCION_MOTIVO,
             CREATED_BY,
             MODIFIED_BY
        )
        VALUES (
             P_ID_ESTADO_FK,
             P_DESCRIPCION_MOTIVO,
             P_CREATED_BY,
             P_MODIFIED_BY
        );
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END INSERT_CONSULTA_MOTIVO_TB_SP;
    
    --Procedimiento para modificar motivos de consulta
    PROCEDURE UPDATE_CONSULTA_MOTIVO_TB_SP(
        P_ID_CONSULTA_MOTIVO    IN FIDE_CONSULTA_MOTIVO_TB.ID_CONSULTA_MOTIVO_PK%TYPE,
        P_ID_ESTADO_FK          IN FIDE_CONSULTA_MOTIVO_TB.ID_ESTADO_FK%TYPE,
        P_DESCRIPCION_MOTIVO    IN FIDE_CONSULTA_MOTIVO_TB.DESCRIPCION_MOTIVO%TYPE,
        P_MODIFIED_BY           IN FIDE_CONSULTA_MOTIVO_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_CONSULTA_MOTIVO_TB
           SET ID_ESTADO_FK        = P_ID_ESTADO_FK,
               DESCRIPCION_MOTIVO  = P_DESCRIPCION_MOTIVO,
               MODIFIED_BY         = P_MODIFIED_BY
         WHERE ID_CONSULTA_MOTIVO_PK = P_ID_CONSULTA_MOTIVO;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END UPDATE_CONSULTA_MOTIVO_TB_SP;
    
    --Procedimiento para hacer soft delete de motivos de consulta
    PROCEDURE DESACTIVAR_CONSULTA_MOTIVO_TB_SP (
        P_ID_CONSULTA_MOTIVO IN FIDE_CONSULTA_MOTIVO_TB.ID_CONSULTA_MOTIVO_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_CONSULTA_MOTIVO_TB
           SET ID_ESTADO_FK = 0
         WHERE ID_CONSULTA_MOTIVO_PK = P_ID_CONSULTA_MOTIVO;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END DESACTIVAR_CONSULTA_MOTIVO_TB_SP;
    
    
    
    
    --Procedimiento para insertar consultas
    PROCEDURE INSERT_CONSULTAS_TB_SP(
        P_CONSULTA_FECHA          IN FIDE_CONSULTAS_TB.CONSULTA_FECHA%TYPE,
        P_ID_CONSULTA_MOTIVO_FK   IN FIDE_CONSULTAS_TB.ID_CONSULTA_MOTIVO_FK%TYPE,
        P_ID_ESTADO_FK            IN FIDE_CONSULTAS_TB.ID_ESTADO_FK%TYPE,
        P_ID_MASCOTA_FK           IN FIDE_CONSULTAS_TB.ID_MASCOTA_FK%TYPE,
        P_ID_USUARIO_FK           IN FIDE_CONSULTAS_TB.ID_USUARIO_FK%TYPE,
        P_CONSULTA_OBSERVACIONES  IN FIDE_CONSULTAS_TB.CONSULTA_OBSERVACIONES%TYPE,
        P_CREATED_BY              IN FIDE_CONSULTAS_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY             IN FIDE_CONSULTAS_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        INSERT INTO FIDE_CONSULTAS_TB (
            CONSULTA_FECHA,
            ID_CONSULTA_MOTIVO_FK,
            ID_ESTADO_FK,
            ID_MASCOTA_FK,
            ID_USUARIO_FK,
            CONSULTA_OBSERVACIONES,
            CREATED_BY,
            MODIFIED_BY
        )
        VALUES (
            P_CONSULTA_FECHA,
            P_ID_CONSULTA_MOTIVO_FK,
            P_ID_ESTADO_FK,
            P_ID_MASCOTA_FK,
            P_ID_USUARIO_FK,
            P_CONSULTA_OBSERVACIONES,
            P_CREATED_BY,
            P_MODIFIED_BY
        );
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END INSERT_CONSULTAS_TB_SP;
    
    --Procedimiento para modificar consultas
    PROCEDURE UPDATE_CONSULTAS_TB_SP(
        P_ID_CONSULTA             IN FIDE_CONSULTAS_TB.ID_CONSULTA_PK%TYPE,
        P_CONSULTA_FECHA          IN FIDE_CONSULTAS_TB.CONSULTA_FECHA%TYPE,
        P_ID_CONSULTA_MOTIVO_FK   IN FIDE_CONSULTAS_TB.ID_CONSULTA_MOTIVO_FK%TYPE,
        P_ID_ESTADO_FK            IN FIDE_CONSULTAS_TB.ID_ESTADO_FK%TYPE,
        P_ID_MASCOTA_FK           IN FIDE_CONSULTAS_TB.ID_MASCOTA_FK%TYPE,
        P_ID_USUARIO_FK           IN FIDE_CONSULTAS_TB.ID_USUARIO_FK%TYPE,
        P_CONSULTA_OBSERVACIONES  IN FIDE_CONSULTAS_TB.CONSULTA_OBSERVACIONES%TYPE,
        P_MODIFIED_BY             IN FIDE_CONSULTAS_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_CONSULTAS_TB
           SET CONSULTA_FECHA         = P_CONSULTA_FECHA,
               ID_CONSULTA_MOTIVO_FK  = P_ID_CONSULTA_MOTIVO_FK,
               ID_ESTADO_FK           = P_ID_ESTADO_FK,
               ID_MASCOTA_FK          = P_ID_MASCOTA_FK,
               ID_USUARIO_FK          = P_ID_USUARIO_FK,
               CONSULTA_OBSERVACIONES = P_CONSULTA_OBSERVACIONES,
               MODIFIED_BY            = P_MODIFIED_BY
         WHERE ID_CONSULTA_PK         = P_ID_CONSULTA;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END UPDATE_CONSULTAS_TB_SP;
    
    --Procedimiento para hacer soft delete de consultas
    PROCEDURE DESACTIVAR_CONSULTAS_TB_SP (
        P_ID_CONSULTA IN FIDE_CONSULTAS_TB.ID_CONSULTA_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_CONSULTAS_TB
           SET ID_ESTADO_FK = 0
         WHERE ID_CONSULTA_PK = P_ID_CONSULTA;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END DESACTIVAR_CONSULTAS_TB_SP;
    
    --Procedimiento para insertar factura
    PROCEDURE INSERT_FACTURACIONES_TB_SP(
        P_ID_CONSULTA_FK          IN FIDE_FACTURACIONES_TB.ID_CONSULTA_FK%TYPE,
        P_ID_ESTADO_FK            IN FIDE_FACTURACIONES_TB.ID_ESTADO_FK%TYPE,
        P_FACTURA_FECHA_EMISION   IN FIDE_FACTURACIONES_TB.FACTURA_FECHA_EMISION%TYPE,
        P_FACTURA_MONTO_TOTAL     IN FIDE_FACTURACIONES_TB.FACTURA_MONTO_TOTAL%TYPE,
        P_FACTURA_DESCUENTO       IN FIDE_FACTURACIONES_TB.FACTURA_DESCUENTO%TYPE,
        P_FACTURA_IMPUESTOS       IN FIDE_FACTURACIONES_TB.FACTURA_IMPUESTOS%TYPE,
        P_FACTURA_MONTO_FINAL     IN FIDE_FACTURACIONES_TB.FACTURA_MONTO_FINAL%TYPE,
        P_FACTURA_SUBTOTAL        IN FIDE_FACTURACIONES_TB.FACTURA_SUBTOTAL%TYPE,
        P_CREATED_BY              IN FIDE_FACTURACIONES_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY             IN FIDE_FACTURACIONES_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        INSERT INTO FIDE_FACTURACIONES_TB (
            ID_CONSULTA_FK,
            ID_ESTADO_FK,
            FACTURA_FECHA_EMISION,
            FACTURA_MONTO_TOTAL,
            FACTURA_DESCUENTO,
            FACTURA_IMPUESTOS,
            FACTURA_MONTO_FINAL,
            FACTURA_SUBTOTAL,
            CREATED_BY,
            MODIFIED_BY
        )
        VALUES (
            P_ID_CONSULTA_FK,
            P_ID_ESTADO_FK,
            P_FACTURA_FECHA_EMISION,
            P_FACTURA_MONTO_TOTAL,
            P_FACTURA_DESCUENTO,
            P_FACTURA_IMPUESTOS,
            P_FACTURA_MONTO_FINAL,
            P_FACTURA_SUBTOTAL,
            P_CREATED_BY,
            P_MODIFIED_BY
        );
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END INSERT_FACTURACIONES_TB_SP;
    
    --Procedimiento para modificar factura
    PROCEDURE UPDATE_FACTURACIONES_TB_SP(
        P_ID_FACTURA            IN FIDE_FACTURACIONES_TB.ID_FACTURA_PK%TYPE,
        P_ID_CONSULTA_FK        IN FIDE_FACTURACIONES_TB.ID_CONSULTA_FK%TYPE,
        P_ID_ESTADO_FK          IN FIDE_FACTURACIONES_TB.ID_ESTADO_FK%TYPE,
        P_FACTURA_FECHA_EMISION IN FIDE_FACTURACIONES_TB.FACTURA_FECHA_EMISION%TYPE,
        P_FACTURA_MONTO_TOTAL   IN FIDE_FACTURACIONES_TB.FACTURA_MONTO_TOTAL%TYPE,
        P_FACTURA_DESCUENTO     IN FIDE_FACTURACIONES_TB.FACTURA_DESCUENTO%TYPE,
        P_FACTURA_IMPUESTOS     IN FIDE_FACTURACIONES_TB.FACTURA_IMPUESTOS%TYPE,
        P_FACTURA_MONTO_FINAL   IN FIDE_FACTURACIONES_TB.FACTURA_MONTO_FINAL%TYPE,
        P_FACTURA_SUBTOTAL      IN FIDE_FACTURACIONES_TB.FACTURA_SUBTOTAL%TYPE,
        P_MODIFIED_BY           IN FIDE_FACTURACIONES_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_FACTURACIONES_TB
           SET ID_CONSULTA_FK          = P_ID_CONSULTA_FK,
               ID_ESTADO_FK            = P_ID_ESTADO_FK,
               FACTURA_FECHA_EMISION   = P_FACTURA_FECHA_EMISION,
               FACTURA_MONTO_TOTAL     = P_FACTURA_MONTO_TOTAL,
               FACTURA_DESCUENTO       = P_FACTURA_DESCUENTO,
               FACTURA_IMPUESTOS       = P_FACTURA_IMPUESTOS,
               FACTURA_MONTO_FINAL     = P_FACTURA_MONTO_FINAL,
               FACTURA_SUBTOTAL        = P_FACTURA_SUBTOTAL,
               MODIFIED_BY             = P_MODIFIED_BY
         WHERE ID_FACTURA_PK           = P_ID_FACTURA;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END UPDATE_FACTURACIONES_TB_SP;
    
    --Procedimiento para hacer soft delete de las facturas
    PROCEDURE DESACTIVAR_FACTURACIONES_TB_SP (
        P_ID_FACTURA IN FIDE_FACTURACIONES_TB.ID_FACTURA_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_FACTURACIONES_TB
           SET ID_ESTADO_FK = 0
         WHERE ID_FACTURA_PK = P_ID_FACTURA;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END DESACTIVAR_FACTURACIONES_TB_SP;
    
    --Procedimiento para insertar proveedores
    PROCEDURE INSERT_PROVEEDORES_TB_SP(
        P_ID_ESTADO_FK                     IN FIDE_PROVEEDORES_TB.ID_ESTADO_FK%TYPE,
        P_ID_DIRECCION_FK                  IN FIDE_PROVEEDORES_TB.ID_DIRECCION_FK%TYPE,
        P_ID_TELEFONO_CONTACTO_FK          IN FIDE_PROVEEDORES_TB.ID_TELEFONO_CONTACTO_FK%TYPE,
        P_PROVEEDOR_NOMBRE                 IN FIDE_PROVEEDORES_TB.PROVEEDOR_NOMBRE%TYPE,
        P_PROVEEDOR_CORREO                 IN FIDE_PROVEEDORES_TB.PROVEEDOR_CORREO%TYPE,
        P_PROVEEDOR_DESCRIPCION_PRODUCTOS  IN FIDE_PROVEEDORES_TB.PROVEEDOR_DESCRIPCION_PRODUCTOS%TYPE,
        P_CREATED_BY                       IN FIDE_PROVEEDORES_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY                      IN FIDE_PROVEEDORES_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        INSERT INTO FIDE_PROVEEDORES_TB (
            ID_ESTADO_FK,
            ID_DIRECCION_FK,
            ID_TELEFONO_CONTACTO_FK,
            PROVEEDOR_NOMBRE,
            PROVEEDOR_CORREO,
            PROVEEDOR_DESCRIPCION_PRODUCTOS,
            CREATED_BY,
            MODIFIED_BY
        )
        VALUES (
            P_ID_ESTADO_FK,
            P_ID_DIRECCION_FK,
            P_ID_TELEFONO_CONTACTO_FK,
            P_PROVEEDOR_NOMBRE,
            P_PROVEEDOR_CORREO,
            P_PROVEEDOR_DESCRIPCION_PRODUCTOS,
            P_CREATED_BY,
            P_MODIFIED_BY
        );
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END INSERT_PROVEEDORES_TB_SP;
    
    --Procedimiento para modificar proveedores
    PROCEDURE UPDATE_PROVEEDORES_TB_SP(
        P_ID_PROVEEDOR_PK                  IN FIDE_PROVEEDORES_TB.ID_PROVEEDOR_PK%TYPE,
        P_ID_ESTADO_FK                     IN FIDE_PROVEEDORES_TB.ID_ESTADO_FK%TYPE,
        P_ID_DIRECCION_FK                  IN FIDE_PROVEEDORES_TB.ID_DIRECCION_FK%TYPE,
        P_ID_TELEFONO_CONTACTO_FK          IN FIDE_PROVEEDORES_TB.ID_TELEFONO_CONTACTO_FK%TYPE,
        P_PROVEEDOR_NOMBRE                 IN FIDE_PROVEEDORES_TB.PROVEEDOR_NOMBRE%TYPE,
        P_PROVEEDOR_CORREO                 IN FIDE_PROVEEDORES_TB.PROVEEDOR_CORREO%TYPE,
        P_PROVEEDOR_DESCRIPCION_PRODUCTOS  IN FIDE_PROVEEDORES_TB.PROVEEDOR_DESCRIPCION_PRODUCTOS%TYPE,
        P_MODIFIED_BY                      IN FIDE_PROVEEDORES_TB.MODIFIED_BY%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_PROVEEDORES_TB
           SET ID_ESTADO_FK                    = P_ID_ESTADO_FK,
               ID_DIRECCION_FK                 = P_ID_DIRECCION_FK,
               ID_TELEFONO_CONTACTO_FK         = P_ID_TELEFONO_CONTACTO_FK,
               PROVEEDOR_NOMBRE                = P_PROVEEDOR_NOMBRE,
               PROVEEDOR_CORREO                = P_PROVEEDOR_CORREO,
               PROVEEDOR_DESCRIPCION_PRODUCTOS = P_PROVEEDOR_DESCRIPCION_PRODUCTOS,
               MODIFIED_BY                     = P_MODIFIED_BY
         WHERE ID_PROVEEDOR_PK                 = P_ID_PROVEEDOR_PK;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END UPDATE_PROVEEDORES_TB_SP;
    
    --Procedimiento para hacer soft delete de proveedores
    PROCEDURE DESACTIVAR_PROVEEDORES_TB_SP (
        P_ID_PROVEEDOR IN FIDE_PROVEEDORES_TB.ID_PROVEEDOR_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_PROVEEDORES_TB
           SET ID_ESTADO_FK = 0
         WHERE ID_PROVEEDOR_PK = P_ID_PROVEEDOR;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END DESACTIVAR_PROVEEDORES_TB_SP;

    FUNCTION EXISTE_USUARIO_FN(
        P_CORREO     IN FIDE_USUARIOS_TB.USUARIO_CORREO%TYPE,
        P_CONTRASENNA IN FIDE_USUARIOS_TB.USUARIO_CONTRASENNA%TYPE
    ) RETURN NUMBER IS
        CURSOR C_EXISTE IS
            SELECT 1
            FROM FIDE_USUARIOS_TB
            WHERE USUARIO_CORREO = P_CORREO
              AND USUARIO_CONTRASENNA = P_CONTRASENNA;
    
        V_EXISTE NUMBER := 0;
    BEGIN
        FOR REC IN C_EXISTE LOOP
            V_EXISTE := 1;
        END LOOP;
    
        RETURN V_EXISTE;
    END EXISTE_USUARIO_FN;
    
    -- Extraer direccion completa usuario por cedula
    FUNCTION OBTENER_DIRECCION_USUARIO_FN (P_CEDULA_USUARIO VARCHAR2)
      RETURN VARCHAR2 IS
      CURSOR C_DIRECCION IS
                                            SELECT D.DIRECCION_SENNAS, P.NOMBRE_PROVINCIA, C.NOMBRE_CANTON, DIS.NOMBRE_DISTRITO
                                            FROM FIDE_USUARIOS_TB U
                                            JOIN FIDE_DIRECCION_TB D ON U.ID_DIRECCION_FK = D.ID_DIRECCION_PK
                                            JOIN FIDE_DIRECCION_PROVINCIA_TB P ON D.ID_DIRECCION_PROVINCIA_FK = P.ID_DIRECCION_PROVINCIA_PK
                                            JOIN FIDE_DIRECCION_CANTON_TB C ON D.ID_DIRECCION_CANTON_FK = C.ID_DIRECCION_CANTON_PK
                                            JOIN FIDE_DIRECCION_DISTRITO_TB DIS ON D.ID_DIRECCION_DISTRITO_FK = DIS.ID_DIRECCION_DISTRITO_PK
                                            WHERE U.USUARIO_IDENTIFICACION = P_CEDULA_USUARIO;
      V_DIRECCION VARCHAR2(4000);
    BEGIN
      FOR REC IN C_DIRECCION LOOP
        V_DIRECCION := REC.DIRECCION_SENNAS || ', ' || REC.NOMBRE_DISTRITO || ', ' || REC.NOMBRE_CANTON || ', ' || REC.NOMBRE_PROVINCIA;
      END LOOP;
      RETURN V_DIRECCION;
    END OBTENER_DIRECCION_USUARIO_FN;
    
    -- Extraer mascotas de usuario por cedula
    FUNCTION OBTENER_MASCOTAS_USUARIO_FN (
        P_IDENTIFICACION_USUARIO VARCHAR2
    ) RETURN VARCHAR2 IS
    
        CURSOR C_MASCOTAS IS
            SELECT M.NOMBRE_MASCOTA
            FROM FIDE_MASCOTA_TB M
            JOIN FIDE_USUARIOS_TB U ON M.ID_USUARIO_FK = U.ID_USUARIO_PK
            WHERE U.USUARIO_IDENTIFICACION = P_IDENTIFICACION_USUARIO;
            
        V_RESULTADO VARCHAR2(4000) := '';
    BEGIN
        FOR REC IN C_MASCOTAS LOOP
            V_RESULTADO := V_RESULTADO || REC.NOMBRE_MASCOTA || ', ';
        END LOOP;
    
        IF V_RESULTADO IS NULL OR V_RESULTADO = '' THEN
            RETURN 'NO SE ENCONTRARON MASCOTAS PARA EL USUARIO ' || P_IDENTIFICACION_USUARIO;
        ELSE
            RETURN V_RESULTADO; 
        END IF;
    END OBTENER_MASCOTAS_USUARIO_FN;
    
    --Funcion que retorna 1 si la raza existe y 0 si no existe
    FUNCTION EXISTE_RAZA_POR_DESCRIPCION_FN(
      P_NOMBRE_RAZA VARCHAR2
    ) RETURN NUMBER IS
      CURSOR C_EXISTE IS 
      SELECT 1 
      FROM FIDE_MASCOTA_RAZA_TB 
      WHERE NOMBRE_RAZA = P_NOMBRE_RAZA;
        
        V_EXISTE NUMBER :=0;
        BEGIN
        FOR REC IN C_EXISTE LOOP
            V_EXISTE :=1;
        END LOOP;
       
       RETURN V_EXISTE;
    END EXISTE_RAZA_POR_DESCRIPCION_FN;
    
    --Validar fecha de cirugia por ID
    FUNCTION OBTENER_FECHA_CIRUGIA_FN(
      P_ID_CIRUGIA NUMBER
    ) 
    RETURN DATE IS
        CURSOR C_FECHA IS
      SELECT CIRUGIA_FECHA_INICIO 
      FROM FIDE_REGISTRO_CIRUGIAS_TB 
      WHERE ID_CIRUGIA_PK = P_ID_CIRUGIA; 
      V_FECHA DATE;
      BEGIN
      FOR REC IN C_FECHA LOOP
        V_FECHA:= REC.CIRUGIA_FECHA_INICIO;
        END LOOP;
        IF V_FECHA IS NULL THEN
            RETURN 'NO SE ENCONTRO FECHA PARA LA CITA';
        ELSE
            RETURN V_FECHA;
        END IF;
     
    END OBTENER_FECHA_CIRUGIA_FN;
    
    -- Obtener duenno mascota
    FUNCTION OBTENER_DUENNO_MASCOTA_FN (P_ID_MASCOTA NUMBER) 
      RETURN VARCHAR2 IS
      CURSOR C_DUENNO IS
        SELECT U.USUARIO_NOMBRE
        FROM FIDE_USUARIOS_TB U
        JOIN FIDE_MASCOTA_TB M ON M.ID_USUARIO_FK = U.ID_USUARIO_PK
        WHERE M.ID_MASCOTA_PK = P_ID_MASCOTA;
        
        V_RESULTADO VARCHAR2(4000):='';
      BEGIN
          FOR REC IN C_DUENNO LOOP
            V_RESULTADO := V_RESULTADO || REC.USUARIO_NOMBRE || ', ';
          END LOOP;
        
          IF V_RESULTADO IS NULL OR V_RESULTADO = '' THEN
            RETURN 'NO SE ENCONTRÓ DUEÑO PARA LA MASCOTA CON ID ' || P_ID_MASCOTA;
          ELSE
            RETURN RTRIM(V_RESULTADO, ', ');
          END IF;
      END OBTENER_DUENNO_MASCOTA_FN;
 
     FUNCTION OBTENER_INFO_CIRUGIA_FN(
        P_ID_CIRUGIA IN FIDE_REGISTRO_CIRUGIAS_TB.ID_CIRUGIA_PK%TYPE
    ) RETURN VARCHAR2 IS
        CURSOR C_CIRUGIA IS
            SELECT C.CIRUGIA_DIAG_PREVIO, C.CIRUGIA_DIAG_POST, M.NOMBRE_MASCOTA
            FROM FIDE_REGISTRO_CIRUGIAS_TB C
            JOIN FIDE_MASCOTA_TB M ON C.ID_MASCOTA_FK = M.ID_MASCOTA_PK
            WHERE C.ID_CIRUGIA_PK = P_ID_CIRUGIA;
            
        V_RESULTADO VARCHAR2(4000) := '';
    BEGIN
        FOR REC IN C_CIRUGIA LOOP
            V_RESULTADO := 'Mascota: ' || REC.NOMBRE_MASCOTA || 
                           ', Diagnóstico previo: ' || REC.CIRUGIA_DIAG_PREVIO || 
                           ', Diagnóstico post: ' || REC.CIRUGIA_DIAG_POST;
        END LOOP;
        
        IF V_RESULTADO IS NULL OR V_RESULTADO = '' THEN
            RETURN 'NO SE ENCONTRÓ INFORMACIÓN PARA LA CIRUG�?A CON ID ' || P_ID_CIRUGIA;
        ELSE
            RETURN V_RESULTADO;
        END IF;
    END OBTENER_INFO_CIRUGIA_FN;

    FUNCTION OBTENER_NOMBRE_PRODUCTO_FN(
        P_ID_PRODUCTO IN FIDE_PRODUCTOS_TB.ID_PRODUCTO_PK%TYPE
        ) RETURN VARCHAR2 IS
            CURSOR C_PRODUCTO IS
                SELECT PRODUCTO_NOMBRE
                FROM FIDE_PRODUCTOS_TB
                WHERE ID_PRODUCTO_PK = P_ID_PRODUCTO;
                
            V_NOMBRE VARCHAR2(100) := '';
        BEGIN
            FOR REC IN C_PRODUCTO LOOP
                V_NOMBRE := REC.PRODUCTO_NOMBRE;
            END LOOP;
            
            IF V_NOMBRE IS NULL OR V_NOMBRE = '' THEN
                RETURN 'NO SE ENCONTRÓ PRODUCTO CON ID ' || P_ID_PRODUCTO;
            ELSE
                RETURN V_NOMBRE;
            END IF;
        END OBTENER_NOMBRE_PRODUCTO_FN;
        
    FUNCTION EXISTE_PROVINCIA_POR_NOMBRE_FN(
            P_NOMBRE_PROVINCIA IN FIDE_DIRECCION_PROVINCIA_TB.NOMBRE_PROVINCIA%TYPE
        ) RETURN NUMBER IS
            CURSOR C_EXISTE IS 
                SELECT 1 
                FROM FIDE_DIRECCION_PROVINCIA_TB 
                WHERE NOMBRE_PROVINCIA = P_NOMBRE_PROVINCIA;
                
            V_EXISTE NUMBER := 0;
        BEGIN
            FOR REC IN C_EXISTE LOOP
                V_EXISTE := 1;
            END LOOP;
           
            RETURN V_EXISTE;
        END EXISTE_PROVINCIA_POR_NOMBRE_FN;    
    
    FUNCTION OBTENER_TOTAL_FACTURAS_USUARIO_FN(
        P_ID_USUARIO IN FIDE_USUARIOS_TB.ID_USUARIO_PK%TYPE
    ) RETURN NUMBER IS
        CURSOR C_FACTURAS IS
            SELECT COUNT(*) AS TOTAL
            FROM FIDE_FACTURACIONES_TB F
            JOIN FIDE_CONSULTAS_TB C ON F.ID_CONSULTA_FK = C.ID_CONSULTA_PK
            WHERE C.ID_USUARIO_FK = P_ID_USUARIO;
            
        V_TOTAL NUMBER := 0;
    BEGIN
        FOR REC IN C_FACTURAS LOOP
            V_TOTAL := REC.TOTAL;
        END LOOP;
        
        RETURN V_TOTAL;
    END OBTENER_TOTAL_FACTURAS_USUARIO_FN;    
    
    FUNCTION PRODUCTO_EN_STOCK_FN(
        P_ID_PRODUCTO IN FIDE_PRODUCTOS_TB.ID_PRODUCTO_PK%TYPE
    ) RETURN NUMBER IS
        CURSOR C_STOCK IS
            SELECT 1
            FROM FIDE_PRODUCTOS_TB
            WHERE ID_PRODUCTO_PK = P_ID_PRODUCTO
              AND PRODUCTO_STOCK > 0;
              
        V_EN_STOCK NUMBER := 0;
    BEGIN
        FOR REC IN C_STOCK LOOP
            V_EN_STOCK := 1;
        END LOOP;
        
        RETURN V_EN_STOCK;
    END PRODUCTO_EN_STOCK_FN;   
      
      -- Obtener nombre por ID
    FUNCTION OBTENER_USUARIO_POR_ID_FN(P_ID NUMBER)
        RETURN VARCHAR2 IS
        CURSOR C_NOMBRE IS
            SELECT USUARIO_NOMBRE
            FROM FIDE_USUARIOS_TB 
            WHERE ID_USUARIO_PK = P_ID;
        
        V_NOMBRE VARCHAR2(4000) := '';
    BEGIN
       
        FOR REC IN C_NOMBRE LOOP
            V_NOMBRE := REC.USUARIO_NOMBRE; 
        END LOOP;
        
        IF V_NOMBRE IS NULL OR V_NOMBRE = '' THEN
            RETURN 'NO SE ENCONTRÓ NOMBRE DEL USUARIO CON EL ID ' || P_ID;
        ELSE
            RETURN V_NOMBRE;
        END IF;
    END OBTENER_USUARIO_POR_ID_FN;
    
    FUNCTION OBTENER_PROVEEDOR_PRODUCTO_FN(
    P_ID_PRODUCTO IN FIDE_PRODUCTOS_TB.ID_PRODUCTO_PK%TYPE
    ) RETURN VARCHAR2 IS
        CURSOR C_PROVEEDOR IS
            SELECT PR.PROVEEDOR_NOMBRE
            FROM FIDE_PRODUCTOS_TB P
            JOIN FIDE_PROVEEDORES_TB PR ON P.ID_PROVEEDOR_FK = PR.ID_PROVEEDOR_PK
            WHERE P.ID_PRODUCTO_PK = P_ID_PRODUCTO;
            
        V_PROVEEDOR VARCHAR2(100) := '';
    BEGIN
        FOR REC IN C_PROVEEDOR LOOP
            V_PROVEEDOR := REC.PROVEEDOR_NOMBRE;
        END LOOP;
        
        IF V_PROVEEDOR IS NULL OR V_PROVEEDOR = '' THEN
            RETURN 'NO SE ENCONTRÓ PROVEEDOR PARA EL PRODUCTO CON ID ' || P_ID_PRODUCTO;
        ELSE
            RETURN V_PROVEEDOR;
        END IF;
    END OBTENER_PROVEEDOR_PRODUCTO_FN;

    FUNCTION MASCOTA_TIENE_HISTORIAL_FN(
        P_ID_MASCOTA IN FIDE_MASCOTA_TB.ID_MASCOTA_PK%TYPE
    ) RETURN NUMBER IS
        CURSOR C_HISTORIAL IS
            SELECT 1
            FROM FIDE_HISTORIALES_MEDICOS_TB
            WHERE ID_MASCOTA_FK = P_ID_MASCOTA;
            
        V_TIENE_HISTORIAL NUMBER := 0;
    BEGIN
        FOR REC IN C_HISTORIAL LOOP
            V_TIENE_HISTORIAL := 1;
            EXIT; 
        END LOOP;
        
        RETURN V_TIENE_HISTORIAL;
    END MASCOTA_TIENE_HISTORIAL_FN;

    FUNCTION USUARIO_TIENE_MASCOTAS_FN(
    P_ID_USUARIO IN FIDE_USUARIOS_TB.ID_USUARIO_PK%TYPE
    ) RETURN NUMBER IS
        CURSOR C_MASCOTAS IS
            SELECT 1
            FROM FIDE_MASCOTA_TB
            WHERE ID_USUARIO_FK = P_ID_USUARIO;
            
        V_TIENE_MASCOTAS NUMBER := 0;
    BEGIN
        FOR REC IN C_MASCOTAS LOOP
            V_TIENE_MASCOTAS := 1;
            EXIT; 
        END LOOP;
        
        RETURN V_TIENE_MASCOTAS;
    END USUARIO_TIENE_MASCOTAS_FN;

    PROCEDURE FIDE_ESTADO_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_ESTADO_PK, ESTADO_DESCRIPCION, CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_ESTADO_V;
    END FIDE_ESTADO_SELECT_SP;

    PROCEDURE FIDE_DIRECCION_PROVINCIA_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_DIRECCION_PROVINCIA_PK, ID_ESTADO_FK, NOMBRE_PROVINCIA,
                   CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_DIRECCION_PROVINCIA_V;
    END FIDE_DIRECCION_PROVINCIA_SELECT_SP;

    PROCEDURE FIDE_DIRECCION_CANTON_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_DIRECCION_CANTON_PK, ID_ESTADO_FK, NOMBRE_CANTON,
                   CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_DIRECCION_CANTON_V;
    END FIDE_DIRECCION_CANTON_SELECT_SP;

    PROCEDURE FIDE_DIRECCION_DISTRITO_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_DIRECCION_DISTRITO_PK, ID_ESTADO_FK, NOMBRE_DISTRITO,
                   CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_DIRECCION_DISTRITO_V;
    END FIDE_DIRECCION_DISTRITO_SELECT_SP;

    PROCEDURE FIDE_DIRECCION_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_DIRECCION_PK, ID_ESTADO_FK, ID_DIRECCION_PROVINCIA_FK,
                   ID_DIRECCION_CANTON_FK, ID_DIRECCION_DISTRITO_FK,
                   DIRECCION_SENNAS, CREATED_BY, CREATION_DATE,
                   MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_DIRECCION_V;
    END FIDE_DIRECCION_SELECT_SP;

    PROCEDURE FIDE_TELEFONO_CONTACTO_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_TELEFONO_CONTACTO_PK, ID_ESTADO_FK, TELEFONO_CONTACTO,
                   CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_TELEFONO_CONTACTO_TB;
    END FIDE_TELEFONO_CONTACTO_SELECT_SP;

    PROCEDURE FIDE_TIPO_USUARIO_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_TIPO_USUARIO_PK, ID_ESTADO_FK, DESCRIPCION_TIPO_USUARIO,
                   CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_TIPO_USUARIO_TB;
    END FIDE_TIPO_USUARIO_SELECT_SP;

    PROCEDURE FIDE_ESPECIALIDAD_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_ESPECIALIDAD_PK, ID_ESTADO_FK, NOMBRE_ESPECIALIDAD, DESCRIPCION_ESPECIALIDAD,
                   CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_ESPECIALIDAD_TB;
    END;

    PROCEDURE FIDE_USUARIOS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_USUARIO_PK, ID_ESTADO_FK, ID_ESPECIALIDAD_FK, ID_TIPO_USUARIO_FK,
                   ID_DIRECCION_FK, ID_TELEFONO_CONTACTO_FK, USUARIO_NOMBRE, USUARIO_CORREO,
                   USUARIO_CONTRASENNA, USUARIO_IDENTIFICACION, USUARIO_FECHA_REGISTRO,
                   USUARIO_CUENTA_BANCARIA, CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_USUARIOS_TB;
    END;

    PROCEDURE FIDE_MASCOTA_ESPECIE_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_MASCOTA_ESPECIE_PK, ID_ESTADO_FK, NOMBRE_ESPECIE,
                   CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_MASCOTA_ESPECIE_TB;
    END;

    PROCEDURE FIDE_MASCOTA_RAZA_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_MASCOTA_RAZA_PK, ID_ESTADO_FK, NOMBRE_RAZA,
                   CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_MASCOTA_RAZA_TB;
    END;

    PROCEDURE FIDE_MASCOTA_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_MASCOTA_PK, ID_ESTADO_FK, ID_MASCOTA_ESPECIE_FK, ID_MASCOTA_RAZA_FK,
                   ID_USUARIO_FK, NOMBRE_MASCOTA, FECHA_NACIMIENTO, GENERO,
                   CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_MASCOTA_TB;
    END;

    PROCEDURE FIDE_TIPO_EXAMEN_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_TIPO_EXAMEN_PK, ID_ESTADO_FK, DESCRIPCION_EXAMEN,
                   CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_TIPO_EXAMEN_TB;
    END;

    PROCEDURE FIDE_EXAMENES_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_EXAMEN_PK, ID_MASCOTA_FK, ID_ESTADO_FK, ID_TIPO_EXAMEN_FK,
                   EXAMEN_RESULTADO, EXAMEN_FECHA_SEGUIMIENTO,
                   CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_EXAMENES_TB;
    END;

    PROCEDURE FIDE_PAGOS_PLANILLAS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_PAGO_PLANILLA_PK, ID_USUARIO_FK, ID_ESTADO_FK, 
                PAGO_FECHA, PAGO_SALARIO_BRUTO, PAGO_SALARIO_NETO,
                PAGO_HORAS_EXTRA, PAGO_VACACIONES,
                CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,
                ACCION
            FROM FIDE_PAGOS_PLANILLAS_TB;
    END;

    PROCEDURE FIDE_HISTORIALES_MEDICOS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_MASCOTA_FK, 
                ID_CONSULTA_FK, 
                ID_USUARIO_FK, 
                ID_TIPO_USUARIO_FK, 
                ID_ESTADO_FK,
                HISTORIAL_FECHA_REGISTRO, 
                HISTORIAL_DIAGNOSTICO, 
                HISTORIAL_TRATAMIENTO, 
                HISTORIAL_NOTAS,
                CREATED_BY, 
                CREATION_DATE, 
                MODIFIED_BY, 
                MODIFICATION_DATE,
               ACCION
            FROM FIDE_HISTORIALES_MEDICOS_TB;
    END;

    PROCEDURE FIDE_CIRUGIAS_PERSONAL_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_CIRUGIA_FK,
                ID_USUARIO_FK,
                ID_ROL_CIRUGIA_FK,
                ID_ESTADO_FK,
                ID_TIPO_USUARIO_FK,
                ANOTACIONES_ADICIONALES,
                CREATED_BY,
                CREATION_DATE,
                MODIFIED_BY,
                MODIFICATION_DATE,
               ACCION
            FROM FIDE_CIRUGIAS_PERSONAL_TB;
    END;

PROCEDURE FIDE_CIRUGIAS_MEDICAMENTOS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
BEGIN
    OPEN P_RESULTADO FOR
        SELECT ID_CIRUGIA_FK,
               ID_PRODUCTO_FK,
               ID_ESTADO_FK,
               ID_TIPO_VIA_FK,
               CIRUGIA_MEDICAMENTO_DOSIS,
               CREATED_BY,
               CREATION_DATE,
               MODIFIED_BY,
               MODIFICATION_DATE,
               ACCION
        FROM FIDE_CIRUGIAS_MEDICAMENTOS_TB;
END;

PROCEDURE FIDE_REGISTRO_CIRUGIAS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
BEGIN
    OPEN P_RESULTADO FOR
        SELECT ID_CIRUGIA_PK,
               CIRUGIA_FECHA_INICIO,
               CIRUGIA_FECHA_FINAL,
               ID_ESTADO_FK,
               ID_MASCOTA_FK,
               CIRUGIA_ANOTACIONES,
               CIRUGIA_DIAG_PREVIO,
               CIRUGIA_DIAG_POST,
               CREATED_BY,
               CREATION_DATE,
               MODIFIED_BY,
               MODIFICATION_DATE,
               ACCION
        FROM FIDE_REGISTRO_CIRUGIAS_TB;
END;

PROCEDURE FIDE_ROLES_CIRUGIA_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
BEGIN
    OPEN P_RESULTADO FOR
        SELECT ID_ROL_CIRUGIA_PK,
               ID_ESTADO_FK,
               MEDICO_CIRUJANO,
               ASISTENTE_ANESTESIOLOGO,
               CREATED_BY,
               CREATION_DATE,
               MODIFIED_BY,
               MODIFICATION_DATE,
               ACCION
        FROM FIDE_ROLES_CIRUGIA_TB;
END;

PROCEDURE FIDE_TIPO_VIA_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
BEGIN
    OPEN P_RESULTADO FOR
        SELECT ID_TIPO_VIA_PK,
               ID_ESTADO_FK,
               TIPO_VIA_DESCRIPCION,
               CREATED_BY,
               CREATION_DATE,
               MODIFIED_BY,
               MODIFICATION_DATE,
               ACCION
        FROM FIDE_TIPO_VIA_TB;
END;

PROCEDURE FIDE_ORDEN_PRODUCTOS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
BEGIN
    OPEN P_RESULTADO FOR
        SELECT ID_ORDEN_COMPRA_FK,
               ID_PRODUCTO_FK,
               ID_ESTADO_FK,
               ORDEN_PRODUCTO_CANTIDAD,
               ORDEN_PRODUCTO_PRECIO_UNITARIO,
               ORDEN_PRODUCTO_SUBTOTAL,
               CREATED_BY,
               CREATION_DATE,
               MODIFIED_BY,
               MODIFICATION_DATE,
               ACCION
        FROM FIDE_ORDEN_PRODUCTOS_TB;
END;

PROCEDURE INSERT_PRODUCTOS_SP(
        P_ID_PROVEEDOR IN FIDE_PRODUCTOS_TB.ID_PROVEEDOR_FK%TYPE,
        P_ID_ESTADO IN FIDE_PRODUCTOS_TB.ID_ESTADO_FK%TYPE,
        P_NOMBRE IN FIDE_PRODUCTOS_TB.PRODUCTO_NOMBRE%TYPE,
        P_DESCRIPCION IN FIDE_PRODUCTOS_TB.PRODUCTO_DESCRIPCION%TYPE,
        P_PRECIO_UNITARIO IN FIDE_PRODUCTOS_TB.PRODUCTO_PRECIO_UNITARIO%TYPE,
        P_STOCK IN FIDE_PRODUCTOS_TB.PRODUCTO_STOCK%TYPE,
        P_CREATED_BY IN FIDE_PRODUCTOS_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY IN FIDE_PRODUCTOS_TB.MODIFIED_BY%TYPE
    ) IS
    BEGIN
        INSERT INTO FIDE_PRODUCTOS_TB (
            ID_PROVEEDOR_FK,
            ID_ESTADO_FK,
            PRODUCTO_NOMBRE,
            PRODUCTO_DESCRIPCION,
            PRODUCTO_PRECIO_UNITARIO,
            PRODUCTO_STOCK,
            CREATED_BY,
            MODIFIED_BY
        ) VALUES (
            P_ID_PROVEEDOR,
            P_ID_ESTADO,
            P_NOMBRE,
            P_DESCRIPCION,
            P_PRECIO_UNITARIO,
            P_STOCK,
            P_CREATED_BY,
            P_MODIFIED_BY
        );
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END INSERT_PRODUCTOS_SP;
    
        PROCEDURE UPDATE_PRODUCTOS_SP(
        P_ID_PRODUCTO IN FIDE_PRODUCTOS_TB.ID_PRODUCTO_PK%TYPE,
        P_ID_PROVEEDOR IN FIDE_PRODUCTOS_TB.ID_PROVEEDOR_FK%TYPE,
        P_ID_ESTADO IN FIDE_PRODUCTOS_TB.ID_ESTADO_FK%TYPE,
        P_NOMBRE IN FIDE_PRODUCTOS_TB.PRODUCTO_NOMBRE%TYPE,
        P_DESCRIPCION IN FIDE_PRODUCTOS_TB.PRODUCTO_DESCRIPCION%TYPE,
        P_PRECIO_UNITARIO IN FIDE_PRODUCTOS_TB.PRODUCTO_PRECIO_UNITARIO%TYPE,
        P_STOCK IN FIDE_PRODUCTOS_TB.PRODUCTO_STOCK%TYPE,
        P_MODIFIED_BY IN FIDE_PRODUCTOS_TB.MODIFIED_BY%TYPE
    ) IS
    BEGIN
        UPDATE FIDE_PRODUCTOS_TB
        SET 
            ID_PROVEEDOR_FK = P_ID_PROVEEDOR,
            ID_ESTADO_FK = P_ID_ESTADO,
            PRODUCTO_NOMBRE = P_NOMBRE,
            PRODUCTO_DESCRIPCION = P_DESCRIPCION,
            PRODUCTO_PRECIO_UNITARIO = P_PRECIO_UNITARIO,
            PRODUCTO_STOCK = P_STOCK,
            MODIFIED_BY = P_MODIFIED_BY
        WHERE ID_PRODUCTO_PK = P_ID_PRODUCTO;
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END UPDATE_PRODUCTOS_SP;
    
    PROCEDURE DESACTIVAR_PRODUCTOS_SP(
        P_ID_PRODUCTO IN FIDE_PRODUCTOS_TB.ID_PRODUCTO_PK%TYPE
    ) IS
    BEGIN
        UPDATE FIDE_PRODUCTOS_TB
        SET 
            ID_ESTADO_FK = 0
        WHERE ID_PRODUCTO_PK = P_ID_PRODUCTO;
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
            
    END DESACTIVAR_PRODUCTOS_SP;
--------------------------- ORDEN COMPRA SP-------------------------------- 
    PROCEDURE INSERT_ORDEN_COMPRA_SP(
        P_ID_PROVEEDOR IN FIDE_ORDEN_COMPRA_TB.ID_PROVEEDOR_FK%TYPE,
        P_ID_ESTADO IN FIDE_ORDEN_COMPRA_TB.ID_ESTADO_FK%TYPE,
        P_PRECIO_TOTAL IN FIDE_ORDEN_COMPRA_TB.ORDEN_COMPRA_PRECIO_TOTAL%TYPE,
        P_CREATED_BY IN FIDE_ORDEN_COMPRA_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY IN FIDE_ORDEN_COMPRA_TB.MODIFIED_BY%TYPE
    ) IS
    BEGIN
        INSERT INTO FIDE_ORDEN_COMPRA_TB (
            ID_PROVEEDOR_FK,
            ID_ESTADO_FK,
            ORDEN_COMPRA_PRECIO_TOTAL,
            CREATED_BY,
            MODIFIED_BY
        ) VALUES (
            P_ID_PROVEEDOR,
            P_ID_ESTADO,
            P_PRECIO_TOTAL,
            P_CREATED_BY,
            P_MODIFIED_BY
        );
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
            
    END INSERT_ORDEN_COMPRA_SP;

    PROCEDURE UPDATE_ORDEN_COMPRA_SP(
        P_ID_ORDEN IN FIDE_ORDEN_COMPRA_TB.ID_ORDEN_COMPRA_PK%TYPE,
        P_ID_PROVEEDOR IN FIDE_ORDEN_COMPRA_TB.ID_PROVEEDOR_FK%TYPE,
        P_ID_ESTADO IN FIDE_ORDEN_COMPRA_TB.ID_ESTADO_FK%TYPE,
        P_PRECIO_TOTAL IN FIDE_ORDEN_COMPRA_TB.ORDEN_COMPRA_PRECIO_TOTAL%TYPE,
        P_MODIFIED_BY IN FIDE_ORDEN_COMPRA_TB.MODIFIED_BY%TYPE
    ) IS
    BEGIN
        UPDATE FIDE_ORDEN_COMPRA_TB
        SET
            ID_PROVEEDOR_FK = P_ID_PROVEEDOR,
            ID_ESTADO_FK = P_ID_ESTADO,
            ORDEN_COMPRA_PRECIO_TOTAL = P_PRECIO_TOTAL,
            MODIFIED_BY = P_MODIFIED_BY
        WHERE ID_ORDEN_COMPRA_PK = P_ID_ORDEN;
        
         COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
        
    END UPDATE_ORDEN_COMPRA_SP;

    PROCEDURE DESACTIVAR_ORDEN_COMPRA_SP(
        P_ID_ORDEN IN FIDE_ORDEN_COMPRA_TB.ID_ORDEN_COMPRA_PK%TYPE
    ) IS
    BEGIN
        UPDATE FIDE_ORDEN_COMPRA_TB
        SET 
            ID_ESTADO_FK = 0
        WHERE ID_ORDEN_COMPRA_PK = P_ID_ORDEN;
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
            
    END DESACTIVAR_ORDEN_COMPRA_SP;
    
-----Creacion procedimiento de inserciones FIDE_TIPO VIA

    PROCEDURE INSERT_TIPO_VIA_SP(
        P_ID_ESTADO IN FIDE_TIPO_VIA_TB.ID_ESTADO_FK%TYPE,
        P_DESCRIPCION IN FIDE_TIPO_VIA_TB.TIPO_VIA_DESCRIPCION%TYPE,
        P_CREATED_BY IN FIDE_TIPO_VIA_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY IN FIDE_TIPO_VIA_TB.MODIFIED_BY%TYPE
    ) IS
    BEGIN
        INSERT INTO FIDE_TIPO_VIA_TB (
            ID_ESTADO_FK,
            TIPO_VIA_DESCRIPCION,
            CREATED_BY,
            MODIFIED_BY
        ) VALUES (
            P_ID_ESTADO,
            P_DESCRIPCION,
            P_CREATED_BY,
            P_MODIFIED_BY
        );
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
            
    END INSERT_TIPO_VIA_SP;

    PROCEDURE UPDATE_TIPO_VIA_SP(
        P_ID_TIPO_VIA IN FIDE_TIPO_VIA_TB.ID_TIPO_VIA_PK%TYPE,
        P_ID_ESTADO IN FIDE_TIPO_VIA_TB.ID_ESTADO_FK%TYPE,
        P_DESCRIPCION IN FIDE_TIPO_VIA_TB.TIPO_VIA_DESCRIPCION%TYPE,
        P_MODIFIED_BY IN FIDE_TIPO_VIA_TB.MODIFIED_BY%TYPE
    ) IS
    BEGIN
        UPDATE FIDE_TIPO_VIA_TB
        SET
            ID_ESTADO_FK = P_ID_ESTADO,
            TIPO_VIA_DESCRIPCION = P_DESCRIPCION,
            MODIFIED_BY = P_MODIFIED_BY
        WHERE ID_TIPO_VIA_PK = P_ID_TIPO_VIA;
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
            
    END UPDATE_TIPO_VIA_SP;

    PROCEDURE DESACTIVAR_TIPO_VIA_SP(
        P_ID_TIPO_VIA IN FIDE_TIPO_VIA_TB.ID_TIPO_VIA_PK%TYPE
    ) IS
    BEGIN
        UPDATE FIDE_TIPO_VIA_TB
        SET
            ID_ESTADO_FK = 0
        WHERE ID_TIPO_VIA_PK = P_ID_TIPO_VIA;
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
            
    END DESACTIVAR_TIPO_VIA_SP;

    -----Creacion procedimiento de inserciones FIDE_PAGOS PLANILLA-------
    PROCEDURE INSERT_PAGOS_PLANILLAS_SP(
        P_ID_USUARIO IN FIDE_PAGOS_PLANILLAS_TB.ID_USUARIO_FK%TYPE,
        P_ID_ESTADO IN FIDE_PAGOS_PLANILLAS_TB.ID_ESTADO_FK%TYPE,
        P_PAGO_FECHA IN FIDE_PAGOS_PLANILLAS_TB.PAGO_FECHA%TYPE,
        P_SALARIO_BRUTO IN FIDE_PAGOS_PLANILLAS_TB.PAGO_SALARIO_BRUTO%TYPE,
        P_SALARIO_NETO IN FIDE_PAGOS_PLANILLAS_TB.PAGO_SALARIO_NETO%TYPE,
        P_HORAS_EXTRA IN FIDE_PAGOS_PLANILLAS_TB.PAGO_HORAS_EXTRA%TYPE,
        P_VACACIONES IN FIDE_PAGOS_PLANILLAS_TB.PAGO_VACACIONES%TYPE,
        P_CREATED_BY IN FIDE_PAGOS_PLANILLAS_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY IN FIDE_PAGOS_PLANILLAS_TB.MODIFIED_BY%TYPE
    ) IS
    BEGIN
        INSERT INTO FIDE_PAGOS_PLANILLAS_TB (
            ID_USUARIO_FK,
            ID_ESTADO_FK,
            PAGO_FECHA,
            PAGO_SALARIO_BRUTO,
            PAGO_SALARIO_NETO,
            PAGO_HORAS_EXTRA,
            PAGO_VACACIONES,
            CREATED_BY,
            MODIFIED_BY
        ) VALUES (
            P_ID_USUARIO,
            P_ID_ESTADO,
            P_PAGO_FECHA,
            P_SALARIO_BRUTO,
            P_SALARIO_NETO,
            P_HORAS_EXTRA,
            P_VACACIONES,
            P_CREATED_BY,
            P_MODIFIED_BY
        );
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
            
    END INSERT_PAGOS_PLANILLAS_SP;

    PROCEDURE UPDATE_PAGOS_PLANILLAS_SP(
        P_ID_PAGO IN FIDE_PAGOS_PLANILLAS_TB.ID_PAGO_PLANILLA_PK%TYPE,
        P_ID_USUARIO IN FIDE_PAGOS_PLANILLAS_TB.ID_USUARIO_FK%TYPE,
        P_ID_ESTADO IN FIDE_PAGOS_PLANILLAS_TB.ID_ESTADO_FK%TYPE,
        P_PAGO_FECHA IN FIDE_PAGOS_PLANILLAS_TB.PAGO_FECHA%TYPE,
        P_SALARIO_BRUTO IN FIDE_PAGOS_PLANILLAS_TB.PAGO_SALARIO_BRUTO%TYPE,
        P_SALARIO_NETO IN FIDE_PAGOS_PLANILLAS_TB.PAGO_SALARIO_NETO%TYPE,
        P_HORAS_EXTRA IN FIDE_PAGOS_PLANILLAS_TB.PAGO_HORAS_EXTRA%TYPE,
        P_VACACIONES IN FIDE_PAGOS_PLANILLAS_TB.PAGO_VACACIONES%TYPE,
        P_MODIFIED_BY IN FIDE_PAGOS_PLANILLAS_TB.MODIFIED_BY%TYPE
    ) IS
    BEGIN
        UPDATE FIDE_PAGOS_PLANILLAS_TB
        SET
            ID_USUARIO_FK = P_ID_USUARIO,
            ID_ESTADO_FK = P_ID_ESTADO,
            PAGO_FECHA = P_PAGO_FECHA,
            PAGO_SALARIO_BRUTO = P_SALARIO_BRUTO,
            PAGO_SALARIO_NETO = P_SALARIO_NETO,
            PAGO_HORAS_EXTRA = P_HORAS_EXTRA,
            PAGO_VACACIONES = P_VACACIONES,
            MODIFIED_BY = P_MODIFIED_BY
        WHERE ID_PAGO_PLANILLA_PK = P_ID_PAGO;
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
            
    END UPDATE_PAGOS_PLANILLAS_SP;

    PROCEDURE DESACTIVAR_PAGOS_PLANILLAS_SP(
        P_ID_PAGO IN FIDE_PAGOS_PLANILLAS_TB.ID_PAGO_PLANILLA_PK%TYPE
    ) IS
    BEGIN
        UPDATE FIDE_PAGOS_PLANILLAS_TB
        SET
            ID_ESTADO_FK = 0
        WHERE ID_PAGO_PLANILLA_PK = P_ID_PAGO;
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
            
    END DESACTIVAR_PAGOS_PLANILLAS_SP;

---Creacion procedimiento de inserciones para FIDE_ROLES CIRUGIA ------------
    PROCEDURE INSERT_ROLES_CIRUGIA_SP(
        P_ID_ESTADO IN FIDE_ROLES_CIRUGIA_TB.ID_ESTADO_FK%TYPE,
        P_MEDICO_CIRUJANO IN FIDE_ROLES_CIRUGIA_TB.MEDICO_CIRUJANO%TYPE,
        P_ASISTENTE_ANESTESIOLOGO IN FIDE_ROLES_CIRUGIA_TB.ASISTENTE_ANESTESIOLOGO%TYPE,
        P_CREATED_BY IN FIDE_ROLES_CIRUGIA_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY IN FIDE_ROLES_CIRUGIA_TB.MODIFIED_BY%TYPE
    ) IS
    BEGIN
        INSERT INTO FIDE_ROLES_CIRUGIA_TB (
            ID_ESTADO_FK,
            MEDICO_CIRUJANO,
            ASISTENTE_ANESTESIOLOGO,
            CREATED_BY,
            MODIFIED_BY
        ) VALUES (
            P_ID_ESTADO,
            P_MEDICO_CIRUJANO,
            P_ASISTENTE_ANESTESIOLOGO,
            P_CREATED_BY,
            P_MODIFIED_BY
        );
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
            
    END INSERT_ROLES_CIRUGIA_SP;

    PROCEDURE UPDATE_ROLES_CIRUGIA_SP(
        P_ID_ROL_CIRUGIA IN FIDE_ROLES_CIRUGIA_TB.ID_ROL_CIRUGIA_PK%TYPE,
        P_ID_ESTADO IN FIDE_ROLES_CIRUGIA_TB.ID_ESTADO_FK%TYPE,
        P_MEDICO_CIRUJANO IN FIDE_ROLES_CIRUGIA_TB.MEDICO_CIRUJANO%TYPE,
        P_ASISTENTE_ANESTESIOLOGO IN FIDE_ROLES_CIRUGIA_TB.ASISTENTE_ANESTESIOLOGO%TYPE,
        P_MODIFIED_BY IN FIDE_ROLES_CIRUGIA_TB.MODIFIED_BY%TYPE
    ) IS
    BEGIN
        UPDATE FIDE_ROLES_CIRUGIA_TB
        SET
            ID_ESTADO_FK = P_ID_ESTADO,
            MEDICO_CIRUJANO = P_MEDICO_CIRUJANO,
            ASISTENTE_ANESTESIOLOGO = P_ASISTENTE_ANESTESIOLOGO,
            MODIFIED_BY = P_MODIFIED_BY
        WHERE ID_ROL_CIRUGIA_PK = P_ID_ROL_CIRUGIA;
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
            
    END UPDATE_ROLES_CIRUGIA_SP;

    PROCEDURE DESACTIVAR_ROLES_CIRUGIA_SP(
        P_ID_ROL_CIRUGIA IN FIDE_ROLES_CIRUGIA_TB.ID_ROL_CIRUGIA_PK%TYPE
    ) IS
    BEGIN
        UPDATE FIDE_ROLES_CIRUGIA_TB
        SET
            ID_ESTADO_FK = 0
        WHERE ID_ROL_CIRUGIA_PK = P_ID_ROL_CIRUGIA;
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
            
    END DESACTIVAR_ROLES_CIRUGIA_SP;
    
    -------------- Creacion procedimiento de inserciones para FIDE_REGISTRO CIRUGIA ------------
    PROCEDURE INSERT_REGISTRO_CIRUGIA_SP(
        P_CIRUGIA_FECHA_INICIO IN FIDE_REGISTRO_CIRUGIAS_TB.CIRUGIA_FECHA_INICIO%TYPE,
        P_CIRUGIA_FECHA_FINAL IN FIDE_REGISTRO_CIRUGIAS_TB.CIRUGIA_FECHA_FINAL%TYPE,
        P_ID_ESTADO IN FIDE_REGISTRO_CIRUGIAS_TB.ID_ESTADO_FK%TYPE,
        P_ID_MASCOTA IN FIDE_REGISTRO_CIRUGIAS_TB.ID_MASCOTA_FK%TYPE,
        P_CIRUGIA_ANOTACIONES IN FIDE_REGISTRO_CIRUGIAS_TB.CIRUGIA_ANOTACIONES%TYPE,
        P_CIRUGIA_DIAG_PREVIO IN FIDE_REGISTRO_CIRUGIAS_TB.CIRUGIA_DIAG_PREVIO%TYPE,
        P_CIRUGIA_DIAG_POST IN FIDE_REGISTRO_CIRUGIAS_TB.CIRUGIA_DIAG_POST%TYPE,
        P_CREATED_BY IN FIDE_REGISTRO_CIRUGIAS_TB.CREATED_BY%TYPE,
        P_MODIFIED_BY IN FIDE_REGISTRO_CIRUGIAS_TB.MODIFIED_BY%TYPE
    ) IS
    BEGIN
        INSERT INTO FIDE_REGISTRO_CIRUGIAS_TB (
            CIRUGIA_FECHA_INICIO,
            CIRUGIA_FECHA_FINAL,
            ID_ESTADO_FK,
            ID_MASCOTA_FK,
            CIRUGIA_ANOTACIONES,
            CIRUGIA_DIAG_PREVIO,
            CIRUGIA_DIAG_POST,
            CREATED_BY,
            MODIFIED_BY
        ) VALUES (
            P_CIRUGIA_FECHA_INICIO,
            P_CIRUGIA_FECHA_FINAL,
            P_ID_ESTADO,
            P_ID_MASCOTA,
            P_CIRUGIA_ANOTACIONES,
            P_CIRUGIA_DIAG_PREVIO,
            P_CIRUGIA_DIAG_POST,
            P_CREATED_BY,
            P_MODIFIED_BY
        );
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
            
    END INSERT_REGISTRO_CIRUGIA_SP;

    PROCEDURE UPDATE_REGISTRO_CIRUGIA_SP(
        P_ID_CIRUGIA IN FIDE_REGISTRO_CIRUGIAS_TB.ID_CIRUGIA_PK%TYPE,
        P_CIRUGIA_FECHA_INICIO IN FIDE_REGISTRO_CIRUGIAS_TB.CIRUGIA_FECHA_INICIO%TYPE,
        P_CIRUGIA_FECHA_FINAL IN FIDE_REGISTRO_CIRUGIAS_TB.CIRUGIA_FECHA_FINAL%TYPE,
        P_ID_ESTADO IN FIDE_REGISTRO_CIRUGIAS_TB.ID_ESTADO_FK%TYPE,
        P_ID_MASCOTA IN FIDE_REGISTRO_CIRUGIAS_TB.ID_MASCOTA_FK%TYPE,
        P_CIRUGIA_ANOTACIONES IN FIDE_REGISTRO_CIRUGIAS_TB.CIRUGIA_ANOTACIONES%TYPE,
        P_CIRUGIA_DIAG_PREVIO IN FIDE_REGISTRO_CIRUGIAS_TB.CIRUGIA_DIAG_PREVIO%TYPE,
        P_CIRUGIA_DIAG_POST IN FIDE_REGISTRO_CIRUGIAS_TB.CIRUGIA_DIAG_POST%TYPE,
        P_MODIFIED_BY IN FIDE_REGISTRO_CIRUGIAS_TB.MODIFIED_BY%TYPE
    ) IS
    BEGIN
        UPDATE FIDE_REGISTRO_CIRUGIAS_TB
        SET
            CIRUGIA_FECHA_INICIO = P_CIRUGIA_FECHA_INICIO,
            CIRUGIA_FECHA_FINAL = P_CIRUGIA_FECHA_FINAL,
            ID_ESTADO_FK = P_ID_ESTADO,
            ID_MASCOTA_FK = P_ID_MASCOTA,
            CIRUGIA_ANOTACIONES = P_CIRUGIA_ANOTACIONES,
            CIRUGIA_DIAG_PREVIO = P_CIRUGIA_DIAG_PREVIO,
            CIRUGIA_DIAG_POST = P_CIRUGIA_DIAG_POST,
            MODIFIED_BY = P_MODIFIED_BY
        WHERE ID_CIRUGIA_PK = P_ID_CIRUGIA;
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END UPDATE_REGISTRO_CIRUGIA_SP;

    PROCEDURE DESACTIVAR_REGISTRO_CIRUGIA_SP(
        P_ID_CIRUGIA IN FIDE_REGISTRO_CIRUGIAS_TB.ID_CIRUGIA_PK%TYPE
    ) IS
    BEGIN
        UPDATE FIDE_REGISTRO_CIRUGIAS_TB
        SET
            ID_ESTADO_FK = 0
        WHERE ID_CIRUGIA_PK = P_ID_CIRUGIA;
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
            
    END DESACTIVAR_REGISTRO_CIRUGIA_SP;

  ------------- Creacion procedimiento de inserciones para FIDE_ORDEN_PRODUCTOS_TB ------------
    PROCEDURE INSERT_ORDEN_PRODUCTO_SP(
    P_ID_ORDEN_COMPRA_FK              IN FIDE_ORDEN_PRODUCTOS_TB.ID_ORDEN_COMPRA_FK%TYPE,
    P_ID_PRODUCTO_FK                  IN FIDE_ORDEN_PRODUCTOS_TB.ID_PRODUCTO_FK%TYPE,
    P_ID_ESTADO_FK                    IN FIDE_ORDEN_PRODUCTOS_TB.ID_ESTADO_FK%TYPE,
    P_ORDEN_PRODUCTO_CANTIDAD         IN FIDE_ORDEN_PRODUCTOS_TB.ORDEN_PRODUCTO_CANTIDAD%TYPE,
    P_ORDEN_PRODUCTO_PRECIO_UNITARIO IN FIDE_ORDEN_PRODUCTOS_TB.ORDEN_PRODUCTO_PRECIO_UNITARIO%TYPE,
    P_CREATED_BY                      IN FIDE_ORDEN_PRODUCTOS_TB.CREATED_BY%TYPE,
    P_MODIFIED_BY                     IN FIDE_ORDEN_PRODUCTOS_TB.MODIFIED_BY%TYPE
  )
  IS
  BEGIN
    INSERT INTO FIDE_ORDEN_PRODUCTOS_TB (
      ID_ORDEN_COMPRA_FK,
      ID_PRODUCTO_FK,
      ID_ESTADO_FK,
      ORDEN_PRODUCTO_CANTIDAD,
      ORDEN_PRODUCTO_PRECIO_UNITARIO,
      ORDEN_PRODUCTO_SUBTOTAL,
      CREATED_BY,
      MODIFIED_BY
    ) VALUES (
      P_ID_ORDEN_COMPRA_FK,
      P_ID_PRODUCTO_FK,
      P_ID_ESTADO_FK,
      P_ORDEN_PRODUCTO_CANTIDAD,
      P_ORDEN_PRODUCTO_PRECIO_UNITARIO,
      P_ORDEN_PRODUCTO_CANTIDAD * P_ORDEN_PRODUCTO_PRECIO_UNITARIO,
      P_CREATED_BY,
      P_MODIFIED_BY
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Orden de producto insertada con �xito.');
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error al insertar: ' || SQLERRM);
      
  END INSERT_ORDEN_PRODUCTO_SP;

  PROCEDURE UPDATE_ORDEN_PRODUCTO_SP(
    P_ID_ORDEN_COMPRA_FK              IN FIDE_ORDEN_PRODUCTOS_TB.ID_ORDEN_COMPRA_FK%TYPE,
    P_ID_PRODUCTO_FK                  IN FIDE_ORDEN_PRODUCTOS_TB.ID_PRODUCTO_FK%TYPE,
    P_ID_ESTADO_FK                    IN FIDE_ORDEN_PRODUCTOS_TB.ID_ESTADO_FK%TYPE,
    P_ORDEN_PRODUCTO_CANTIDAD         IN FIDE_ORDEN_PRODUCTOS_TB.ORDEN_PRODUCTO_CANTIDAD%TYPE,
    P_ORDEN_PRODUCTO_PRECIO_UNITARIO IN FIDE_ORDEN_PRODUCTOS_TB.ORDEN_PRODUCTO_PRECIO_UNITARIO%TYPE,
    P_MODIFIED_BY                     IN FIDE_ORDEN_PRODUCTOS_TB.MODIFIED_BY%TYPE
  )
  IS
  BEGIN
    UPDATE FIDE_ORDEN_PRODUCTOS_TB
    SET
      ID_ESTADO_FK = P_ID_ESTADO_FK,
      ORDEN_PRODUCTO_CANTIDAD = P_ORDEN_PRODUCTO_CANTIDAD,
      ORDEN_PRODUCTO_PRECIO_UNITARIO = P_ORDEN_PRODUCTO_PRECIO_UNITARIO,
      ORDEN_PRODUCTO_SUBTOTAL = P_ORDEN_PRODUCTO_CANTIDAD * P_ORDEN_PRODUCTO_PRECIO_UNITARIO,
      MODIFIED_BY = P_MODIFIED_BY
    WHERE ID_ORDEN_COMPRA_FK = P_ID_ORDEN_COMPRA_FK
      AND ID_PRODUCTO_FK = P_ID_PRODUCTO_FK;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Orden de producto actualizada con �xito.');
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error al actualizar: ' || SQLERRM);
      
  END UPDATE_ORDEN_PRODUCTO_SP;

  PROCEDURE DESACTIVAR_ORDEN_PRODUCTO_SP(
    P_ID_ORDEN_COMPRA_FK IN FIDE_ORDEN_PRODUCTOS_TB.ID_ORDEN_COMPRA_FK%TYPE,
    P_ID_PRODUCTO_FK     IN FIDE_ORDEN_PRODUCTOS_TB.ID_PRODUCTO_FK%TYPE
  )
  IS
  BEGIN
    UPDATE FIDE_ORDEN_PRODUCTOS_TB
    SET ID_ESTADO_FK = 0
    WHERE ID_ORDEN_COMPRA_FK = P_ID_ORDEN_COMPRA_FK
      AND ID_PRODUCTO_FK = P_ID_PRODUCTO_FK;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Orden de producto desactivada con �xito.');
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error al desactivar: ' || SQLERRM);
      
  END DESACTIVAR_ORDEN_PRODUCTO_SP;
    
------------- Creacion procedimiento de inserciones para CIRUGIA MEDICAMENTO TB ---

PROCEDURE INSERT_CIRUGIA_MEDICAMENTO_SP(
    P_ID_CIRUGIA_FK       IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.ID_CIRUGIA_FK%TYPE,
    P_ID_PRODUCTO_FK      IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.ID_PRODUCTO_FK%TYPE,
    P_ID_ESTADO_FK        IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.ID_ESTADO_FK%TYPE,
    P_ID_TIPO_VIA_FK      IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.ID_TIPO_VIA_FK%TYPE,
    P_DOSIS               IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.CIRUGIA_MEDICAMENTO_DOSIS%TYPE,
    P_CREATED_BY          IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.CREATED_BY%TYPE,
    P_MODIFIED_BY         IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.MODIFIED_BY%TYPE
  )
  IS
  BEGIN
    INSERT INTO FIDE_CIRUGIAS_MEDICAMENTOS_TB (
      ID_CIRUGIA_FK,
      ID_PRODUCTO_FK,
      ID_ESTADO_FK,
      ID_TIPO_VIA_FK,
      CIRUGIA_MEDICAMENTO_DOSIS,
      CREATED_BY,
      MODIFIED_BY
    ) VALUES (
      P_ID_CIRUGIA_FK,
      P_ID_PRODUCTO_FK,
      P_ID_ESTADO_FK,
      P_ID_TIPO_VIA_FK,
      P_DOSIS,
      P_CREATED_BY,
      P_MODIFIED_BY
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Medicamento agregado a cirug�a con �xito.');
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error al insertar: ' || SQLERRM);
  END INSERT_CIRUGIA_MEDICAMENTO_SP;
  
  PROCEDURE UPDATE_CIRUGIA_MEDICAMENTO_SP(
    P_ID_CIRUGIA_FK       IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.ID_CIRUGIA_FK%TYPE,
    P_ID_PRODUCTO_FK      IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.ID_PRODUCTO_FK%TYPE,
    P_ID_ESTADO_FK        IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.ID_ESTADO_FK%TYPE,
    P_ID_TIPO_VIA_FK      IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.ID_TIPO_VIA_FK%TYPE,
    P_DOSIS               IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.CIRUGIA_MEDICAMENTO_DOSIS%TYPE,
    P_MODIFIED_BY         IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.MODIFIED_BY%TYPE
  )
  IS
  BEGIN
    UPDATE FIDE_CIRUGIAS_MEDICAMENTOS_TB
    SET
      ID_ESTADO_FK = P_ID_ESTADO_FK,
      ID_TIPO_VIA_FK = P_ID_TIPO_VIA_FK,
      CIRUGIA_MEDICAMENTO_DOSIS = P_DOSIS,
      MODIFIED_BY = P_MODIFIED_BY
    WHERE ID_CIRUGIA_FK = P_ID_CIRUGIA_FK
      AND ID_PRODUCTO_FK = P_ID_PRODUCTO_FK;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Medicamento de cirug�a actualizado con �xito.');
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error al actualizar: ' || SQLERRM);
      
  END UPDATE_CIRUGIA_MEDICAMENTO_SP;

  PROCEDURE DESACTIVAR_CIRUGIA_MEDICAMENTO_SP(
    P_ID_CIRUGIA_FK IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.ID_CIRUGIA_FK%TYPE,
    P_ID_PRODUCTO_FK IN FIDE_CIRUGIAS_MEDICAMENTOS_TB.ID_PRODUCTO_FK%TYPE
  )
  IS
  BEGIN
    UPDATE FIDE_CIRUGIAS_MEDICAMENTOS_TB
    SET ID_ESTADO_FK = 0
    WHERE ID_CIRUGIA_FK = P_ID_CIRUGIA_FK
      AND ID_PRODUCTO_FK = P_ID_PRODUCTO_FK;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Medicamento desactivado de cirug�a con �xito.');
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error al desactivar: ' || SQLERRM);
  END DESACTIVAR_CIRUGIA_MEDICAMENTO_SP;

-----
PROCEDURE INSERT_CIRUGIA_PERSONAL_SP(
    P_ID_CIRUGIA_FK              IN FIDE_CIRUGIAS_PERSONAL_TB.ID_CIRUGIA_FK%TYPE,
    P_ID_USUARIO_FK              IN FIDE_CIRUGIAS_PERSONAL_TB.ID_USUARIO_FK%TYPE,
    P_ID_ROL_CIRUGIA_FK          IN FIDE_CIRUGIAS_PERSONAL_TB.ID_ROL_CIRUGIA_FK%TYPE,
    P_ID_ESTADO_FK               IN FIDE_CIRUGIAS_PERSONAL_TB.ID_ESTADO_FK%TYPE,
    P_ID_TIPO_USUARIO_FK         IN FIDE_CIRUGIAS_PERSONAL_TB.ID_TIPO_USUARIO_FK%TYPE,
    P_ANOTACIONES                IN FIDE_CIRUGIAS_PERSONAL_TB.ANOTACIONES_ADICIONALES%TYPE,
    P_CREATED_BY                 IN FIDE_CIRUGIAS_PERSONAL_TB.CREATED_BY%TYPE,
    P_MODIFIED_BY                IN FIDE_CIRUGIAS_PERSONAL_TB.MODIFIED_BY%TYPE
  ) IS
  BEGIN
    INSERT INTO FIDE_CIRUGIAS_PERSONAL_TB (
      ID_CIRUGIA_FK,
      ID_USUARIO_FK,
      ID_ROL_CIRUGIA_FK,
      ID_ESTADO_FK,
      ID_TIPO_USUARIO_FK,
      ANOTACIONES_ADICIONALES,
      CREATED_BY,
      MODIFIED_BY
    ) VALUES (
      P_ID_CIRUGIA_FK,
      P_ID_USUARIO_FK,
      P_ID_ROL_CIRUGIA_FK,
      P_ID_ESTADO_FK,
      P_ID_TIPO_USUARIO_FK,
      P_ANOTACIONES,
      P_CREATED_BY,
      P_MODIFIED_BY
    );
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Personal de cirugia agregado con �xito.');
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error al insertar: ' || SQLERRM);
  END;

PROCEDURE UPDATE_CIRUGIA_PERSONAL_SP(
    P_ID_CIRUGIA_FK              IN FIDE_CIRUGIAS_PERSONAL_TB.ID_CIRUGIA_FK%TYPE,
    P_ID_USUARIO_FK              IN FIDE_CIRUGIAS_PERSONAL_TB.ID_USUARIO_FK%TYPE,
    P_ID_ROL_CIRUGIA_FK          IN FIDE_CIRUGIAS_PERSONAL_TB.ID_ROL_CIRUGIA_FK%TYPE,
    P_ID_ESTADO_FK               IN FIDE_CIRUGIAS_PERSONAL_TB.ID_ESTADO_FK%TYPE,
    P_ID_TIPO_USUARIO_FK         IN FIDE_CIRUGIAS_PERSONAL_TB.ID_TIPO_USUARIO_FK%TYPE,
    P_ANOTACIONES                IN FIDE_CIRUGIAS_PERSONAL_TB.ANOTACIONES_ADICIONALES%TYPE,
    P_MODIFIED_BY                IN FIDE_CIRUGIAS_PERSONAL_TB.MODIFIED_BY%TYPE
  ) IS
  BEGIN
    UPDATE FIDE_CIRUGIAS_PERSONAL_TB
    SET
      ID_ESTADO_FK = P_ID_ESTADO_FK,
      ID_TIPO_USUARIO_FK = P_ID_TIPO_USUARIO_FK,
      ANOTACIONES_ADICIONALES = P_ANOTACIONES,
      MODIFIED_BY = P_MODIFIED_BY
    WHERE ID_CIRUGIA_FK = P_ID_CIRUGIA_FK
      AND ID_USUARIO_FK = P_ID_USUARIO_FK
      AND ID_ROL_CIRUGIA_FK = P_ID_ROL_CIRUGIA_FK;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Personal de cirug�a actualizado con �xito.');
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error al actualizar: ' || SQLERRM);
  END;
  
  PROCEDURE DESACTIVAR_CIRUGIA_PERSONAL_SP(
    P_ID_CIRUGIA_FK              IN FIDE_CIRUGIAS_PERSONAL_TB.ID_CIRUGIA_FK%TYPE,
    P_ID_USUARIO_FK              IN FIDE_CIRUGIAS_PERSONAL_TB.ID_USUARIO_FK%TYPE,
    P_ID_ROL_CIRUGIA_FK          IN FIDE_CIRUGIAS_PERSONAL_TB.ID_ROL_CIRUGIA_FK%TYPE
  ) IS
  BEGIN
    UPDATE FIDE_CIRUGIAS_PERSONAL_TB
    SET ID_ESTADO_FK = 0
    WHERE ID_CIRUGIA_FK = P_ID_CIRUGIA_FK
      AND ID_USUARIO_FK = P_ID_USUARIO_FK
      AND ID_ROL_CIRUGIA_FK = P_ID_ROL_CIRUGIA_FK;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Personal de cirugia desactivado con �xito.');
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error al desactivar: ' || SQLERRM);
  END;

---
PROCEDURE INSERT_HISTORIAL_MEDICO_SP(
    P_ID_MASCOTA_FK            IN FIDE_HISTORIALES_MEDICOS_TB.ID_MASCOTA_FK%TYPE,
    P_ID_CONSULTA_FK           IN FIDE_HISTORIALES_MEDICOS_TB.ID_CONSULTA_FK%TYPE,
    P_ID_USUARIO_FK            IN FIDE_HISTORIALES_MEDICOS_TB.ID_USUARIO_FK%TYPE,
    P_ID_TIPO_USUARIO_FK       IN FIDE_HISTORIALES_MEDICOS_TB.ID_TIPO_USUARIO_FK%TYPE,
    P_ID_ESTADO_FK             IN FIDE_HISTORIALES_MEDICOS_TB.ID_ESTADO_FK%TYPE,
    P_FECHA_REGISTRO           IN FIDE_HISTORIALES_MEDICOS_TB.HISTORIAL_FECHA_REGISTRO%TYPE,
    P_DIAGNOSTICO              IN FIDE_HISTORIALES_MEDICOS_TB.HISTORIAL_DIAGNOSTICO%TYPE,
    P_TRATAMIENTO              IN FIDE_HISTORIALES_MEDICOS_TB.HISTORIAL_TRATAMIENTO%TYPE,
    P_NOTAS                    IN FIDE_HISTORIALES_MEDICOS_TB.HISTORIAL_NOTAS%TYPE,
    P_CREATED_BY               IN FIDE_HISTORIALES_MEDICOS_TB.CREATED_BY%TYPE,
    P_MODIFIED_BY              IN FIDE_HISTORIALES_MEDICOS_TB.MODIFIED_BY%TYPE
  ) IS
  BEGIN
    INSERT INTO FIDE_HISTORIALES_MEDICOS_TB (
      ID_MASCOTA_FK,
      ID_CONSULTA_FK,
      ID_USUARIO_FK,
      ID_TIPO_USUARIO_FK,
      ID_ESTADO_FK,
      HISTORIAL_FECHA_REGISTRO,
      HISTORIAL_DIAGNOSTICO,
      HISTORIAL_TRATAMIENTO,
      HISTORIAL_NOTAS,
      CREATED_BY,
      MODIFIED_BY
    ) VALUES (
      P_ID_MASCOTA_FK,
      P_ID_CONSULTA_FK,
      P_ID_USUARIO_FK,
      P_ID_TIPO_USUARIO_FK,
      P_ID_ESTADO_FK,
      P_FECHA_REGISTRO,
      P_DIAGNOSTICO,
      P_TRATAMIENTO,
      P_NOTAS,
      P_CREATED_BY,
      P_MODIFIED_BY
    );
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Historial medico agregado con �xito.');
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error al insertar: ' || SQLERRM);
  END;

  PROCEDURE UPDATE_HISTORIAL_MEDICO_SP(
    P_ID_MASCOTA_FK            IN FIDE_HISTORIALES_MEDICOS_TB.ID_MASCOTA_FK%TYPE,
    P_ID_CONSULTA_FK           IN FIDE_HISTORIALES_MEDICOS_TB.ID_CONSULTA_FK%TYPE,
    P_ID_USUARIO_FK            IN FIDE_HISTORIALES_MEDICOS_TB.ID_USUARIO_FK%TYPE,
    P_ID_TIPO_USUARIO_FK       IN FIDE_HISTORIALES_MEDICOS_TB.ID_TIPO_USUARIO_FK%TYPE,
    P_ID_ESTADO_FK             IN FIDE_HISTORIALES_MEDICOS_TB.ID_ESTADO_FK%TYPE,
    P_FECHA_REGISTRO           IN FIDE_HISTORIALES_MEDICOS_TB.HISTORIAL_FECHA_REGISTRO%TYPE,
    P_DIAGNOSTICO              IN FIDE_HISTORIALES_MEDICOS_TB.HISTORIAL_DIAGNOSTICO%TYPE,
    P_TRATAMIENTO              IN FIDE_HISTORIALES_MEDICOS_TB.HISTORIAL_TRATAMIENTO%TYPE,
    P_NOTAS                    IN FIDE_HISTORIALES_MEDICOS_TB.HISTORIAL_NOTAS%TYPE,
    P_MODIFIED_BY              IN FIDE_HISTORIALES_MEDICOS_TB.MODIFIED_BY%TYPE
  ) IS
  BEGIN
    UPDATE FIDE_HISTORIALES_MEDICOS_TB
    SET
      ID_USUARIO_FK = P_ID_USUARIO_FK,
      ID_TIPO_USUARIO_FK = P_ID_TIPO_USUARIO_FK,
      ID_ESTADO_FK = P_ID_ESTADO_FK,
      HISTORIAL_FECHA_REGISTRO = P_FECHA_REGISTRO,
      HISTORIAL_DIAGNOSTICO = P_DIAGNOSTICO,
      HISTORIAL_TRATAMIENTO = P_TRATAMIENTO,
      HISTORIAL_NOTAS = P_NOTAS,
      MODIFIED_BY = P_MODIFIED_BY
    WHERE ID_MASCOTA_FK = P_ID_MASCOTA_FK
      AND ID_CONSULTA_FK = P_ID_CONSULTA_FK;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Historial medico actualizado con �xito.');
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error al actualizar: ' || SQLERRM);

  END;

  PROCEDURE DESACTIVAR_HISTORIAL_MEDICO_SP(
    P_ID_MASCOTA_FK            IN FIDE_HISTORIALES_MEDICOS_TB.ID_MASCOTA_FK%TYPE,
    P_ID_CONSULTA_FK           IN FIDE_HISTORIALES_MEDICOS_TB.ID_CONSULTA_FK%TYPE
  ) IS
  BEGIN
    UPDATE FIDE_HISTORIALES_MEDICOS_TB
    SET ID_ESTADO_FK = 0
    WHERE ID_MASCOTA_FK = P_ID_MASCOTA_FK
      AND ID_CONSULTA_FK = P_ID_CONSULTA_FK;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Historial medico desactivado con �xito.');
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error al desactivar: ' || SQLERRM);
  END;
  -------------- Creacion procedimiento de inserciones para FIDE DETALLE FACTURA ------------
    
    PROCEDURE INSERT_DETALLE_FACTURA_SP(
    P_ID_FACTURA_FK     IN FIDE_DETALLE_FACTURA_TB.ID_FACTURA_FK%TYPE,
    P_LINEA             IN FIDE_DETALLE_FACTURA_TB.LINEA%TYPE,
    P_ESTADO            IN FIDE_DETALLE_FACTURA_TB.ID_ESTADO_FK%TYPE,
    P_ID_PRODUCTO_FK    IN FIDE_DETALLE_FACTURA_TB.ID_PRODUCTO_FK%TYPE,
    P_MONTO_UNITARIO    IN FIDE_DETALLE_FACTURA_TB.MONTO_UNITARIO%TYPE,
    P_CANTIDAD          IN FIDE_DETALLE_FACTURA_TB.CANTIDAD%TYPE,
    P_CREATED_BY        IN FIDE_DETALLE_FACTURA_TB.CREATED_BY%TYPE,
    P_MODIFIED_BY       IN FIDE_DETALLE_FACTURA_TB.MODIFIED_BY%TYPE
  )
  IS
  BEGIN
    INSERT INTO FIDE_DETALLE_FACTURA_TB(
      ID_FACTURA_FK,
      LINEA,
      ID_ESTADO_FK,
      ID_PRODUCTO_FK,
      MONTO_UNITARIO,
      CANTIDAD,
      TOTAL,
      CREATED_BY,
      MODIFIED_BY
    )
    VALUES (
      P_ID_FACTURA_FK,
      P_LINEA,
      P_ESTADO,
      P_ID_PRODUCTO_FK,
      P_MONTO_UNITARIO,
      P_CANTIDAD,
      P_MONTO_UNITARIO * P_CANTIDAD,
      P_CREATED_BY,
      P_MODIFIED_BY
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Datos insertados con �xito.');
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('No se encontraron registros para insertar.');
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error al insertar: ' || SQLERRM);
      
  END INSERT_DETALLE_FACTURA_SP;

  PROCEDURE UPDATE_DETALLE_FACTURA_SP(
  P_ID_FACTURA_FK     IN FIDE_DETALLE_FACTURA_TB.ID_FACTURA_FK%TYPE,
  P_LINEA             IN FIDE_DETALLE_FACTURA_TB.LINEA%TYPE,
  P_ESTADO            IN FIDE_DETALLE_FACTURA_TB.ID_ESTADO_FK%TYPE,
  P_ID_PRODUCTO_FK    IN FIDE_DETALLE_FACTURA_TB.ID_PRODUCTO_FK%TYPE,
  P_MONTO_UNITARIO    IN FIDE_DETALLE_FACTURA_TB.MONTO_UNITARIO%TYPE,
  P_CANTIDAD          IN FIDE_DETALLE_FACTURA_TB.CANTIDAD%TYPE,
  P_MODIFIED_BY       IN FIDE_DETALLE_FACTURA_TB.MODIFIED_BY%TYPE
)
IS
BEGIN
  UPDATE FIDE_DETALLE_FACTURA_TB
  SET
    ID_PRODUCTO_FK    = P_ID_PRODUCTO_FK,
    MONTO_UNITARIO    = P_MONTO_UNITARIO,
    CANTIDAD          = P_CANTIDAD,
    TOTAL             = P_MONTO_UNITARIO * P_CANTIDAD,
    MODIFIED_BY       = P_MODIFIED_BY
  WHERE ID_FACTURA_FK = P_ID_FACTURA_FK
    AND LINEA = P_LINEA;

  DBMS_OUTPUT.PUT_LINE('Registro actualizado con �xito.');
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error al actualizar el registro: ' || SQLERRM);
END UPDATE_DETALLE_FACTURA_SP;

  PROCEDURE DESACTIVAR_DETALLE_FACTURA_SP(
  P_ID_FACTURA_FK IN FIDE_DETALLE_FACTURA_TB.ID_FACTURA_FK%TYPE,
  P_LINEA         IN FIDE_DETALLE_FACTURA_TB.LINEA%TYPE
)
IS
BEGIN
  UPDATE FIDE_DETALLE_FACTURA_TB
  SET ID_ESTADO_FK = 0
  WHERE ID_FACTURA_FK = P_ID_FACTURA_FK
    AND LINEA = P_LINEA;

  DBMS_OUTPUT.PUT_LINE('Registro desactivado con �xito.');
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error al desactivar el registro: ' || SQLERRM);
    
END DESACTIVAR_DETALLE_FACTURA_SP; 

------------SELECTS BODY ---------
PROCEDURE FIDE_CONSULTA_MOTIVO_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_CONSULTA_MOTIVO_PK, ID_ESTADO_FK, DESCRIPCION_MOTIVO, CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE, ACCION
            
        FROM FIDE_CONSULTA_MOTIVO_TB;
        
    END;
        
    
    PROCEDURE FIDE_CONSULTAS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    
        BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_CONSULTA_PK, CONSULTA_FECHA, ID_CONSULTA_MOTIVO_FK, ID_ESTADO_FK, ID_MASCOTA_FK, ID_USUARIO_FK, CONSULTA_OBSERVACIONES, CREATED_BY, 
                   CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE, ACCION
            
        FROM FIDE_CONSULTAS_TB;
        
    END;
    
    
    PROCEDURE FIDE_FACTURACIONES_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_FACTURA_PK, ID_CONSULTA_FK, ID_ESTADO_FK, FACTURA_FECHA_EMISION, FACTURA_MONTO_TOTAL, FACTURA_DESCUENTO, FACTURA_IMPUESTOS, 
            FACTURA_MONTO_FINAL, FACTURA_SUBTOTAL, CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE, ACCION
            
        FROM FIDE_FACTURACIONES_TB;
        
    END;

    PROCEDURE FIDE_PROVEEDORES_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_PROVEEDOR_PK, ID_ESTADO_FK, ID_DIRECCION_FK, ID_TELEFONO_CONTACTO_FK, PROVEEDOR_NOMBRE, PROVEEDOR_CORREO, PROVEEDOR_DESCRIPCION_PRODUCTOS, 
            CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE, ACCION
            
        FROM FIDE_PROVEEDORES_TB;
        
    END;
    
    PROCEDURE FIDE_PRODUCTOS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_PRODUCTO_PK, ID_PROVEEDOR_FK, ID_ESTADO_FK, PRODUCTO_NOMBRE, PRODUCTO_DESCRIPCION, PRODUCTO_PRECIO_UNITARIO, PRODUCTO_STOCK, 
            CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE, ACCION
            
        FROM FIDE_PRODUCTOS_TB;
        
    END;
    
    PROCEDURE FIDE_DETALLE_FACTURA_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_FACTURA_FK, LINEA, ID_PRODUCTO_FK, MONTO_UNITARIO, CANTIDAD, TOTAL, CREATED_BY, 
                   CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE, ACCION
            
        FROM FIDE_DETALLE_FACTURA_TB;
        
    END;
    
    PROCEDURE FIDE_ORDEN_COMPRA_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_ORDEN_COMPRA_PK, ID_PROVEEDOR_FK, ID_ESTADO_FK, ORDEN_COMPRA_FECHA, ORDEN_COMPRA_PRECIO_TOTAL, CREATED_BY, 
                   CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE, ACCION
            
        FROM FIDE_ORDEN_COMPRA_TB;
        
    END;

END PROYECTO_FUNCIONES_PROCEDIMIENTOS_PKG;


/*------------------------------------------------------------------------------
-----------------------------CREACION SECUENCIAS--------------------------------
------------------------------------------------------------------------------*/

-- Secuencia ID_DIRECCION_PK_SEQ
CREATE SEQUENCE ID_DIRECCION_PK_SEQ START WITH 1 INCREMENT BY 1;
/
-- Secuencia ID_TELEFONO_CONTACTO_PK_SEQ
CREATE SEQUENCE ID_TELEFONO_CONTACTO_PK_SEQ START WITH 1 INCREMENT BY 1;
/
-- Secuencia ID_TIPO_USUARIO_PK_SEQ
CREATE SEQUENCE ID_TIPO_USUARIO_PK_SEQ START WITH 1 INCREMENT BY 1;
/
-- Secuencia ID_ESPECIALIDAD_PK_SEQ
CREATE SEQUENCE ID_ESPECIALIDAD_PK_SEQ START WITH 1 INCREMENT BY 1;
/
-- Secuencia ID_USUARIO_PK_SEQ
CREATE SEQUENCE ID_USUARIO_PK_SEQ START WITH 1 INCREMENT BY 1;
/
-- Secuencia ID_MASCOTA_ESPECIE_PK_SEQ
CREATE SEQUENCE ID_MASCOTA_ESPECIE_PK_SEQ START WITH 1 INCREMENT BY 1;
/
-- Secuencia ID_MASCOTA_RAZA_PK_SEQ
CREATE SEQUENCE ID_MASCOTA_RAZA_PK_SEQ START WITH 1 INCREMENT BY 1;
/
-- Secuencia ID_MASCOTA_PK_SEQ
CREATE SEQUENCE ID_MASCOTA_PK_SEQ START WITH 1 INCREMENT BY 1;
/
-- Secuencia ID_TIPO_EXAMEN_PK_SEQ
CREATE SEQUENCE ID_TIPO_EXAMEN_PK_SEQ START WITH 1 INCREMENT BY 1;
/
-- Secuencia ID_EXAMEN_PK_SEQ
CREATE SEQUENCE ID_EXAMEN_PK_SEQ START WITH 1 INCREMENT BY 1;
/
-- Secuencia ID_CONSULTA_MOTIVO_PK_SEQ
CREATE SEQUENCE ID_CONSULTA_MOTIVO_PK_SEQ START WITH 1 INCREMENT BY 1;
/
-- Secuencia ID_CONSULTA_PK_SEQ
CREATE SEQUENCE ID_CONSULTA_PK_SEQ START WITH 1 INCREMENT BY 1;
/
-- Secuencia ID_FACTURA_PK_SEQ
CREATE SEQUENCE ID_FACTURA_PK_SEQ START WITH 1 INCREMENT BY 1;
/
-- Secuencia ID_PROVEEDOR_PK_SEQ
CREATE SEQUENCE ID_PROVEEDOR_PK_SEQ START WITH 1 INCREMENT BY 1;
/
-- Secuencia ID_PRODUCTO_PK_SEQ
CREATE SEQUENCE ID_PRODUCTO_PK_SEQ START WITH 1 INCREMENT BY 1;
/
-- Secuencia ID_ORDEN_COMPRA_PK_SEQ
CREATE SEQUENCE ID_ORDEN_COMPRA_PK_SEQ START WITH 1 INCREMENT BY 1;
/
-- Secuencia ID_TIPO_VIA_PK_SEQ
CREATE SEQUENCE ID_TIPO_VIA_PK_SEQ START WITH 1 INCREMENT BY 1;
/
-- Secuencia ID_ROL_CIRUGIA_PK_SEQ
CREATE SEQUENCE ID_ROL_CIRUGIA_PK_SEQ START WITH 1 INCREMENT BY 1;
/
-- Secuencia ID_CIRUGIA_PK_SEQ
CREATE SEQUENCE ID_CIRUGIA_PK_SEQ START WITH 1 INCREMENT BY 1;
/
-- Secuencia ID_PAGO_PLANILLA_PK_SEQ
CREATE SEQUENCE ID_PAGO_PLANILLA_PK_SEQ START WITH 1 INCREMENT BY 1;
/
/*------------------------------------------------------------------------------
------------------------------CREACION TRIGGERS---------------------------------
------------------------------------------------------------------------------*/

-- Trigger FIDE_DIRECCION_TB_TRG
CREATE OR REPLACE TRIGGER FIDE_DIRECCION_TB_TRG
BEFORE INSERT ON FIDE_DIRECCION_TB
FOR EACH ROW
BEGIN
    :NEW.ID_DIRECCION_PK := ID_DIRECCION_PK_SEQ.NEXTVAL;
END;
/
-- Trigger FIDE_TELEFONO_CONTACTO_TB_TRG
CREATE OR REPLACE TRIGGER FIDE_TELEFONO_CONTACTO_TB_TRG
BEFORE INSERT ON FIDE_TELEFONO_CONTACTO_TB
FOR EACH ROW
BEGIN
    :NEW.ID_TELEFONO_CONTACTO_PK := ID_TELEFONO_CONTACTO_PK_SEQ.NEXTVAL;
END;
/
-- Trigger FIDE_TIPO_USUARIO_TB_TRG
CREATE OR REPLACE TRIGGER FIDE_TIPO_USUARIO_TB_TRG
BEFORE INSERT ON FIDE_TIPO_USUARIO_TB
FOR EACH ROW
BEGIN
    :NEW.ID_TIPO_USUARIO_PK := ID_TIPO_USUARIO_PK_SEQ.NEXTVAL;
END;
/
-- Trigger FIDE_ESPECIALIDAD_TB_TRG
CREATE OR REPLACE TRIGGER FIDE_ESPECIALIDAD_TB_TRG
BEFORE INSERT ON FIDE_ESPECIALIDAD_TB
FOR EACH ROW
BEGIN
    :NEW.ID_ESPECIALIDAD_PK := ID_ESPECIALIDAD_PK_SEQ.NEXTVAL;
END;
/
-- Trigger FIDE_USUARIOS_TB_TRG
CREATE OR REPLACE TRIGGER FIDE_USUARIOS_TB_TRG
BEFORE INSERT ON FIDE_USUARIOS_TB
FOR EACH ROW
BEGIN
    :NEW.ID_USUARIO_PK := ID_USUARIO_PK_SEQ.NEXTVAL;
END;
/
-- Trigger FIDE_MASCOTA_ESPECIE_TB_TRG
CREATE OR REPLACE TRIGGER FIDE_MASCOTA_ESPECIE_TB_TRG
BEFORE INSERT ON FIDE_MASCOTA_ESPECIE_TB
FOR EACH ROW
BEGIN
    :NEW.ID_MASCOTA_ESPECIE_PK := ID_MASCOTA_ESPECIE_PK_SEQ.NEXTVAL;
END;
/
-- Trigger FIDE_MASCOTA_RAZA_TB_TRG
CREATE OR REPLACE TRIGGER FIDE_MASCOTA_RAZA_TB_TRG
BEFORE INSERT ON FIDE_MASCOTA_RAZA_TB
FOR EACH ROW
BEGIN
    :NEW.ID_MASCOTA_RAZA_PK := ID_MASCOTA_RAZA_PK_SEQ.NEXTVAL;
END;
/
-- Trigger FIDE_MASCOTA_TB_TRG
CREATE OR REPLACE TRIGGER FIDE_MASCOTA_TB_TRG
BEFORE INSERT ON FIDE_MASCOTA_TB
FOR EACH ROW
BEGIN
    :NEW.ID_MASCOTA_PK := ID_MASCOTA_PK_SEQ.NEXTVAL;
END;
/
-- Trigger FIDE_TIPO_EXAMEN_TB_TRG
CREATE OR REPLACE TRIGGER FIDE_TIPO_EXAMEN_TB_TRG
BEFORE INSERT ON FIDE_TIPO_EXAMEN_TB
FOR EACH ROW
BEGIN
    :NEW.ID_TIPO_EXAMEN_PK := ID_TIPO_EXAMEN_PK_SEQ.NEXTVAL;
END;
/
-- Trigger FIDE_EXAMENES_TB_TRG
CREATE OR REPLACE TRIGGER FIDE_EXAMENES_TB_TRG
BEFORE INSERT ON FIDE_EXAMENES_TB
FOR EACH ROW
BEGIN
    :NEW.ID_EXAMEN_PK := ID_EXAMEN_PK_SEQ.NEXTVAL;
END;
/
-- Trigger FIDE_CONSULTA_MOTIVO_TB_TRG
CREATE OR REPLACE TRIGGER FIDE_CONSULTA_MOTIVO_TB_TRG
BEFORE INSERT ON FIDE_CONSULTA_MOTIVO_TB
FOR EACH ROW
BEGIN
    :NEW.ID_CONSULTA_MOTIVO_PK := ID_CONSULTA_MOTIVO_PK_SEQ.NEXTVAL;
END;
/
-- Trigger FIDE_CONSULTAS_TB_TRG
CREATE OR REPLACE TRIGGER FIDE_CONSULTAS_TB_TRG
BEFORE INSERT ON FIDE_CONSULTAS_TB
FOR EACH ROW
BEGIN
    :NEW.ID_CONSULTA_PK := ID_CONSULTA_PK_SEQ.NEXTVAL;
END;
/
-- Trigger FIDE_FACTURACIONES_TB_TRG
CREATE OR REPLACE TRIGGER FIDE_FACTURACIONES_TB_TRG
BEFORE INSERT ON FIDE_FACTURACIONES_TB
FOR EACH ROW
BEGIN
    :NEW.ID_FACTURA_PK := ID_FACTURA_PK_FN();
END;
/
-- Trigger FIDE_PROVEEDORES_TB_TRG
CREATE OR REPLACE TRIGGER FIDE_PROVEEDORES_TB_TRG
BEFORE INSERT ON FIDE_PROVEEDORES_TB
FOR EACH ROW
BEGIN
    :NEW.ID_PROVEEDOR_PK := ID_PROVEEDOR_PK_SEQ.NEXTVAL;
END;
/
-- Trigger FIDE_PRODUCTOS_TB_TRG
CREATE OR REPLACE TRIGGER FIDE_PRODUCTOS_TB_TRG
BEFORE INSERT ON FIDE_PRODUCTOS_TB
FOR EACH ROW
BEGIN
    :NEW.ID_PRODUCTO_PK := ID_PRODUCTO_PK_SEQ.NEXTVAL;
END;
/
-- Trigger FIDE_ORDEN_COMPRA_TB_TRG
CREATE OR REPLACE TRIGGER FIDE_ORDEN_COMPRA_TB_TRG
BEFORE INSERT ON FIDE_ORDEN_COMPRA_TB
FOR EACH ROW
BEGIN
    :NEW.ID_ORDEN_COMPRA_PK := ID_ORDEN_COMPRA_PK_SEQ.NEXTVAL;
END;
/
-- Trigger FIDE_TIPO_VIA_TB_TRG
CREATE OR REPLACE TRIGGER FIDE_TIPO_VIA_TB_TRG
BEFORE INSERT ON FIDE_TIPO_VIA_TB
FOR EACH ROW
BEGIN
    :NEW.ID_TIPO_VIA_PK := ID_TIPO_VIA_PK_SEQ.NEXTVAL;
END;
/
-- Trigger FIDE_ROLES_CIRUGIA_TB_TRG
CREATE OR REPLACE TRIGGER FIDE_ROLES_CIRUGIA_TB_TRG
BEFORE INSERT ON FIDE_ROLES_CIRUGIA_TB
FOR EACH ROW
BEGIN
    :NEW.ID_ROL_CIRUGIA_PK := ID_ROL_CIRUGIA_PK_SEQ.NEXTVAL;
END;
/
-- Trigger FIDE_REGISTRO_CIRUGIAS_TB_TRG
CREATE OR REPLACE TRIGGER FIDE_REGISTRO_CIRUGIAS_TB_TRG
BEFORE INSERT ON FIDE_REGISTRO_CIRUGIAS_TB
FOR EACH ROW
BEGIN
    :NEW.ID_CIRUGIA_PK := ID_CIRUGIA_PK_SEQ.NEXTVAL;
END;
/
-- Trigger FIDE_PAGOS_PLANILLAS_TB_TRG
CREATE OR REPLACE TRIGGER FIDE_PAGOS_PLANILLAS_TB_TRG
BEFORE INSERT ON FIDE_PAGOS_PLANILLAS_TB
FOR EACH ROW
BEGIN
    :NEW.ID_PAGO_PLANILLA_PK := ID_PAGO_PLANILLA_PK_SEQ.NEXTVAL;
END;
/
-- Accion FIDE_ESTADO_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_ESTADO_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_ESTADO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
    :NEW.ACCION:='INSERT';
    ELSIF UPDATING THEN
    :NEW.ACCION:='UPDATE';
    END IF;
END;
/
-- Accion FIDE_DIRECCION_PROVINCIA_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_DIRECCION_PROVINCIA_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_DIRECCION_PROVINCIA_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
    :NEW.ACCION:='INSERT';
    ELSIF UPDATING THEN
    :NEW.ACCION:='UPDATE';
    END IF;
END;
/
-- Accion FIDE_DIRECCION_CANTON_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_DIRECCION_CANTON_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_DIRECCION_CANTON_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_DIRECCION_DISTRITO_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_DIRECCION_DISTRITO_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_DIRECCION_DISTRITO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_DIRECCION_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_DIRECCION_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_DIRECCION_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_TELEFONO_CONTACTO_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_TELEFONO_CONTACTO_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_TELEFONO_CONTACTO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_TIPO_USUARIO_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_TIPO_USUARIO_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_TIPO_USUARIO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_ESPECIALIDAD_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_ESPECIALIDAD_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_ESPECIALIDAD_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_USUARIOS_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_USUARIOS_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_USUARIOS_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_MASCOTA_ESPECIE_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_MASCOTA_ESPECIE_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_MASCOTA_ESPECIE_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_MASCOTA_RAZA_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_MASCOTA_RAZA_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_MASCOTA_RAZA_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_MASCOTA_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_MASCOTA_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_MASCOTA_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_TIPO_EXAMEN_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_TIPO_EXAMEN_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_TIPO_EXAMEN_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_EXAMENES_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_EXAMENES_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_EXAMENES_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_CONSULTA_MOTIVO_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_CONSULTA_MOTIVO_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_CONSULTA_MOTIVO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_CONSULTAS_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_CONSULTAS_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_CONSULTAS_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_FACTURACIONES_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_FACTURACIONES_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_FACTURACIONES_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_PROVEEDORES_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_PROVEEDORES_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_PROVEEDORES_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_PRODUCTOS_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_PRODUCTOS_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_PRODUCTOS_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_DETALLE_FACTURA_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_DETALLE_FACTURA_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_DETALLE_FACTURA_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_ORDEN_PRODUCTOS_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_ORDEN_PRODUCTOS_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_ORDEN_PRODUCTOS_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_ORDEN_COMPRA_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_ORDEN_COMPRA_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_ORDEN_COMPRA_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_TIPO_VIA_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_TIPO_VIA_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_TIPO_VIA_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_ROLES_CIRUGIA_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_ROLES_CIRUGIA_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_ROLES_CIRUGIA_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_REGISTRO_CIRUGIAS_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_REGISTRO_CIRUGIAS_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_REGISTRO_CIRUGIAS_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_CIRUGIAS_MEDICAMENTOS_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_CIRUGIAS_MEDICAMENTOS_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_CIRUGIAS_MEDICAMENTOS_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_CIRUGIAS_PERSONAL_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_CIRUGIAS_PERSONAL_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_CIRUGIAS_PERSONAL_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_HISTORIALES_MEDICOS_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_HISTORIALES_MEDICOS_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_HISTORIALES_MEDICOS_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Accion FIDE_PAGOS_PLANILLAS_TB
CREATE OR REPLACE TRIGGER ACCION_FIDE_PAGOS_PLANILLAS_TB_TRG
BEFORE INSERT OR UPDATE ON FIDE_PAGOS_PLANILLAS_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.ACCION := 'INSERT';
    ELSIF UPDATING THEN
        :NEW.ACCION := 'UPDATE';
    END IF;
END;
/
-- Modification Date FIDE_ESTADO_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_ESTADO_TB_TRG
BEFORE UPDATE ON FIDE_ESTADO_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE:=SYSTIMESTAMP;

END;
/
-- Modification Date FIDE_DIRECCION_PROVINCIA_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_DIRECCION_PROVINCIA_TB_TRG
BEFORE UPDATE ON FIDE_DIRECCION_PROVINCIA_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_DIRECCION_CANTON_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_DIRECCION_CANTON_TB_TRG
BEFORE UPDATE ON FIDE_DIRECCION_CANTON_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_DIRECCION_DISTRITO_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_DIRECCION_DISTRITO_TB_TRG
BEFORE UPDATE ON FIDE_DIRECCION_DISTRITO_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_DIRECCION_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_DIRECCION_TB_TRG
BEFORE UPDATE ON FIDE_DIRECCION_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_TELEFONO_CONTACTO_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_TELEFONO_CONTACTO_TB_TRG
BEFORE UPDATE ON FIDE_TELEFONO_CONTACTO_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_TIPO_USUARIO_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_TIPO_USUARIO_TB_TRG
BEFORE UPDATE ON FIDE_TIPO_USUARIO_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_ESPECIALIDAD_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_ESPECIALIDAD_TB_TRG
BEFORE UPDATE ON FIDE_ESPECIALIDAD_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_USUARIOS_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_USUARIOS_TB_TRG
BEFORE UPDATE ON FIDE_USUARIOS_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_MASCOTA_ESPECIE_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_MASCOTA_ESPECIE_TB_TRG
BEFORE UPDATE ON FIDE_MASCOTA_ESPECIE_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_MASCOTA_RAZA_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_MASCOTA_RAZA_TB_TRG
BEFORE UPDATE ON FIDE_MASCOTA_RAZA_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_MASCOTA_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_MASCOTA_TB_TRG
BEFORE UPDATE ON FIDE_MASCOTA_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_TIPO_EXAMEN_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_TIPO_EXAMEN_TB_TRG
BEFORE UPDATE ON FIDE_TIPO_EXAMEN_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_EXAMENES_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_EXAMENES_TB_TRG
BEFORE UPDATE ON FIDE_EXAMENES_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_CONSULTA_MOTIVO_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_CONSULTA_MOTIVO_TB_TRG
BEFORE UPDATE ON FIDE_CONSULTA_MOTIVO_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_CONSULTAS_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_CONSULTAS_TB_TRG
BEFORE UPDATE ON FIDE_CONSULTAS_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_FACTURACIONES_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_FACTURACIONES_TB_TRG
BEFORE UPDATE ON FIDE_FACTURACIONES_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_PROVEEDORES_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_PROVEEDORES_TB_TRG
BEFORE UPDATE ON FIDE_PROVEEDORES_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_PRODUCTOS_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_PRODUCTOS_TB_TRG
BEFORE UPDATE ON FIDE_PRODUCTOS_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_DETALLE_FACTURA_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_DETALLE_FACTURA_TB_TRG
BEFORE UPDATE ON FIDE_DETALLE_FACTURA_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_ORDEN_PRODUCTOS_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_ORDEN_PRODUCTOS_TB_TRG
BEFORE UPDATE ON FIDE_ORDEN_PRODUCTOS_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_ORDEN_COMPRA_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_ORDEN_COMPRA_TB_TRG
BEFORE UPDATE ON FIDE_ORDEN_COMPRA_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_TIPO_VIA_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_TIPO_VIA_TB_TRG
BEFORE UPDATE ON FIDE_TIPO_VIA_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_ROLES_CIRUGIA_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_ROLES_CIRUGIA_TB_TRG
BEFORE UPDATE ON FIDE_ROLES_CIRUGIA_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_REGISTRO_CIRUGIAS_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_REGISTRO_CIRUGIAS_TB_TRG
BEFORE UPDATE ON FIDE_REGISTRO_CIRUGIAS_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_CIRUGIAS_MEDICAMENTOS_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_CIRUGIAS_MEDICAMENTOS_TB_TRG
BEFORE UPDATE ON FIDE_CIRUGIAS_MEDICAMENTOS_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_CIRUGIAS_PERSONAL_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_CIRUGIAS_PERSONAL_TB_TRG
BEFORE UPDATE ON FIDE_CIRUGIAS_PERSONAL_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_HISTORIALES_MEDICOS_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_HISTORIALES_MEDICOS_TB_TRG
BEFORE UPDATE ON FIDE_HISTORIALES_MEDICOS_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/

-- Modification Date FIDE_PAGOS_PLANILLAS_TB
CREATE OR REPLACE TRIGGER FECHA_MODIFICACION_FIDE_PAGOS_PLANILLAS_TB_TRG
BEFORE UPDATE ON FIDE_PAGOS_PLANILLAS_TB
FOR EACH ROW
BEGIN
    :NEW.MODIFICATION_DATE := SYSTIMESTAMP;

END;
/
-- Modification Date FIDE_ESTADO_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_ESTADO_TB_TRG
BEFORE INSERT ON FIDE_ESTADO_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE:=SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_DIRECCION_PROVINCIA_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_DIRECCION_PROVINCIA_TB_TRG
BEFORE INSERT ON FIDE_DIRECCION_PROVINCIA_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_DIRECCION_CANTON_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_DIRECCION_CANTON_TB_TRG
BEFORE INSERT ON FIDE_DIRECCION_CANTON_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_DIRECCION_DISTRITO_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_DIRECCION_DISTRITO_TB_TRG
BEFORE INSERT ON FIDE_DIRECCION_DISTRITO_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_DIRECCION_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_DIRECCION_TB_TRG
BEFORE INSERT ON FIDE_DIRECCION_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_TELEFONO_CONTACTO_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_TELEFONO_CONTACTO_TB_TRG
BEFORE INSERT ON FIDE_TELEFONO_CONTACTO_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_TIPO_USUARIO_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_TIPO_USUARIO_TB_TRG
BEFORE INSERT ON FIDE_TIPO_USUARIO_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_ESPECIALIDAD_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_ESPECIALIDAD_TB_TRG
BEFORE INSERT ON FIDE_ESPECIALIDAD_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_USUARIOS_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_USUARIOS_TB_TRG
BEFORE INSERT ON FIDE_USUARIOS_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_MASCOTA_ESPECIE_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_MASCOTA_ESPECIE_TB_TRG
BEFORE INSERT ON FIDE_MASCOTA_ESPECIE_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_MASCOTA_RAZA_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_MASCOTA_RAZA_TB_TRG
BEFORE INSERT ON FIDE_MASCOTA_RAZA_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_MASCOTA_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_MASCOTA_TB_TRG
BEFORE INSERT ON FIDE_MASCOTA_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_TIPO_EXAMEN_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_TIPO_EXAMEN_TB_TRG
BEFORE INSERT ON FIDE_TIPO_EXAMEN_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_EXAMENES_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_EXAMENES_TB_TRG
BEFORE INSERT ON FIDE_EXAMENES_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_CONSULTA_MOTIVO_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_CONSULTA_MOTIVO_TB_TRG
BEFORE INSERT ON FIDE_CONSULTA_MOTIVO_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_CONSULTAS_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_CONSULTAS_TB_TRG
BEFORE INSERT ON FIDE_CONSULTAS_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_FACTURACIONES_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_FACTURACIONES_TB_TRG
BEFORE INSERT ON FIDE_FACTURACIONES_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/

-- Creation Date FIDE_PROVEEDORES_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_PROVEEDORES_TB_TRG
BEFORE INSERT ON FIDE_PROVEEDORES_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_PRODUCTOS_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_PRODUCTOS_TB_TRG
BEFORE INSERT ON FIDE_PRODUCTOS_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_DETALLE_FACTURA_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_DETALLE_FACTURA_TB_TRG
BEFORE INSERT ON FIDE_DETALLE_FACTURA_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_ORDEN_PRODUCTOS_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_ORDEN_PRODUCTOS_TB_TRG
BEFORE INSERT ON FIDE_ORDEN_PRODUCTOS_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_ORDEN_COMPRA_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_ORDEN_COMPRA_TB_TRG
BEFORE INSERT ON FIDE_ORDEN_COMPRA_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_TIPO_VIA_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_TIPO_VIA_TB_TRG
BEFORE INSERT ON FIDE_TIPO_VIA_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_ROLES_CIRUGIA_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_ROLES_CIRUGIA_TB_TRG
BEFORE INSERT ON FIDE_ROLES_CIRUGIA_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_REGISTRO_CIRUGIAS_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_REGISTRO_CIRUGIAS_TB_TRG
BEFORE INSERT ON FIDE_REGISTRO_CIRUGIAS_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_CIRUGIAS_MEDICAMENTOS_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_CIRUGIAS_MEDICAMENTOS_TB_TRG
BEFORE INSERT ON FIDE_CIRUGIAS_MEDICAMENTOS_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_CIRUGIAS_PERSONAL_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_CIRUGIAS_PERSONAL_TB_TRG
BEFORE INSERT ON FIDE_CIRUGIAS_PERSONAL_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_HISTORIALES_MEDICOS_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_HISTORIALES_MEDICOS_TB_TRG
BEFORE INSERT ON FIDE_HISTORIALES_MEDICOS_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;
/
-- Creation Date FIDE_PAGOS_PLANILLAS_TB
CREATE OR REPLACE TRIGGER FECHA_CREACION_FIDE_PAGOS_PLANILLAS_TB_TRG
BEFORE INSERT ON FIDE_PAGOS_PLANILLAS_TB
FOR EACH ROW
BEGIN
    :NEW.CREATION_DATE := SYSTIMESTAMP;

END;

-- Fecha Orden Compra FIDE_PAGOS_PLANILLAS_TB
CREATE OR REPLACE TRIGGER FECHA_FIDE_ORDEN_COMPRA_TB_TRG
BEFORE INSERT ON FIDE_ORDEN_COMPRA_TB
FOR EACH ROW
BEGIN
    :NEW.ORDEN_COMPRA_FECHA := SYSTIMESTAMP;

END;
/*------------------------------------------------------------------------------
----------------------------------INSERTS DE TABLAS-----------------------------
------------------------------------------------------------------------------*/
