CREATE OR REPLACE PACKAGE PROYECTO_FUNCIONES_PROCEDIMIENTOS_PKG AS
    -- Procedimientos para FIDE_ESTADO_TB
    PROCEDURE INSERT_ESTADO_TB_SP(
        P_ESTADO_DESCRIPCION IN FIDE_ESTADO_TB.ESTADO_DESCRIPCION%TYPE,
        P_CREATED_BY IN FIDE_ESTADO_TB.CREATED_BY%TYPE,
        P_CREATION_DATE IN FIDE_ESTADO_TB.CREATION_DATE%TYPE,
        P_MODIFIED_BY IN FIDE_ESTADO_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_ESTADO_TB.MODIFICATION_DATE%TYPE
    );

    PROCEDURE UPDATE_ESTADO_TB_SP(
        P_ID_ESTADO IN FIDE_ESTADO_TB.ID_ESTADO_PK%TYPE,
        P_ESTADO_DESCRIPCION IN FIDE_ESTADO_TB.ESTADO_DESCRIPCION%TYPE,
        P_MODIFIED_BY IN FIDE_ESTADO_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_ESTADO_TB.MODIFICATION_DATE%TYPE
    );

    -- Procedimientos para FIDE_DIRECCION_PROVINCIA_TB
    PROCEDURE INSERT_DIRECCION_PROVINCIA_TB_SP(
        P_ESTADO IN FIDE_DIRECCION_PROVINCIA_TB.ID_ESTADO_FK%TYPE,
        P_NOMBRE_PROVINCIA IN FIDE_DIRECCION_PROVINCIA_TB.NOMBRE_PROVINCIA%TYPE,
        P_CREATED_BY IN FIDE_DIRECCION_PROVINCIA_TB.CREATED_BY%TYPE,
        P_CREATION_DATE IN FIDE_DIRECCION_PROVINCIA_TB.CREATION_DATE%TYPE,
        P_MODIFIED_BY IN FIDE_DIRECCION_PROVINCIA_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_DIRECCION_PROVINCIA_TB.MODIFICATION_DATE%TYPE
    );

    PROCEDURE UPDATE_DIRECCION_PROVINCIA_TB_SP(
        P_ID_DIRECCION_PROVINCIA IN FIDE_DIRECCION_PROVINCIA_TB.ID_DIRECCION_PROVINCIA_PK%TYPE,
        P_ESTADO IN FIDE_DIRECCION_PROVINCIA_TB.ID_ESTADO_FK%TYPE,
        P_NOMBRE_PROVINCIA IN FIDE_DIRECCION_PROVINCIA_TB.NOMBRE_PROVINCIA%TYPE,
        P_MODIFIED_BY IN FIDE_DIRECCION_PROVINCIA_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_DIRECCION_PROVINCIA_TB.MODIFICATION_DATE%TYPE
    );

    PROCEDURE DESACTIVAR_DIRECCION_PROVINCIA_TB_SP(
        P_ID_DIRECCION_PROVINCIA IN FIDE_DIRECCION_PROVINCIA_TB.ID_DIRECCION_PROVINCIA_PK%TYPE
    );

    -- Procedimientos para FIDE_DIRECCION_CANTON_TB
    PROCEDURE INSERT_DIRECCION_CANTON_TB_SP(
        P_ESTADO IN FIDE_DIRECCION_CANTON_TB.ID_ESTADO_FK%TYPE,
        P_NOMBRE_CANTON IN FIDE_DIRECCION_CANTON_TB.NOMBRE_CANTON%TYPE,
        P_CREATED_BY IN FIDE_DIRECCION_CANTON_TB.CREATED_BY%TYPE,
        P_CREATION_DATE IN FIDE_DIRECCION_CANTON_TB.CREATION_DATE%TYPE,
        P_MODIFIED_BY IN FIDE_DIRECCION_CANTON_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_DIRECCION_CANTON_TB.MODIFICATION_DATE%TYPE
    );

    PROCEDURE UPDATE_DIRECCION_CANTON_TB_SP(
        P_ID_DIRECCION_CANTON IN FIDE_DIRECCION_CANTON_TB.ID_DIRECCION_CANTON_PK%TYPE,
        P_NOMBRE_CANTON IN FIDE_DIRECCION_CANTON_TB.NOMBRE_CANTON%TYPE,
        P_MODIFIED_BY IN FIDE_DIRECCION_CANTON_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_DIRECCION_CANTON_TB.MODIFICATION_DATE%TYPE
    );

    PROCEDURE DESACTIVAR_DIRECCION_CANTON_TB_SP(
        P_ID_DIRECCION_CANTON IN FIDE_DIRECCION_CANTON_TB.ID_DIRECCION_CANTON_PK%TYPE
    );

    -- Procedimientos para FIDE_DIRECCION_DISTRITO_TB
    PROCEDURE INSERT_DIRECCION_DISTRITO_TB_SP(
        P_ESTADO IN FIDE_DIRECCION_DISTRITO_TB.ID_ESTADO_FK%TYPE,
        P_NOMBRE_DISTRITO IN FIDE_DIRECCION_DISTRITO_TB.NOMBRE_DISTRITO%TYPE,
        P_CREATED_BY IN FIDE_DIRECCION_DISTRITO_TB.CREATED_BY%TYPE,
        P_CREATION_DATE IN FIDE_DIRECCION_DISTRITO_TB.CREATION_DATE%TYPE,
        P_MODIFIED_BY IN FIDE_DIRECCION_DISTRITO_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_DIRECCION_DISTRITO_TB.MODIFICATION_DATE%TYPE
    );

    PROCEDURE UPDATE_DIRECCION_DISTRITO_TB_SP(
        P_ID_DIRECCION_DISTRITO IN FIDE_DIRECCION_DISTRITO_TB.ID_DIRECCION_DISTRITO_PK%TYPE,
        P_NOMBRE_DISTRITO IN FIDE_DIRECCION_DISTRITO_TB.NOMBRE_DISTRITO%TYPE,
        P_MODIFIED_BY IN FIDE_DIRECCION_DISTRITO_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_DIRECCION_DISTRITO_TB.MODIFICATION_DATE%TYPE
    );

    PROCEDURE DESACTIVAR_DIRECCION_DISTRITO_TB_SP(
        P_ID_DIRECCION_DISTRITO IN FIDE_DIRECCION_DISTRITO_TB.ID_DIRECCION_DISTRITO_PK%TYPE
    );

    -- Procedimientos para FIDE_DIRECCION_TB
    PROCEDURE INSERT_DIRECCION_TB_SP(
        P_ESTADO IN FIDE_DIRECCION_TB.ID_ESTADO_FK%TYPE,
        P_DIRECCION_PROVINCIA IN FIDE_DIRECCION_TB.ID_DIRECCION_PROVINCIA_FK%TYPE,
        P_DIRECCION_CANTON IN FIDE_DIRECCION_TB.ID_DIRECCION_CANTON_FK%TYPE,
        P_DIRECCION_DISTRITO IN FIDE_DIRECCION_TB.ID_DIRECCION_DISTRITO_FK%TYPE,
        P_DIRECCION_SENNAS IN FIDE_DIRECCION_TB.DIRECCION_SENNAS%TYPE,
        P_CREATED_BY IN FIDE_DIRECCION_TB.CREATED_BY%TYPE,
        P_CREATION_DATE IN FIDE_DIRECCION_TB.CREATION_DATE%TYPE,
        P_MODIFIED_BY IN FIDE_DIRECCION_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_DIRECCION_TB.MODIFICATION_DATE%TYPE
    );

    PROCEDURE UPDATE_DIRECCION_TB_SP(
        P_ID_DIRECCION IN FIDE_DIRECCION_TB.ID_DIRECCION_PK%TYPE,
        P_DIRECCION_SENNAS IN FIDE_DIRECCION_TB.DIRECCION_SENNAS%TYPE,
        P_MODIFIED_BY IN FIDE_DIRECCION_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_DIRECCION_TB.MODIFICATION_DATE%TYPE
    );

    PROCEDURE DESACTIVAR_DIRECCION_TB_SP(
        P_ID_DIRECCION IN FIDE_DIRECCION_TB.ID_DIRECCION_PK%TYPE
    );

    -- Procedimientos para FIDE_TELEFONO_CONTACTO_TB
    PROCEDURE INSERT_TELEFONO_CONTACTO_TB_SP(
        P_ESTADO IN FIDE_TELEFONO_CONTACTO_TB.ID_ESTADO_FK%TYPE,
        P_TELEFONO_CONTACTO IN FIDE_TELEFONO_CONTACTO_TB.TELEFONO_CONTACTO%TYPE,
        P_CREATED_BY IN FIDE_TELEFONO_CONTACTO_TB.CREATED_BY%TYPE,
        P_CREATION_DATE IN FIDE_TELEFONO_CONTACTO_TB.CREATION_DATE%TYPE,
        P_MODIFIED_BY IN FIDE_TELEFONO_CONTACTO_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_TELEFONO_CONTACTO_TB.MODIFICATION_DATE%TYPE
    );

    PROCEDURE UPDATE_TELEFONO_CONTACTO_TB_SP(
        P_ID_TELEFONO_CONTACTO IN FIDE_TELEFONO_CONTACTO_TB.ID_TELEFONO_CONTACTO_PK%TYPE,
        P_TELEFONO_CONTACTO IN FIDE_TELEFONO_CONTACTO_TB.TELEFONO_CONTACTO%TYPE,
        P_MODIFIED_BY IN FIDE_TELEFONO_CONTACTO_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_TELEFONO_CONTACTO_TB.MODIFICATION_DATE%TYPE
    );

    PROCEDURE DESACTIVAR_TELEFONO_CONTACTO_TB_SP(
        P_ID_TELEFONO_CONTACTO IN FIDE_TELEFONO_CONTACTO_TB.ID_TELEFONO_CONTACTO_PK%TYPE
    );

    -- Procedimientos para FIDE_TIPO_USUARIO_TB
    PROCEDURE INSERT_TIPO_USUARIO_TB_SP(
        P_ESTADO IN FIDE_TIPO_USUARIO_TB.ID_ESTADO_FK%TYPE,
        P_DESCRIPCION_TIPO_USUARIO IN FIDE_TIPO_USUARIO_TB.DESCRIPCION_TIPO_USUARIO%TYPE,
        P_CREATED_BY IN FIDE_TIPO_USUARIO_TB.CREATED_BY%TYPE,
        P_CREATION_DATE IN FIDE_TIPO_USUARIO_TB.CREATION_DATE%TYPE,
        P_MODIFIED_BY IN FIDE_TIPO_USUARIO_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_TIPO_USUARIO_TB.MODIFICATION_DATE%TYPE
    );

    PROCEDURE UPDATE_TIPO_USUARIO_TB_SP(
        P_ID_TIPO_USUARIO IN FIDE_TIPO_USUARIO_TB.ID_TIPO_USUARIO_PK%TYPE,
        P_DESCRIPCION_TIPO_USUARIO IN FIDE_TIPO_USUARIO_TB.DESCRIPCION_TIPO_USUARIO%TYPE,
        P_MODIFIED_BY IN FIDE_TIPO_USUARIO_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_TIPO_USUARIO_TB.MODIFICATION_DATE%TYPE
    );

    PROCEDURE DESACTIVAR_TIPO_USUARIO_TB_SP(
        P_ID_TIPO_USUARIO IN FIDE_TIPO_USUARIO_TB.ID_TIPO_USUARIO_PK%TYPE
    );

    -- Procedimientos para FIDE_ESPECIALIDAD_TB
    PROCEDURE INSERT_ESPECIALIDAD_TB_SP(
        P_ESTADO IN FIDE_ESPECIALIDAD_TB.ID_ESTADO_FK%TYPE,
        P_NOMBRE_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.NOMBRE_ESPECIALIDAD%TYPE,
        P_DESCRIPCION_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.DESCRIPCION_ESPECIALIDAD%TYPE,
        P_CREATED_BY IN FIDE_ESPECIALIDAD_TB.CREATED_BY%TYPE,
        P_CREATION_DATE IN FIDE_ESPECIALIDAD_TB.CREATION_DATE%TYPE,
        P_MODIFIED_BY IN FIDE_ESPECIALIDAD_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_ESPECIALIDAD_TB.MODIFICATION_DATE%TYPE
    );

    PROCEDURE UPDATE_ESPECIALIDAD_TB_SP(
        P_ID_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.ID_ESPECIALIDAD_PK%TYPE,
        P_NOMBRE_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.NOMBRE_ESPECIALIDAD%TYPE,
        P_DESCRIPCION_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.DESCRIPCION_ESPECIALIDAD%TYPE,
        P_MODIFIED_BY IN FIDE_ESPECIALIDAD_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_ESPECIALIDAD_TB.MODIFICATION_DATE%TYPE
    );

    PROCEDURE DESACTIVAR_ESPECIALIDAD_TB_SP(
        P_ID_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.ID_ESPECIALIDAD_PK%TYPE
    );

    -- Procedimientos para FIDE_USUARIOS_TB
    PROCEDURE INSERT_USUARIOS_TB_SP(
        P_ESTADO IN FIDE_USUARIOS_TB.ID_ESTADO_FK%TYPE,
        P_ESPECIALIDAD IN FIDE_USUARIOS_TB.ID_ESPECIALIDAD_FK%TYPE,
        P_ID_TIPO_USUARIO IN FIDE_USUARIOS_TB.ID_TIPO_USUARIO_FK%TYPE,
        P_USUARIO_NOMBRE IN FIDE_USUARIOS_TB.USUARIO_NOMBRE%TYPE,
        P_USUARIO_CORREO IN FIDE_USUARIOS_TB.USUARIO_CORREO%TYPE,
        P_USUARIO_CONTRASENNA IN FIDE_USUARIOS_TB.USUARIO_CONTRASENNA%TYPE,
        P_USUARIO_IDENTIFICACION IN FIDE_USUARIOS_TB.USUARIO_IDENTIFICACION%TYPE,
        P_USUARIO_FECHA_REGISTRO IN FIDE_USUARIOS_TB.USUARIO_FECHA_REGISTRO%TYPE,
        P_USUARIO_CUENTA_BANCARIAO IN FIDE_USUARIOS_TB.USUARIO_CUENTA_BANCARIA%TYPE,                                            
        P_CREATED_BY IN FIDE_USUARIOS_TB.CREATED_BY%TYPE,
        P_CREATION_DATE IN FIDE_USUARIOS_TB.CREATION_DATE%TYPE,
        P_MODIFIED_BY IN FIDE_USUARIOS_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_USUARIOS_TB.MODIFICATION_DATE%TYPE
    );

    PROCEDURE UPDATE_USUARIOS_TB_SP(
        P_ID_USUARIO IN FIDE_USUARIOS_TB.ID_USUARIO_PK%TYPE,
        P_ID_ESPECIALIDAD_FK IN FIDE_USUARIOS_TB.ID_ESPECIALIDAD_FK%TYPE,
        P_ID_TIPO_USUARIO_FK IN FIDE_USUARIOS_TB.ID_TIPO_USUARIO_FK%TYPE,
        P_ID_DIRECCION_FK IN FIDE_USUARIOS_TB.ID_DIRECCION_FK%TYPE,
        P_ID_TELEFONO_CONTACTO_FK IN FIDE_USUARIOS_TB.ID_TELEFONO_CONTACTO_FK%TYPE,
        P_USUARIO_NOMBRE IN FIDE_USUARIOS_TB.USUARIO_NOMBRE%TYPE,
        P_USUARIO_CORREO IN FIDE_USUARIOS_TB.USUARIO_CORREO%TYPE,
        P_USUARIO_CONTRASENNA IN FIDE_USUARIOS_TB.USUARIO_CONTRASENNA%TYPE,
        P_USUARIO_IDENTIFICACION IN FIDE_USUARIOS_TB.USUARIO_IDENTIFICACION%TYPE,
        P_USUARIO_FECHA_REGISTRO IN FIDE_USUARIOS_TB.USUARIO_FECHA_REGISTRO%TYPE,
        P_USUARIO_CUENTA_BANCARIA IN FIDE_USUARIOS_TB.USUARIO_CUENTA_BANCARIA%TYPE,
        P_MODIFIED_BY IN FIDE_USUARIOS_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_USUARIOS_TB.MODIFICATION_DATE%TYPE
    );
    
    PROCEDURE DESACTIVAR_USUARIOS_TB_SP(
    P_ID_USUARIO IN FIDE_USUARIOS_TB.ID_USUARIO_PK%TYPE
    );
    
    PROCEDURE INSERT_MASCOTA_ESPECIE_TB_SP(
    P_ID_ESTADO_FK         IN FIDE_MASCOTA_ESPECIE_TB.ID_ESTADO_FK%TYPE,
    P_NOMBRE_ESPECIE       IN FIDE_MASCOTA_ESPECIE_TB.NOMBRE_ESPECIE%TYPE,
    P_CREATED_BY           IN FIDE_MASCOTA_ESPECIE_TB.CREATED_BY%TYPE,
    P_CREATION_DATE        IN FIDE_MASCOTA_ESPECIE_TB.CREATION_DATE%TYPE,
    P_MODIFIED_BY          IN FIDE_MASCOTA_ESPECIE_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE    IN FIDE_MASCOTA_ESPECIE_TB.MODIFICATION_DATE%TYPE
    );
    
    --Procedimiento para hacer update de la tabla especies
    PROCEDURE UPDATE_MASCOTA_ESPECIE_TB_SP(
    P_ID_MASCOTA_ESPECIE   IN FIDE_MASCOTA_ESPECIE_TB.ID_MASCOTA_ESPECIE_PK%TYPE,
    P_ID_ESTADO_FK         IN FIDE_MASCOTA_ESPECIE_TB.ID_ESTADO_FK%TYPE,
    P_NOMBRE_ESPECIE       IN FIDE_MASCOTA_ESPECIE_TB.NOMBRE_ESPECIE%TYPE,
    P_MODIFIED_BY          IN FIDE_MASCOTA_ESPECIE_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE    IN FIDE_MASCOTA_ESPECIE_TB.MODIFICATION_DATE%TYPE
    );
    
    --Procedimiento para hacer un soft delete de la tabla especies
    PROCEDURE DESACTIVAR_MASCOTA_ESPECIE_TB_SP (
    P_ID_MASCOTA_ESPECIE  IN FIDE_MASCOTA_ESPECIE_TB.ID_MASCOTA_ESPECIE_PK%TYPE
    );
    
    
    
    PROCEDURE INSERT_MASCOTA_RAZA_TB_SP(
    P_ID_ESTADO_FK        IN FIDE_MASCOTA_RAZA_TB.ID_ESTADO_FK%TYPE,
    P_NOMBRE_RAZA         IN FIDE_MASCOTA_RAZA_TB.NOMBRE_RAZA%TYPE,
    P_CREATED_BY          IN FIDE_MASCOTA_RAZA_TB.CREATED_BY%TYPE,
    P_CREATION_DATE       IN FIDE_MASCOTA_RAZA_TB.CREATION_DATE%TYPE,
    P_MODIFIED_BY         IN FIDE_MASCOTA_RAZA_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE   IN FIDE_MASCOTA_RAZA_TB.MODIFICATION_DATE%TYPE
    );
    
    PROCEDURE UPDATE_MASCOTA_RAZA_TB_SP(
    P_ID_MASCOTA_RAZA   IN FIDE_MASCOTA_RAZA_TB.ID_MASCOTA_RAZA_PK%TYPE,
    P_ID_ESTADO_FK      IN FIDE_MASCOTA_RAZA_TB.ID_ESTADO_FK%TYPE,
    P_NOMBRE_RAZA       IN FIDE_MASCOTA_RAZA_TB.NOMBRE_RAZA%TYPE,
    P_MODIFIED_BY       IN FIDE_MASCOTA_RAZA_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE IN FIDE_MASCOTA_RAZA_TB.MODIFICATION_DATE%TYPE
    );
    
    PROCEDURE DESACTIVAR_MASCOTA_RAZA_TB_SP (
    P_ID_MASCOTA_RAZA  IN FIDE_MASCOTA_RAZA_TB.ID_MASCOTA_RAZA_PK%TYPE
    );
    
    PROCEDURE INSERT_MASCOTA_TB_SP (
    P_ID_ESTADO_FK           IN FIDE_MASCOTA_TB.ID_ESTADO_FK%TYPE,
    P_ID_MASCOTA_ESPECIE_FK  IN FIDE_MASCOTA_TB.ID_MASCOTA_ESPECIE_FK%TYPE,
    P_ID_MASCOTA_RAZA_FK     IN FIDE_MASCOTA_TB.ID_MASCOTA_RAZA_FK%TYPE,
    P_ID_USUARIO_FK          IN FIDE_MASCOTA_TB.ID_USUARIO_FK%TYPE,
    P_NOMBRE_MASCOTA         IN FIDE_MASCOTA_TB.NOMBRE_MASCOTA%TYPE,
    P_FECHA_NACIMIENTO       IN FIDE_MASCOTA_TB.FECHA_NACIMIENTO%TYPE,
    P_GENERO                 IN FIDE_MASCOTA_TB.GENERO%TYPE,
    P_CREATED_BY             IN FIDE_MASCOTA_TB.CREATED_BY%TYPE,
    P_CREATION_DATE          IN FIDE_MASCOTA_TB.CREATION_DATE%TYPE,
    P_MODIFIED_BY            IN FIDE_MASCOTA_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE      IN FIDE_MASCOTA_TB.MODIFICATION_DATE%TYPE
    );
    
    PROCEDURE UPDATE_MASCOTA_TB_SP(
    P_ID_MASCOTA             IN FIDE_MASCOTA_TB.ID_MASCOTA_PK%TYPE,
    P_ID_ESTADO_FK           IN FIDE_MASCOTA_TB.ID_ESTADO_FK%TYPE,
    P_ID_MASCOTA_ESPECIE_FK  IN FIDE_MASCOTA_TB.ID_MASCOTA_ESPECIE_FK%TYPE,
    P_ID_MASCOTA_RAZA_FK     IN FIDE_MASCOTA_TB.ID_MASCOTA_RAZA_FK%TYPE,
    P_ID_USUARIO_FK          IN FIDE_MASCOTA_TB.ID_USUARIO_FK%TYPE,
    P_NOMBRE_MASCOTA         IN FIDE_MASCOTA_TB.NOMBRE_MASCOTA%TYPE,
    P_FECHA_NACIMIENTO       IN FIDE_MASCOTA_TB.FECHA_NACIMIENTO%TYPE,
    P_GENERO                 IN FIDE_MASCOTA_TB.GENERO%TYPE,
    P_MODIFIED_BY            IN FIDE_MASCOTA_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE      IN FIDE_MASCOTA_TB.MODIFICATION_DATE%TYPE
    );
    
    PROCEDURE DESACTIVAR_MASCOTA_TB_SP (
    P_ID_MASCOTA IN FIDE_MASCOTA_TB.ID_MASCOTA_PK%TYPE
    );
    
    PROCEDURE INSERT_TIPO_EXAMEN_TB_SP(
    P_ID_ESTADO_FK         IN FIDE_TIPO_EXAMEN_TB.ID_ESTADO_FK%TYPE,
    P_DESCRIPCION_EXAMEN   IN FIDE_TIPO_EXAMEN_TB.DESCRIPCION_EXAMEN%TYPE,
    P_CREATED_BY           IN FIDE_TIPO_EXAMEN_TB.CREATED_BY%TYPE,
    P_CREATION_DATE        IN FIDE_TIPO_EXAMEN_TB.CREATION_DATE%TYPE,
    P_MODIFIED_BY          IN FIDE_TIPO_EXAMEN_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE    IN FIDE_TIPO_EXAMEN_TB.MODIFICATION_DATE%TYPE
    );
    
    PROCEDURE UPDATE_TIPO_EXAMEN_TB_SP(
    P_ID_TIPO_EXAMEN       IN FIDE_TIPO_EXAMEN_TB.ID_TIPO_EXAMEN_PK%TYPE,
    P_ID_ESTADO_FK         IN FIDE_TIPO_EXAMEN_TB.ID_ESTADO_FK%TYPE,
    P_DESCRIPCION_EXAMEN   IN FIDE_TIPO_EXAMEN_TB.DESCRIPCION_EXAMEN%TYPE,
    P_MODIFIED_BY          IN FIDE_TIPO_EXAMEN_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE    IN FIDE_TIPO_EXAMEN_TB.MODIFICATION_DATE%TYPE
    );
    
    PROCEDURE DESACTIVAR_TIPO_EXAMEN_TB_SP (
    P_ID_TIPO_EXAMEN IN FIDE_TIPO_EXAMEN_TB.ID_TIPO_EXAMEN_PK%TYPE
    );
    
    PROCEDURE INSERT_EXAMENES_TB_SP(
    P_ID_MASCOTA_FK             IN FIDE_EXAMENES_TB.ID_MASCOTA_FK%TYPE,
    P_ID_ESTADO_FK              IN FIDE_EXAMENES_TB.ID_ESTADO_FK%TYPE,
    P_ID_TIPO_EXAMEN_FK         IN FIDE_EXAMENES_TB.ID_TIPO_EXAMEN_FK%TYPE,
    P_EXAMEN_RESULTADO          IN FIDE_EXAMENES_TB.EXAMEN_RESULTADO%TYPE,
    P_EXAMEN_FECHA_SEGUIMIENTO  IN FIDE_EXAMENES_TB.EXAMEN_FECHA_SEGUIMIENTO%TYPE,
    P_CREATED_BY                IN FIDE_EXAMENES_TB.CREATED_BY%TYPE,
    P_CREATION_DATE             IN FIDE_EXAMENES_TB.CREATION_DATE%TYPE,
    P_MODIFIED_BY               IN FIDE_EXAMENES_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE         IN FIDE_EXAMENES_TB.MODIFICATION_DATE%TYPE
    );
    
    PROCEDURE UPDATE_EXAMENES_TB_SP(
    P_ID_EXAMEN              IN FIDE_EXAMENES_TB.ID_EXAMEN_PK%TYPE,
    P_ID_MASCOTA_FK          IN FIDE_EXAMENES_TB.ID_MASCOTA_FK%TYPE,
    P_ID_ESTADO_FK           IN FIDE_EXAMENES_TB.ID_ESTADO_FK%TYPE,
    P_ID_TIPO_EXAMEN_FK      IN FIDE_EXAMENES_TB.ID_TIPO_EXAMEN_FK%TYPE,
    P_EXAMEN_RESULTADO       IN FIDE_EXAMENES_TB.EXAMEN_RESULTADO%TYPE,
    P_EXAMEN_FECHA_SEGUIMIENTO IN FIDE_EXAMENES_TB.EXAMEN_FECHA_SEGUIMIENTO%TYPE,
    P_MODIFIED_BY            IN FIDE_EXAMENES_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE      IN FIDE_EXAMENES_TB.MODIFICATION_DATE%TYPE
    );
    
    PROCEDURE DESACTIVAR_EXAMENES_TB_SP (
    P_ID_EXAMEN IN FIDE_EXAMENES_TB.ID_EXAMEN_PK%TYPE
    );
    
    
    PROCEDURE INSERT_CONSULTA_MOTIVO_TB_SP(
    P_ID_ESTADO_FK            IN FIDE_CONSULTA_MOTIVO_TB.ID_ESTADO_FK%TYPE,
    P_DESCRIPCION_MOTIVO      IN FIDE_CONSULTA_MOTIVO_TB.DESCRIPCION_MOTIVO%TYPE,
    P_CREATED_BY              IN FIDE_CONSULTA_MOTIVO_TB.CREATED_BY%TYPE,
    P_CREATION_DATE           IN FIDE_CONSULTA_MOTIVO_TB.CREATION_DATE%TYPE,
    P_MODIFIED_BY             IN FIDE_CONSULTA_MOTIVO_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE       IN FIDE_CONSULTA_MOTIVO_TB.MODIFICATION_DATE%TYPE
    );
    
    PROCEDURE UPDATE_CONSULTA_MOTIVO_TB_SP(
    P_ID_CONSULTA_MOTIVO    IN FIDE_CONSULTA_MOTIVO_TB.ID_CONSULTA_MOTIVO_PK%TYPE,
    P_ID_ESTADO_FK          IN FIDE_CONSULTA_MOTIVO_TB.ID_ESTADO_FK%TYPE,
    P_DESCRIPCION_MOTIVO    IN FIDE_CONSULTA_MOTIVO_TB.DESCRIPCION_MOTIVO%TYPE,
    P_MODIFIED_BY           IN FIDE_CONSULTA_MOTIVO_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE     IN FIDE_CONSULTA_MOTIVO_TB.MODIFICATION_DATE%TYPE
    );
    
    PROCEDURE DESACTIVAR_CONSULTA_MOTIVO_TB_SP (
    P_ID_CONSULTA_MOTIVO IN FIDE_CONSULTA_MOTIVO_TB.ID_CONSULTA_MOTIVO_PK%TYPE
    );
    
    PROCEDURE INSERT_CONSULTAS_TB_SP(
    P_CONSULTA_FECHA          IN FIDE_CONSULTAS_TB.CONSULTA_FECHA%TYPE,
    P_ID_CONSULTA_MOTIVO_FK   IN FIDE_CONSULTAS_TB.ID_CONSULTA_MOTIVO_FK%TYPE,
    P_ID_ESTADO_FK            IN FIDE_CONSULTAS_TB.ID_ESTADO_FK%TYPE,
    P_ID_MASCOTA_FK           IN FIDE_CONSULTAS_TB.ID_MASCOTA_FK%TYPE,
    P_ID_USUARIO_FK           IN FIDE_CONSULTAS_TB.ID_USUARIO_FK%TYPE,
    P_CONSULTA_OBSERVACIONES  IN FIDE_CONSULTAS_TB.CONSULTA_OBSERVACIONES%TYPE,
    P_CREATED_BY              IN FIDE_CONSULTAS_TB.CREATED_BY%TYPE,
    P_CREATION_DATE           IN FIDE_CONSULTAS_TB.CREATION_DATE%TYPE,
    P_MODIFIED_BY             IN FIDE_CONSULTAS_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE       IN FIDE_CONSULTAS_TB.MODIFICATION_DATE%TYPE
    );
    
    PROCEDURE UPDATE_CONSULTAS_TB_SP(
    P_ID_CONSULTA             IN FIDE_CONSULTAS_TB.ID_CONSULTA_PK%TYPE,
    P_CONSULTA_FECHA          IN FIDE_CONSULTAS_TB.CONSULTA_FECHA%TYPE,
    P_ID_CONSULTA_MOTIVO_FK   IN FIDE_CONSULTAS_TB.ID_CONSULTA_MOTIVO_FK%TYPE,
    P_ID_ESTADO_FK            IN FIDE_CONSULTAS_TB.ID_ESTADO_FK%TYPE,
    P_ID_MASCOTA_FK           IN FIDE_CONSULTAS_TB.ID_MASCOTA_FK%TYPE,
    P_ID_USUARIO_FK           IN FIDE_CONSULTAS_TB.ID_USUARIO_FK%TYPE,
    P_CONSULTA_OBSERVACIONES  IN FIDE_CONSULTAS_TB.CONSULTA_OBSERVACIONES%TYPE,
    P_MODIFIED_BY             IN FIDE_CONSULTAS_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE       IN FIDE_CONSULTAS_TB.MODIFICATION_DATE%TYPE
    );
    
    PROCEDURE DESACTIVAR_CONSULTAS_TB_SP (
    P_ID_CONSULTA IN FIDE_CONSULTAS_TB.ID_CONSULTA_PK%TYPE
    );
    
    PROCEDURE INSERT_FACTURACIONES_TB_SP(
    P_ID_CONSULTA_FK          IN FIDE_FACTURACIONES_TB.ID_CONSULTA_FK%TYPE,
    P_ID_ESTADO_FK            IN FIDE_FACTURACIONES_TB.ID_ESTADO_FK%TYPE,
    P_FACTURA_FECHA_EMISION   IN FIDE_FACTURACIONES_TB.FACTURA_FECHA_EMISION%TYPE,
    P_FACTURA_MONTO_TOTAL     IN FIDE_FACTURACIONES_TB.FACTURA_MONTO_TOTAL%TYPE,
    P_FACTURA_DESCUENTO       IN FIDE_FACTURACIONES_TB.FACTURA_DESCUENTO%TYPE,
    P_FACTURA_IMPUESTOS       IN FIDE_FACTURACIONES_TB.FACTURA_IMPUESTOS%TYPE,
    P_FACTURA_MONTO_FINAL     IN FIDE_FACTURACIONES_TB.FACTURA_MONTO_FINAL%TYPE,
    P_FACTURA_SUBTOTAL        IN FIDE_FACTURACIONES_TB.FACTURA_SUBTOTAL%TYPE,
    P_CREATED_BY              IN FIDE_FACTURACIONES_TB.CREATED_BY%TYPE,
    P_CREATION_DATE           IN FIDE_FACTURACIONES_TB.CREATION_DATE%TYPE,
    P_MODIFIED_BY             IN FIDE_FACTURACIONES_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE       IN FIDE_FACTURACIONES_TB.MODIFICATION_DATE%TYPE
    );
    
    PROCEDURE UPDATE_FACTURACIONES_TB_SP(
    P_ID_FACTURA            IN FIDE_FACTURACIONES_TB.ID_FACTURA_PK%TYPE,
    P_ID_CONSULTA_FK        IN FIDE_FACTURACIONES_TB.ID_CONSULTA_FK%TYPE,
    P_ID_ESTADO_FK          IN FIDE_FACTURACIONES_TB.ID_ESTADO_FK%TYPE,
    P_FACTURA_FECHA_EMISION IN FIDE_FACTURACIONES_TB.FACTURA_FECHA_EMISION%TYPE,
    P_FACTURA_MONTO_TOTAL   IN FIDE_FACTURACIONES_TB.FACTURA_MONTO_TOTAL%TYPE,
    P_FACTURA_DESCUENTO     IN FIDE_FACTURACIONES_TB.FACTURA_DESCUENTO%TYPE,
    P_FACTURA_IMPUESTOS     IN FIDE_FACTURACIONES_TB.FACTURA_IMPUESTOS%TYPE,
    P_FACTURA_MONTO_FINAL   IN FIDE_FACTURACIONES_TB.FACTURA_MONTO_FINAL%TYPE,
    P_FACTURA_SUBTOTAL      IN FIDE_FACTURACIONES_TB.FACTURA_SUBTOTAL%TYPE,
    P_MODIFIED_BY           IN FIDE_FACTURACIONES_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE     IN FIDE_FACTURACIONES_TB.MODIFICATION_DATE%TYPE
    );
    
    PROCEDURE DESACTIVAR_FACTURACIONES_TB_SP (
    P_ID_FACTURA IN FIDE_FACTURACIONES_TB.ID_FACTURA_PK%TYPE
    );
    
    PROCEDURE INSERT_PROVEEDORES_TB_SP(
    P_ID_ESTADO_FK                     IN FIDE_PROVEEDORES_TB.ID_ESTADO_FK%TYPE,
    P_ID_DIRECCION_FK                  IN FIDE_PROVEEDORES_TB.ID_DIRECCION_FK%TYPE,
    P_ID_TELEFONO_CONTACTO_FK          IN FIDE_PROVEEDORES_TB.ID_TELEFONO_CONTACTO_FK%TYPE,
    P_PROVEEDOR_NOMBRE                 IN FIDE_PROVEEDORES_TB.PROVEEDOR_NOMBRE%TYPE,
    P_PROVEEDOR_CORREO                 IN FIDE_PROVEEDORES_TB.PROVEEDOR_CORREO%TYPE,
    P_PROVEEDOR_DESCRIPCION_PRODUCTOS  IN FIDE_PROVEEDORES_TB.PROVEEDOR_DESCRIPCION_PRODUCTOS%TYPE,
    P_CREATED_BY                       IN FIDE_PROVEEDORES_TB.CREATED_BY%TYPE,
    P_CREATION_DATE                    IN FIDE_PROVEEDORES_TB.CREATION_DATE%TYPE,
    P_MODIFIED_BY                      IN FIDE_PROVEEDORES_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE                IN FIDE_PROVEEDORES_TB.MODIFICATION_DATE%TYPE
    );
    
    PROCEDURE UPDATE_PROVEEDORES_TB_SP(
    P_ID_PROVEEDOR_PK                  IN FIDE_PROVEEDORES_TB.ID_PROVEEDOR_PK%TYPE,
    P_ID_ESTADO_FK                     IN FIDE_PROVEEDORES_TB.ID_ESTADO_FK%TYPE,
    P_ID_DIRECCION_FK                  IN FIDE_PROVEEDORES_TB.ID_DIRECCION_FK%TYPE,
    P_ID_TELEFONO_CONTACTO_FK          IN FIDE_PROVEEDORES_TB.ID_TELEFONO_CONTACTO_FK%TYPE,
    P_PROVEEDOR_NOMBRE                 IN FIDE_PROVEEDORES_TB.PROVEEDOR_NOMBRE%TYPE,
    P_PROVEEDOR_CORREO                 IN FIDE_PROVEEDORES_TB.PROVEEDOR_CORREO%TYPE,
    P_PROVEEDOR_DESCRIPCION_PRODUCTOS  IN FIDE_PROVEEDORES_TB.PROVEEDOR_DESCRIPCION_PRODUCTOS%TYPE,
    P_MODIFIED_BY                      IN FIDE_PROVEEDORES_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE                IN FIDE_PROVEEDORES_TB.MODIFICATION_DATE%TYPE
    );
    
    PROCEDURE DESACTIVAR_PROVEEDORES_TB_SP (
    P_ID_PROVEEDOR IN FIDE_PROVEEDORES_TB.ID_PROVEEDOR_PK%TYPE
    );
    
    FUNCTION EXISTE_USUARIO_FN(
    P_CORREO     IN FIDE_USUARIOS_TB.USUARIO_CORREO%TYPE,
    P_CONTRASENNA IN FIDE_USUARIOS_TB.USUARIO_CONTRASENNA%TYPE) 
    RETURN NUMBER;
    
    FUNCTION OBTENER_DIRECCION_USUARIO_FN (P_CEDULA_USUARIO VARCHAR2)
    RETURN VARCHAR2;
    
    FUNCTION OBTENER_MASCOTAS_USUARIO_FN (
    P_IDENTIFICACION_USUARIO VARCHAR2) 
    RETURN VARCHAR2;
    
    FUNCTION EXISTE_RAZA_POR_DESCRIPCION_FN(
    P_NOMBRE_RAZA VARCHAR2) 
    RETURN NUMBER;
    
    FUNCTION OBTENER_FECHA_CIRUGIA_FN(
    P_ID_CIRUGIA NUMBER) 
    RETURN DATE;
    
    FUNCTION OBTENER_DUENNO_MASCOTA_FN (P_ID_MASCOTA NUMBER) 
    RETURN VARCHAR2;
    
    FUNCTION OBTENER_USUARIO_POR_ID_FN(P_ID NUMBER)
    RETURN VARCHAR2;

    PROCEDURE FIDE_ESTADO_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_DIRECCION_PROVINCIA_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_DIRECCION_CANTON_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_DIRECCION_DISTRITO_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_DIRECCION_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_TELEFONO_CONTACTO_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_TIPO_USUARIO_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_ESPECIALIDAD_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_USUARIOS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_MASCOTA_ESPECIE_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_MASCOTA_RAZA_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_MASCOTA_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_TIPO_EXAMEN_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_EXAMENES_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_PAGOS_PLANILLAS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_HISTORIALES_MEDICOS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_CIRUGIAS_PERSONAL_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_CIRUGIAS_MEDICAMENTOS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_REGISTRO_CIRUGIAS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_ROLES_CIRUGIA_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_TIPO_VIA_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

    PROCEDURE FIDE_ORDEN_PRODUCTOS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR);

END PROYECTO_FUNCIONES_PROCEDIMIENTOS_PKG;
/
CREATE OR REPLACE PACKAGE BODY PROYECTO_FUNCIONES_PROCEDIMIENTOS_PKG AS
--Creacion procedimiento de inserciones FIDE_ESTADO_TB
    PROCEDURE INSERT_ESTADO_TB_SP(
                                                P_ESTADO_DESCRIPCION IN FIDE_ESTADO_TB.ESTADO_DESCRIPCION%TYPE,
                                                P_CREATED_BY IN FIDE_ESTADO_TB.CREATED_BY%TYPE,
                                                P_CREATION_DATE IN FIDE_ESTADO_TB.CREATION_DATE%TYPE,
                                                P_MODIFIED_BY IN FIDE_ESTADO_TB.MODIFIED_BY%TYPE,
                                                P_MODIFICATION_DATE IN FIDE_ESTADO_TB.MODIFICATION_DATE%TYPE
        )
        IS
        BEGIN 
        INSERT INTO FIDE_ESTADO_TB(ESTADO_DESCRIPCION,CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
        VALUES(P_ESTADO_DESCRIPCION, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
        EXCEPTION
                WHEN NO_DATA_FOUND THEN
                        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
                WHEN OTHERS THEN
                        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
        END INSERT_ESTADO_TB_SP;
    
    -- Update tabla estado
    PROCEDURE UPDATE_ESTADO_TB_SP(
            P_ID_ESTADO IN FIDE_ESTADO_TB.ID_ESTADO_PK%TYPE,
            P_ESTADO_DESCRIPCION IN FIDE_ESTADO_TB.ESTADO_DESCRIPCION%TYPE,
            P_MODIFIED_BY IN FIDE_ESTADO_TB.MODIFIED_BY%TYPE,
            P_MODIFICATION_DATE IN FIDE_ESTADO_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_ESTADO_TB
           SET ESTADO_DESCRIPCION = P_ESTADO_DESCRIPCION,
               MODIFIED_BY        = P_MODIFIED_BY,
               MODIFICATION_DATE  = P_MODIFICATION_DATE
         WHERE ID_ESTADO_PK = P_ID_ESTADO;
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END UPDATE_ESTADO_TB_SP;
        
    --Creacion procedimiento de inserciones FIDE_DIRECCION_PROVINCIA_TB
    PROCEDURE INSERT_DIRECCION_PROVINCIA_TB_SP(
                                                P_ESTADO IN FIDE_DIRECCION_PROVINCIA_TB.ID_ESTADO_FK%TYPE,
                                                P_NOMBRE_PROVINCIA IN FIDE_DIRECCION_PROVINCIA_TB.NOMBRE_PROVINCIA%TYPE,
                                                P_CREATED_BY IN FIDE_DIRECCION_PROVINCIA_TB.CREATED_BY%TYPE,
                                                P_CREATION_DATE IN FIDE_DIRECCION_PROVINCIA_TB.CREATION_DATE%TYPE,
                                                P_MODIFIED_BY IN FIDE_DIRECCION_PROVINCIA_TB.MODIFIED_BY%TYPE,
                                                P_MODIFICATION_DATE IN FIDE_DIRECCION_PROVINCIA_TB.MODIFICATION_DATE%TYPE
        )
        IS
        BEGIN 
        INSERT INTO FIDE_DIRECCION_PROVINCIA_TB(ID_ESTADO_FK, NOMBRE_PROVINCIA,CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
        VALUES(P_ESTADO, P_NOMBRE_PROVINCIA, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
        EXCEPTION
                WHEN NO_DATA_FOUND THEN
                        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
                WHEN OTHERS THEN
                        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
        END INSERT_DIRECCION_PROVINCIA_TB_SP;
    
    -- Update FIDE_DIRECCION_PROVINCIA_TB
    PROCEDURE UPDATE_DIRECCION_PROVINCIA_TB_SP(
                                                P_ID_DIRECCION_PROVINCIA IN FIDE_DIRECCION_PROVINCIA_TB.ID_DIRECCION_PROVINCIA_PK%TYPE,
                                                P_ESTADO IN FIDE_DIRECCION_PROVINCIA_TB.ID_ESTADO_FK%TYPE,
                                                P_NOMBRE_PROVINCIA IN FIDE_DIRECCION_PROVINCIA_TB.NOMBRE_PROVINCIA%TYPE,
                                                P_MODIFIED_BY IN FIDE_DIRECCION_PROVINCIA_TB.MODIFIED_BY%TYPE,
                                                P_MODIFICATION_DATE IN FIDE_DIRECCION_PROVINCIA_TB.MODIFICATION_DATE%TYPE
        )
    IS
    BEGIN
        UPDATE FIDE_DIRECCION_PROVINCIA_TB
        SET ID_ESTADO_FK = P_ESTADO,
            NOMBRE_PROVINCIA = P_NOMBRE_PROVINCIA,
            MODIFIED_BY = P_MODIFIED_BY,
            MODIFICATION_DATE = P_MODIFICATION_DATE
        WHERE ID_DIRECCION_PROVINCIA_PK = P_ID_DIRECCION_PROVINCIA;
        COMMIT;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END UPDATE_DIRECCION_PROVINCIA_TB_SP;
    
    --Procedimiento para hacer un soft delete de la tabla FIDE_DIRECCION_PROVINCIA_TB
    PROCEDURE DESACTIVAR_DIRECCION_PROVINCIA_TB_SP(
        P_ID_DIRECCION_PROVINCIA IN FIDE_DIRECCION_PROVINCIA_TB.ID_DIRECCION_PROVINCIA_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_DIRECCION_PROVINCIA_TB
        SET ID_ESTADO_FK = 0
        WHERE ID_DIRECCION_PROVINCIA_PK = P_ID_DIRECCION_PROVINCIA;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro desactivado con exito.');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('No se encontro el registro con ID: ' || P_ID_DIRECCION_PROVINCIA);
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al desactivar el registro: ' || SQLERRM);
    END DESACTIVAR_DIRECCION_PROVINCIA_TB_SP;
    
    --Creacion procedimiento de inserciones FIDE_DIRECCION_CANTON_TB
    PROCEDURE INSERT_DIRECCION_CANTON_TB_SP(
                                                P_ESTADO IN FIDE_DIRECCION_CANTON_TB.ID_ESTADO_FK%TYPE,
                                                P_NOMBRE_CANTON IN FIDE_DIRECCION_CANTON_TB.NOMBRE_CANTON%TYPE,
                                                P_CREATED_BY IN FIDE_DIRECCION_CANTON_TB.CREATED_BY%TYPE,
                                                P_CREATION_DATE IN FIDE_DIRECCION_CANTON_TB.CREATION_DATE%TYPE,
                                                P_MODIFIED_BY IN FIDE_DIRECCION_CANTON_TB.MODIFIED_BY%TYPE,
                                                P_MODIFICATION_DATE IN FIDE_DIRECCION_CANTON_TB.MODIFICATION_DATE%TYPE
        )
        IS
        BEGIN 
        INSERT INTO FIDE_DIRECCION_CANTON_TB(ID_ESTADO_FK, NOMBRE_CANTON,CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
        VALUES(P_ESTADO, P_NOMBRE_CANTON, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
        EXCEPTION
                WHEN NO_DATA_FOUND THEN
                        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
                WHEN OTHERS THEN
                        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
        END INSERT_DIRECCION_CANTON_TB_SP;
    
    --Creacion procedimiento de update para la tabla FIDE_DIRECCION_CANTON_TB
    PROCEDURE UPDATE_DIRECCION_CANTON_TB_SP(
        P_ID_DIRECCION_CANTON IN FIDE_DIRECCION_CANTON_TB.ID_DIRECCION_CANTON_PK%TYPE,
        P_NOMBRE_CANTON IN FIDE_DIRECCION_CANTON_TB.NOMBRE_CANTON%TYPE,
        P_MODIFIED_BY IN FIDE_DIRECCION_CANTON_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_DIRECCION_CANTON_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_DIRECCION_CANTON_TB
        SET NOMBRE_CANTON = P_NOMBRE_CANTON,
            MODIFIED_BY = P_MODIFIED_BY,
            MODIFICATION_DATE = P_MODIFICATION_DATE
        WHERE ID_DIRECCION_CANTON_PK = P_ID_DIRECCION_CANTON;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro actualizado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al actualizar el registro: ' || SQLERRM);
    END UPDATE_DIRECCION_CANTON_TB_SP;
    
    --Procedimiento para hacer un soft delete de la tabla FIDE_DIRECCION_CANTON_TB
    PROCEDURE DESACTIVAR_DIRECCION_CANTON_TB_SP(
        P_ID_DIRECCION_CANTON IN FIDE_DIRECCION_CANTON_TB.ID_DIRECCION_CANTON_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_DIRECCION_CANTON_TB
        SET ID_ESTADO_FK = 0
        WHERE ID_DIRECCION_CANTON_PK = P_ID_DIRECCION_CANTON;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro desactivado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al desactivar el registro: ' || SQLERRM);
    END DESACTIVAR_DIRECCION_CANTON_TB_SP;

    
    --Creacion procedimiento de inserciones FIDE_DIRECCION_DISTRITO_TB
    PROCEDURE INSERT_DIRECCION_DISTRITO_TB_SP(
                                                P_ESTADO IN FIDE_DIRECCION_DISTRITO_TB.ID_ESTADO_FK%TYPE,
                                                P_NOMBRE_DISTRITO IN FIDE_DIRECCION_DISTRITO_TB.NOMBRE_DISTRITO%TYPE,
                                                P_CREATED_BY IN FIDE_DIRECCION_DISTRITO_TB.CREATED_BY%TYPE,
                                                P_CREATION_DATE IN FIDE_DIRECCION_DISTRITO_TB.CREATION_DATE%TYPE,
                                                P_MODIFIED_BY IN FIDE_DIRECCION_DISTRITO_TB.MODIFIED_BY%TYPE,
                                                P_MODIFICATION_DATE IN FIDE_DIRECCION_DISTRITO_TB.MODIFICATION_DATE%TYPE
        )
        IS
        BEGIN 
        INSERT INTO FIDE_DIRECCION_DISTRITO_TB(ID_ESTADO_FK, NOMBRE_DISTRITO,CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
        VALUES(P_ESTADO, P_NOMBRE_DISTRITO, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
        EXCEPTION
                WHEN NO_DATA_FOUND THEN
                        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
                WHEN OTHERS THEN
                        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
        END INSERT_DIRECCION_DISTRITO_TB_SP;
        
    --Creacion procedimiento de update para la tabla FIDE_DIRECCION_DISTRITO_TB
    PROCEDURE UPDATE_DIRECCION_DISTRITO_TB_SP(
        P_ID_DIRECCION_DISTRITO IN FIDE_DIRECCION_DISTRITO_TB.ID_DIRECCION_DISTRITO_PK%TYPE,
        P_NOMBRE_DISTRITO IN FIDE_DIRECCION_DISTRITO_TB.NOMBRE_DISTRITO%TYPE,
        P_MODIFIED_BY IN FIDE_DIRECCION_DISTRITO_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_DIRECCION_DISTRITO_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_DIRECCION_DISTRITO_TB
        SET NOMBRE_DISTRITO = P_NOMBRE_DISTRITO,
            MODIFIED_BY = P_MODIFIED_BY,
            MODIFICATION_DATE = P_MODIFICATION_DATE
        WHERE ID_DIRECCION_DISTRITO_PK = P_ID_DIRECCION_DISTRITO;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro actualizado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al actualizar el registro: ' || SQLERRM);
    END UPDATE_DIRECCION_DISTRITO_TB_SP;
    
    --Procedimiento para hacer un soft delete de la tabla FIDE_DIRECCION_DISTRITO_TB
    PROCEDURE DESACTIVAR_DIRECCION_DISTRITO_TB_SP(
        P_ID_DIRECCION_DISTRITO IN FIDE_DIRECCION_DISTRITO_TB.ID_DIRECCION_DISTRITO_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_DIRECCION_DISTRITO_TB
        SET ID_ESTADO_FK = 0
        WHERE ID_DIRECCION_DISTRITO_PK = P_ID_DIRECCION_DISTRITO;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro desactivado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al desactivar el registro: ' || SQLERRM);
    END DESACTIVAR_DIRECCION_DISTRITO_TB_SP;
    
    --Creacion procedimiento de inserciones FIDE_DIRECCION_TB
    PROCEDURE INSERT_DIRECCION_TB_SP(
                                                P_ESTADO IN FIDE_DIRECCION_TB.ID_ESTADO_FK%TYPE,
                                                P_DIRECCION_PROVINCIA IN FIDE_DIRECCION_TB.ID_DIRECCION_PROVINCIA_FK%TYPE,
                                                P_DIRECCION_CANTON IN FIDE_DIRECCION_TB.ID_DIRECCION_CANTON_FK%TYPE,
                                                P_DIRECCION_DISTRITO IN FIDE_DIRECCION_TB.ID_DIRECCION_DISTRITO_FK%TYPE,
                                                P_DIRECCION_SENNAS IN FIDE_DIRECCION_TB.DIRECCION_SENNAS%TYPE,
                                                P_CREATED_BY IN FIDE_DIRECCION_TB.CREATED_BY%TYPE,
                                                P_CREATION_DATE IN FIDE_DIRECCION_TB.CREATION_DATE%TYPE,
                                                P_MODIFIED_BY IN FIDE_DIRECCION_TB.MODIFIED_BY%TYPE,
                                                P_MODIFICATION_DATE IN FIDE_DIRECCION_TB.MODIFICATION_DATE%TYPE
        )
        IS
        BEGIN 
        INSERT INTO FIDE_DIRECCION_TB(ID_ESTADO_FK, ID_DIRECCION_PROVINCIA_FK, ID_DIRECCION_CANTON_FK, ID_DIRECCION_DISTRITO_FK, DIRECCION_SENNAS,
                                        CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
        VALUES(P_ESTADO, P_DIRECCION_PROVINCIA, P_DIRECCION_CANTON, P_DIRECCION_DISTRITO, P_DIRECCION_SENNAS,
                P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
        EXCEPTION
                WHEN NO_DATA_FOUND THEN
                        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
                WHEN OTHERS THEN
                        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
        END INSERT_DIRECCION_TB_SP;
    
    --Creacion procedimiento de update para la tabla FIDE_DIRECCION_TB
    PROCEDURE UPDATE_DIRECCION_TB_SP(
        P_ID_DIRECCION IN FIDE_DIRECCION_TB.ID_DIRECCION_PK%TYPE,
        P_DIRECCION_SENNAS IN FIDE_DIRECCION_TB.DIRECCION_SENNAS%TYPE,
        P_MODIFIED_BY IN FIDE_DIRECCION_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_DIRECCION_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_DIRECCION_TB
        SET DIRECCION_SENNAS = P_DIRECCION_SENNAS,
            MODIFIED_BY = P_MODIFIED_BY,
            MODIFICATION_DATE = P_MODIFICATION_DATE
        WHERE ID_DIRECCION_PK = P_ID_DIRECCION;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro actualizado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al actualizar el registro: ' || SQLERRM);
    END UPDATE_DIRECCION_TB_SP;
    
    --Procedimiento para hacer un soft delete de la tabla FIDE_DIRECCION_TB
    PROCEDURE DESACTIVAR_DIRECCION_TB_SP(
        P_ID_DIRECCION IN FIDE_DIRECCION_TB.ID_DIRECCION_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_DIRECCION_TB
        SET ID_ESTADO_FK = 0
        WHERE ID_DIRECCION_PK = P_ID_DIRECCION;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro desactivado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al desactivar el registro: ' || SQLERRM);
    END DESACTIVAR_DIRECCION_TB_SP;
    
    
    --Creacion procedimiento de inserciones FIDE_TELEFONO_CONTACTO_TB
    PROCEDURE INSERT_TELEFONO_CONTACTO_TB_SP(
                                                P_ESTADO IN FIDE_TELEFONO_CONTACTO_TB.ID_ESTADO_FK%TYPE,
                                                P_TELEFONO_CONTACTO IN FIDE_TELEFONO_CONTACTO_TB.TELEFONO_CONTACTO%TYPE,
                                                P_CREATED_BY IN FIDE_TELEFONO_CONTACTO_TB.CREATED_BY%TYPE,
                                                P_CREATION_DATE IN FIDE_TELEFONO_CONTACTO_TB.CREATION_DATE%TYPE,
                                                P_MODIFIED_BY IN FIDE_TELEFONO_CONTACTO_TB.MODIFIED_BY%TYPE,
                                                P_MODIFICATION_DATE IN FIDE_TELEFONO_CONTACTO_TB.MODIFICATION_DATE%TYPE
        )
        IS
        BEGIN 
        INSERT INTO FIDE_TELEFONO_CONTACTO_TB(ID_ESTADO_FK, TELEFONO_CONTACTO,CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
        VALUES(P_ESTADO, P_TELEFONO_CONTACTO, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
        EXCEPTION
                WHEN NO_DATA_FOUND THEN
                        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
                WHEN OTHERS THEN
                        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
        END INSERT_TELEFONO_CONTACTO_TB_SP;
    
    --Creacion procedimiento de update para la tabla FIDE_TELEFONO_CONTACTO_TB
    PROCEDURE UPDATE_TELEFONO_CONTACTO_TB_SP(
        P_ID_TELEFONO_CONTACTO IN FIDE_TELEFONO_CONTACTO_TB.ID_TELEFONO_CONTACTO_PK%TYPE,
        P_TELEFONO_CONTACTO IN FIDE_TELEFONO_CONTACTO_TB.TELEFONO_CONTACTO%TYPE,
        P_MODIFIED_BY IN FIDE_TELEFONO_CONTACTO_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_TELEFONO_CONTACTO_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_TELEFONO_CONTACTO_TB
        SET TELEFONO_CONTACTO = P_TELEFONO_CONTACTO,
            MODIFIED_BY = P_MODIFIED_BY,
            MODIFICATION_DATE = P_MODIFICATION_DATE
        WHERE ID_TELEFONO_CONTACTO_PK = P_ID_TELEFONO_CONTACTO;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro actualizado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al actualizar el registro: ' || SQLERRM);
    END UPDATE_TELEFONO_CONTACTO_TB_SP;
    
    --Procedimiento para hacer un soft delete de la tabla FIDE_TELEFONO_CONTACTO_TB
    PROCEDURE DESACTIVAR_TELEFONO_CONTACTO_TB_SP(
        P_ID_TELEFONO_CONTACTO IN FIDE_TELEFONO_CONTACTO_TB.ID_TELEFONO_CONTACTO_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_TELEFONO_CONTACTO_TB
        SET ID_ESTADO_FK = 0
        WHERE ID_TELEFONO_CONTACTO_PK = P_ID_TELEFONO_CONTACTO;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro desactivado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al desactivar el registro: ' || SQLERRM);
    END DESACTIVAR_TELEFONO_CONTACTO_TB_SP;
    
    --Creacion procedimiento de inserciones FIDE_TIPO_USUARIO_TB
    PROCEDURE INSERT_TIPO_USUARIO_TB_SP(
                                                P_ESTADO IN FIDE_TIPO_USUARIO_TB.ID_ESTADO_FK%TYPE,
                                                P_DESCRIPCION_TIPO_USUARIO IN FIDE_TIPO_USUARIO_TB.DESCRIPCION_TIPO_USUARIO%TYPE,
                                                P_CREATED_BY IN FIDE_TIPO_USUARIO_TB.CREATED_BY%TYPE,
                                                P_CREATION_DATE IN FIDE_TIPO_USUARIO_TB.CREATION_DATE%TYPE,
                                                P_MODIFIED_BY IN FIDE_TIPO_USUARIO_TB.MODIFIED_BY%TYPE,
                                                P_MODIFICATION_DATE IN FIDE_TIPO_USUARIO_TB.MODIFICATION_DATE%TYPE
        )
        IS
        BEGIN 
        INSERT INTO FIDE_TIPO_USUARIO_TB(ID_ESTADO_FK, DESCRIPCION_TIPO_USUARIO,CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
        VALUES(P_ESTADO, P_DESCRIPCION_TIPO_USUARIO, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
        EXCEPTION
                WHEN NO_DATA_FOUND THEN
                        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
                WHEN OTHERS THEN
                        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
        END INSERT_TIPO_USUARIO_TB_SP;
    
    --Creacion procedimiento de update para la tabla FIDE_TIPO_USUARIO_TB
    PROCEDURE UPDATE_TIPO_USUARIO_TB_SP(
        P_ID_TIPO_USUARIO IN FIDE_TIPO_USUARIO_TB.ID_TIPO_USUARIO_PK%TYPE,
        P_DESCRIPCION_TIPO_USUARIO IN FIDE_TIPO_USUARIO_TB.DESCRIPCION_TIPO_USUARIO%TYPE,
        P_MODIFIED_BY IN FIDE_TIPO_USUARIO_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_TIPO_USUARIO_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_TIPO_USUARIO_TB
        SET DESCRIPCION_TIPO_USUARIO = P_DESCRIPCION_TIPO_USUARIO,
            MODIFIED_BY = P_MODIFIED_BY,
            MODIFICATION_DATE = P_MODIFICATION_DATE
        WHERE ID_TIPO_USUARIO_PK = P_ID_TIPO_USUARIO;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro actualizado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al actualizar el registro: ' || SQLERRM);
    END UPDATE_TIPO_USUARIO_TB_SP;
    
    --Procedimiento para hacer un soft delete de la tabla FIDE_TIPO_USUARIO_TB
    PROCEDURE DESACTIVAR_TIPO_USUARIO_TB_SP(
        P_ID_TIPO_USUARIO IN FIDE_TIPO_USUARIO_TB.ID_TIPO_USUARIO_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_TIPO_USUARIO_TB
        SET ID_ESTADO_FK = 0  -- Asumiendo que 0 representa "inactivo"
        WHERE ID_TIPO_USUARIO_PK = P_ID_TIPO_USUARIO;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro desactivado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al desactivar el registro: ' || SQLERRM);
    END DESACTIVAR_TIPO_USUARIO_TB_SP;
    
    --Creacion procedimiento de inserciones FIDE_ESPECIALIDAD_TB
    PROCEDURE INSERT_ESPECIALIDAD_TB_SP(
                                                P_ESTADO IN FIDE_ESPECIALIDAD_TB.ID_ESTADO_FK%TYPE,
                                                P_NOMBRE_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.NOMBRE_ESPECIALIDAD%TYPE,
                                                P_DESCRIPCION_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.DESCRIPCION_ESPECIALIDAD%TYPE,
                                                P_CREATED_BY IN FIDE_ESPECIALIDAD_TB.CREATED_BY%TYPE,
                                                P_CREATION_DATE IN FIDE_ESPECIALIDAD_TB.CREATION_DATE%TYPE,
                                                P_MODIFIED_BY IN FIDE_ESPECIALIDAD_TB.MODIFIED_BY%TYPE,
                                                P_MODIFICATION_DATE IN FIDE_ESPECIALIDAD_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN 
    INSERT INTO FIDE_ESPECIALIDAD_TB(ID_ESTADO_FK, NOMBRE_ESPECIALIDAD, DESCRIPCION_ESPECIALIDAD,CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
    VALUES(P_ESTADO, P_NOMBRE_ESPECIALIDAD, P_DESCRIPCION_ESPECIALIDAD, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
            WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
            WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END INSERT_ESPECIALIDAD_TB_SP;
    
    --Creacion procedimiento de update para la tabla FIDE_ESPECIALIDAD_TB
    PROCEDURE UPDATE_ESPECIALIDAD_TB_SP(
        P_ID_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.ID_ESPECIALIDAD_PK%TYPE,
        P_NOMBRE_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.NOMBRE_ESPECIALIDAD%TYPE,
        P_DESCRIPCION_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.DESCRIPCION_ESPECIALIDAD%TYPE,
        P_MODIFIED_BY IN FIDE_ESPECIALIDAD_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_ESPECIALIDAD_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_ESPECIALIDAD_TB
        SET NOMBRE_ESPECIALIDAD = P_NOMBRE_ESPECIALIDAD,
            DESCRIPCION_ESPECIALIDAD = P_DESCRIPCION_ESPECIALIDAD,
            MODIFIED_BY = P_MODIFIED_BY,
            MODIFICATION_DATE = P_MODIFICATION_DATE
        WHERE ID_ESPECIALIDAD_PK = P_ID_ESPECIALIDAD;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro actualizado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al actualizar el registro: ' || SQLERRM);
    END UPDATE_ESPECIALIDAD_TB_SP;
    
    --Procedimiento para hacer un soft delete de la tabla FIDE_ESPECIALIDAD_TB
    PROCEDURE DESACTIVAR_ESPECIALIDAD_TB_SP(
        P_ID_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.ID_ESPECIALIDAD_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_ESPECIALIDAD_TB
        SET ID_ESTADO_FK = 0
        WHERE ID_ESPECIALIDAD_PK = P_ID_ESPECIALIDAD;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro desactivado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al desactivar el registro: ' || SQLERRM);
    END DESACTIVAR_ESPECIALIDAD_TB_SP;
    
    --Procedimiento de inserciones FIDE_USUARIOS_TB
    PROCEDURE INSERT_USUARIOS_TB_SP(
                                                P_ESTADO IN FIDE_USUARIOS_TB.ID_ESTADO_FK%TYPE,
                                                P_ESPECIALIDAD IN FIDE_USUARIOS_TB.ID_ESPECIALIDAD_FK%TYPE,
                                                P_ID_TIPO_USUARIO IN FIDE_USUARIOS_TB.ID_TIPO_USUARIO_FK%TYPE,
                                                P_USUARIO_NOMBRE IN FIDE_USUARIOS_TB.USUARIO_NOMBRE%TYPE,
                                                P_USUARIO_CORREO IN FIDE_USUARIOS_TB.USUARIO_CORREO%TYPE,
                                                P_USUARIO_CONTRASENNA IN FIDE_USUARIOS_TB.USUARIO_CONTRASENNA%TYPE,
                                                P_USUARIO_IDENTIFICACION IN FIDE_USUARIOS_TB.USUARIO_IDENTIFICACION%TYPE,
                                                P_USUARIO_FECHA_REGISTRO IN FIDE_USUARIOS_TB.USUARIO_FECHA_REGISTRO%TYPE,
                                                P_USUARIO_CUENTA_BANCARIAO IN FIDE_USUARIOS_TB.USUARIO_CUENTA_BANCARIA%TYPE,                                            
                                                P_CREATED_BY IN FIDE_USUARIOS_TB.CREATED_BY%TYPE,
                                                P_CREATION_DATE IN FIDE_USUARIOS_TB.CREATION_DATE%TYPE,
                                                P_MODIFIED_BY IN FIDE_USUARIOS_TB.MODIFIED_BY%TYPE,
                                                P_MODIFICATION_DATE IN FIDE_USUARIOS_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN 
    INSERT INTO FIDE_USUARIOS_TB(ID_ESTADO_FK, ID_ESPECIALIDAD_FK, ID_TIPO_USUARIO_FK, USUARIO_NOMBRE, USUARIO_CORREO, USUARIO_CONTRASENNA, USUARIO_IDENTIFICACION, USUARIO_FECHA_REGISTRO,
                                    USUARIO_CUENTA_BANCARIA, CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
    VALUES(P_ESTADO, P_ESPECIALIDAD, P_ID_TIPO_USUARIO, P_USUARIO_NOMBRE, P_USUARIO_CORREO, P_USUARIO_CONTRASENNA, P_USUARIO_IDENTIFICACION, P_USUARIO_FECHA_REGISTRO, 
    P_USUARIO_CUENTA_BANCARIAO, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
            WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
            WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END INSERT_USUARIOS_TB_SP;
    
    --Creacion procedimiento de update para la tabla FIDE_USUARIOS_TB
    PROCEDURE UPDATE_USUARIOS_TB_SP(
        P_ID_USUARIO IN FIDE_USUARIOS_TB.ID_USUARIO_PK%TYPE,
        P_ID_ESPECIALIDAD_FK IN FIDE_USUARIOS_TB.ID_ESPECIALIDAD_FK%TYPE,
        P_ID_TIPO_USUARIO_FK IN FIDE_USUARIOS_TB.ID_TIPO_USUARIO_FK%TYPE,
        P_ID_DIRECCION_FK IN FIDE_USUARIOS_TB.ID_DIRECCION_FK%TYPE,
        P_ID_TELEFONO_CONTACTO_FK IN FIDE_USUARIOS_TB.ID_TELEFONO_CONTACTO_FK%TYPE,
        P_USUARIO_NOMBRE IN FIDE_USUARIOS_TB.USUARIO_NOMBRE%TYPE,
        P_USUARIO_CORREO IN FIDE_USUARIOS_TB.USUARIO_CORREO%TYPE,
        P_USUARIO_CONTRASENNA IN FIDE_USUARIOS_TB.USUARIO_CONTRASENNA%TYPE,
        P_USUARIO_IDENTIFICACION IN FIDE_USUARIOS_TB.USUARIO_IDENTIFICACION%TYPE,
        P_USUARIO_FECHA_REGISTRO IN FIDE_USUARIOS_TB.USUARIO_FECHA_REGISTRO%TYPE,
        P_USUARIO_CUENTA_BANCARIA IN FIDE_USUARIOS_TB.USUARIO_CUENTA_BANCARIA%TYPE,
        P_MODIFIED_BY IN FIDE_USUARIOS_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_USUARIOS_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_USUARIOS_TB
        SET 
            ID_ESPECIALIDAD_FK = P_ID_ESPECIALIDAD_FK,
            ID_TIPO_USUARIO_FK = P_ID_TIPO_USUARIO_FK,
            ID_DIRECCION_FK = P_ID_DIRECCION_FK,
            ID_TELEFONO_CONTACTO_FK = P_ID_TELEFONO_CONTACTO_FK,
            USUARIO_NOMBRE = P_USUARIO_NOMBRE,
            USUARIO_CORREO = P_USUARIO_CORREO,
            USUARIO_CONTRASENNA = P_USUARIO_CONTRASENNA,
            USUARIO_IDENTIFICACION = P_USUARIO_IDENTIFICACION,
            USUARIO_FECHA_REGISTRO = P_USUARIO_FECHA_REGISTRO,
            USUARIO_CUENTA_BANCARIA = P_USUARIO_CUENTA_BANCARIA,
            MODIFIED_BY = P_MODIFIED_BY,
            MODIFICATION_DATE = P_MODIFICATION_DATE
        WHERE ID_USUARIO_PK = P_ID_USUARIO;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro actualizado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al actualizar el registro: ' || SQLERRM);
    END UPDATE_USUARIOS_TB_SP;
    
    --Procedimiento para hacer un soft delete de la tabla FIDE_USUARIOS_TB
    PROCEDURE DESACTIVAR_USUARIOS_TB_SP(
        P_ID_USUARIO IN FIDE_USUARIOS_TB.ID_USUARIO_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_USUARIOS_TB
        SET ID_ESTADO_FK = 0
        WHERE ID_USUARIO_PK = P_ID_USUARIO;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Registro desactivado con exito.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al desactivar el registro: ' || SQLERRM);
    END DESACTIVAR_USUARIOS_TB_SP;
    
    --Procedimiento para insertar datos en la tabla de especies
    PROCEDURE INSERT_MASCOTA_ESPECIE_TB_SP(
        P_ID_ESTADO_FK         IN FIDE_MASCOTA_ESPECIE_TB.ID_ESTADO_FK%TYPE,
        P_NOMBRE_ESPECIE       IN FIDE_MASCOTA_ESPECIE_TB.NOMBRE_ESPECIE%TYPE,
        P_CREATED_BY           IN FIDE_MASCOTA_ESPECIE_TB.CREATED_BY%TYPE,
        P_CREATION_DATE        IN FIDE_MASCOTA_ESPECIE_TB.CREATION_DATE%TYPE,
        P_MODIFIED_BY          IN FIDE_MASCOTA_ESPECIE_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE    IN FIDE_MASCOTA_ESPECIE_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        INSERT INTO FIDE_MASCOTA_ESPECIE_TB (
            ID_ESTADO_FK,
            NOMBRE_ESPECIE,
            CREATED_BY,
            CREATION_DATE,
            MODIFIED_BY,
            MODIFICATION_DATE
        )
        VALUES (
            P_ID_ESTADO_FK,
            P_NOMBRE_ESPECIE,
            P_CREATED_BY,
            P_CREATION_DATE,
            P_MODIFIED_BY,
            P_MODIFICATION_DATE
        );
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END INSERT_MASCOTA_ESPECIE_TB_SP;
    
    --Procedimiento para hacer update de la tabla especies
    PROCEDURE UPDATE_MASCOTA_ESPECIE_TB_SP(
        P_ID_MASCOTA_ESPECIE   IN FIDE_MASCOTA_ESPECIE_TB.ID_MASCOTA_ESPECIE_PK%TYPE,
        P_ID_ESTADO_FK         IN FIDE_MASCOTA_ESPECIE_TB.ID_ESTADO_FK%TYPE,
        P_NOMBRE_ESPECIE       IN FIDE_MASCOTA_ESPECIE_TB.NOMBRE_ESPECIE%TYPE,
        P_MODIFIED_BY          IN FIDE_MASCOTA_ESPECIE_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE    IN FIDE_MASCOTA_ESPECIE_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_MASCOTA_ESPECIE_TB
           SET ID_ESTADO_FK       = P_ID_ESTADO_FK,
               NOMBRE_ESPECIE     = P_NOMBRE_ESPECIE,
               MODIFIED_BY        = P_MODIFIED_BY,
               MODIFICATION_DATE  = P_MODIFICATION_DATE
         WHERE ID_MASCOTA_ESPECIE_PK = P_ID_MASCOTA_ESPECIE;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END UPDATE_MASCOTA_ESPECIE_TB_SP;
    
    --Procedimiento para hacer un soft delete de la tabla especies
    PROCEDURE DESACTIVAR_MASCOTA_ESPECIE_TB_SP (
        P_ID_MASCOTA_ESPECIE  IN FIDE_MASCOTA_ESPECIE_TB.ID_MASCOTA_ESPECIE_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_MASCOTA_ESPECIE_TB
           SET ID_ESTADO_FK = 0
         WHERE ID_MASCOTA_ESPECIE_PK = P_ID_MASCOTA_ESPECIE;
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END DESACTIVAR_MASCOTA_ESPECIE_TB_SP;
    
    --Procedimiento para insertar de razas
    PROCEDURE INSERT_MASCOTA_RAZA_TB_SP(
        P_ID_ESTADO_FK        IN FIDE_MASCOTA_RAZA_TB.ID_ESTADO_FK%TYPE,
        P_NOMBRE_RAZA         IN FIDE_MASCOTA_RAZA_TB.NOMBRE_RAZA%TYPE,
        P_CREATED_BY          IN FIDE_MASCOTA_RAZA_TB.CREATED_BY%TYPE,
        P_CREATION_DATE       IN FIDE_MASCOTA_RAZA_TB.CREATION_DATE%TYPE,
        P_MODIFIED_BY         IN FIDE_MASCOTA_RAZA_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE   IN FIDE_MASCOTA_RAZA_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        INSERT INTO FIDE_MASCOTA_RAZA_TB (
            ID_ESTADO_FK,
            NOMBRE_RAZA,
            CREATED_BY,
            CREATION_DATE,
            MODIFIED_BY,
            MODIFICATION_DATE
        )
        VALUES (
            P_ID_ESTADO_FK,
            P_NOMBRE_RAZA,
            P_CREATED_BY,
            P_CREATION_DATE,
            P_MODIFIED_BY,
            P_MODIFICATION_DATE
        );
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END INSERT_MASCOTA_RAZA_TB_SP;
    
    --Procedimiento para modificar razas
    PROCEDURE UPDATE_MASCOTA_RAZA_TB_SP(
        P_ID_MASCOTA_RAZA   IN FIDE_MASCOTA_RAZA_TB.ID_MASCOTA_RAZA_PK%TYPE,
        P_ID_ESTADO_FK      IN FIDE_MASCOTA_RAZA_TB.ID_ESTADO_FK%TYPE,
        P_NOMBRE_RAZA       IN FIDE_MASCOTA_RAZA_TB.NOMBRE_RAZA%TYPE,
        P_MODIFIED_BY       IN FIDE_MASCOTA_RAZA_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE IN FIDE_MASCOTA_RAZA_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_MASCOTA_RAZA_TB
           SET ID_ESTADO_FK       = P_ID_ESTADO_FK,
               NOMBRE_RAZA        = P_NOMBRE_RAZA,
               MODIFIED_BY        = P_MODIFIED_BY,
               MODIFICATION_DATE  = P_MODIFICATION_DATE
         WHERE ID_MASCOTA_RAZA_PK = P_ID_MASCOTA_RAZA;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END UPDATE_MASCOTA_RAZA_TB_SP;
    
    --Procedimiento para hacer soft delete de razas
    PROCEDURE DESACTIVAR_MASCOTA_RAZA_TB_SP (
        P_ID_MASCOTA_RAZA  IN FIDE_MASCOTA_RAZA_TB.ID_MASCOTA_RAZA_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_MASCOTA_RAZA_TB
           SET ID_ESTADO_FK = 0
         WHERE ID_MASCOTA_RAZA_PK = P_ID_MASCOTA_RAZA;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END DESACTIVAR_MASCOTA_RAZA_TB_SP;
    
        
    --Procedimiento para insertar mascotas
    PROCEDURE INSERT_MASCOTA_TB_SP (
        P_ID_ESTADO_FK           IN FIDE_MASCOTA_TB.ID_ESTADO_FK%TYPE,
        P_ID_MASCOTA_ESPECIE_FK  IN FIDE_MASCOTA_TB.ID_MASCOTA_ESPECIE_FK%TYPE,
        P_ID_MASCOTA_RAZA_FK     IN FIDE_MASCOTA_TB.ID_MASCOTA_RAZA_FK%TYPE,
        P_ID_USUARIO_FK          IN FIDE_MASCOTA_TB.ID_USUARIO_FK%TYPE,
        P_NOMBRE_MASCOTA         IN FIDE_MASCOTA_TB.NOMBRE_MASCOTA%TYPE,
        P_FECHA_NACIMIENTO       IN FIDE_MASCOTA_TB.FECHA_NACIMIENTO%TYPE,
        P_GENERO                 IN FIDE_MASCOTA_TB.GENERO%TYPE,
        P_CREATED_BY             IN FIDE_MASCOTA_TB.CREATED_BY%TYPE,
        P_CREATION_DATE          IN FIDE_MASCOTA_TB.CREATION_DATE%TYPE,
        P_MODIFIED_BY            IN FIDE_MASCOTA_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE      IN FIDE_MASCOTA_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        INSERT INTO FIDE_MASCOTA_TB (
             ID_ESTADO_FK,
             ID_MASCOTA_ESPECIE_FK,
             ID_MASCOTA_RAZA_FK,
             ID_USUARIO_FK,
             NOMBRE_MASCOTA,
             FECHA_NACIMIENTO,
             GENERO,
             CREATED_BY,
             CREATION_DATE,
             MODIFIED_BY,
             MODIFICATION_DATE
        )
        VALUES (
             P_ID_ESTADO_FK,
             P_ID_MASCOTA_ESPECIE_FK,
             P_ID_MASCOTA_RAZA_FK,
             P_ID_USUARIO_FK,
             P_NOMBRE_MASCOTA,
             P_FECHA_NACIMIENTO,
             P_GENERO,
             P_CREATED_BY,
             P_CREATION_DATE,
             P_MODIFIED_BY,
             P_MODIFICATION_DATE
        );
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMIQUESE CON TI: ' || SQLERRM);
    END INSERT_MASCOTA_TB_SP;
    
    --Procedimiento para modificar mascotas
    PROCEDURE UPDATE_MASCOTA_TB_SP(
        P_ID_MASCOTA             IN FIDE_MASCOTA_TB.ID_MASCOTA_PK%TYPE,
        P_ID_ESTADO_FK           IN FIDE_MASCOTA_TB.ID_ESTADO_FK%TYPE,
        P_ID_MASCOTA_ESPECIE_FK  IN FIDE_MASCOTA_TB.ID_MASCOTA_ESPECIE_FK%TYPE,
        P_ID_MASCOTA_RAZA_FK     IN FIDE_MASCOTA_TB.ID_MASCOTA_RAZA_FK%TYPE,
        P_ID_USUARIO_FK          IN FIDE_MASCOTA_TB.ID_USUARIO_FK%TYPE,
        P_NOMBRE_MASCOTA         IN FIDE_MASCOTA_TB.NOMBRE_MASCOTA%TYPE,
        P_FECHA_NACIMIENTO       IN FIDE_MASCOTA_TB.FECHA_NACIMIENTO%TYPE,
        P_GENERO                 IN FIDE_MASCOTA_TB.GENERO%TYPE,
        P_MODIFIED_BY            IN FIDE_MASCOTA_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE      IN FIDE_MASCOTA_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_MASCOTA_TB
           SET ID_ESTADO_FK          = P_ID_ESTADO_FK,
               ID_MASCOTA_ESPECIE_FK = P_ID_MASCOTA_ESPECIE_FK,
               ID_MASCOTA_RAZA_FK    = P_ID_MASCOTA_RAZA_FK,
               ID_USUARIO_FK         = P_ID_USUARIO_FK,
               NOMBRE_MASCOTA        = P_NOMBRE_MASCOTA,
               FECHA_NACIMIENTO      = P_FECHA_NACIMIENTO,
               GENERO                = P_GENERO,
               MODIFIED_BY           = P_MODIFIED_BY,
               MODIFICATION_DATE     = P_MODIFICATION_DATE
         WHERE ID_MASCOTA_PK         = P_ID_MASCOTA;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END UPDATE_MASCOTA_TB_SP;
    
    --Procedimiento para hacer soft delete de mascotas
    PROCEDURE DESACTIVAR_MASCOTA_TB_SP (
        P_ID_MASCOTA IN FIDE_MASCOTA_TB.ID_MASCOTA_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_MASCOTA_TB
           SET ID_ESTADO_FK = 0
         WHERE ID_MASCOTA_PK = P_ID_MASCOTA;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END DESACTIVAR_MASCOTA_TB_SP;
    
    --Procedimiento para insertar tipos de examen
    PROCEDURE INSERT_TIPO_EXAMEN_TB_SP(
        P_ID_ESTADO_FK         IN FIDE_TIPO_EXAMEN_TB.ID_ESTADO_FK%TYPE,
        P_DESCRIPCION_EXAMEN   IN FIDE_TIPO_EXAMEN_TB.DESCRIPCION_EXAMEN%TYPE,
        P_CREATED_BY           IN FIDE_TIPO_EXAMEN_TB.CREATED_BY%TYPE,
        P_CREATION_DATE        IN FIDE_TIPO_EXAMEN_TB.CREATION_DATE%TYPE,
        P_MODIFIED_BY          IN FIDE_TIPO_EXAMEN_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE    IN FIDE_TIPO_EXAMEN_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        INSERT INTO FIDE_TIPO_EXAMEN_TB (
            ID_ESTADO_FK,
            DESCRIPCION_EXAMEN,
            CREATED_BY,
            CREATION_DATE,
            MODIFIED_BY,
            MODIFICATION_DATE
        )
        VALUES (
            P_ID_ESTADO_FK,
            P_DESCRIPCION_EXAMEN,
            P_CREATED_BY,
            P_CREATION_DATE,
            P_MODIFIED_BY,
            P_MODIFICATION_DATE
        );
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END INSERT_TIPO_EXAMEN_TB_SP;
    
    --Procedimiento para modificar tipos de examen
    PROCEDURE UPDATE_TIPO_EXAMEN_TB_SP(
        P_ID_TIPO_EXAMEN       IN FIDE_TIPO_EXAMEN_TB.ID_TIPO_EXAMEN_PK%TYPE,
        P_ID_ESTADO_FK         IN FIDE_TIPO_EXAMEN_TB.ID_ESTADO_FK%TYPE,
        P_DESCRIPCION_EXAMEN   IN FIDE_TIPO_EXAMEN_TB.DESCRIPCION_EXAMEN%TYPE,
        P_MODIFIED_BY          IN FIDE_TIPO_EXAMEN_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE    IN FIDE_TIPO_EXAMEN_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_TIPO_EXAMEN_TB
           SET ID_ESTADO_FK       = P_ID_ESTADO_FK,
               DESCRIPCION_EXAMEN = P_DESCRIPCION_EXAMEN,
               MODIFIED_BY        = P_MODIFIED_BY,
               MODIFICATION_DATE  = P_MODIFICATION_DATE
         WHERE ID_TIPO_EXAMEN_PK   = P_ID_TIPO_EXAMEN;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END UPDATE_TIPO_EXAMEN_TB_SP;
    
    --Procedimiento para hacer soft delete de examenes
    PROCEDURE DESACTIVAR_TIPO_EXAMEN_TB_SP (
        P_ID_TIPO_EXAMEN IN FIDE_TIPO_EXAMEN_TB.ID_TIPO_EXAMEN_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_TIPO_EXAMEN_TB
           SET ID_ESTADO_FK = 0
         WHERE ID_TIPO_EXAMEN_PK = P_ID_TIPO_EXAMEN;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END DESACTIVAR_TIPO_EXAMEN_TB_SP;
    
    --Procedimiento para insertar resultados de examenes
    PROCEDURE INSERT_EXAMENES_TB_SP(
        P_ID_MASCOTA_FK             IN FIDE_EXAMENES_TB.ID_MASCOTA_FK%TYPE,
        P_ID_ESTADO_FK              IN FIDE_EXAMENES_TB.ID_ESTADO_FK%TYPE,
        P_ID_TIPO_EXAMEN_FK         IN FIDE_EXAMENES_TB.ID_TIPO_EXAMEN_FK%TYPE,
        P_EXAMEN_RESULTADO          IN FIDE_EXAMENES_TB.EXAMEN_RESULTADO%TYPE,
        P_EXAMEN_FECHA_SEGUIMIENTO  IN FIDE_EXAMENES_TB.EXAMEN_FECHA_SEGUIMIENTO%TYPE,
        P_CREATED_BY                IN FIDE_EXAMENES_TB.CREATED_BY%TYPE,
        P_CREATION_DATE             IN FIDE_EXAMENES_TB.CREATION_DATE%TYPE,
        P_MODIFIED_BY               IN FIDE_EXAMENES_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE         IN FIDE_EXAMENES_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        INSERT INTO FIDE_EXAMENES_TB (
             ID_MASCOTA_FK,
             ID_ESTADO_FK,
             ID_TIPO_EXAMEN_FK,
             EXAMEN_RESULTADO,
             EXAMEN_FECHA_SEGUIMIENTO,
             CREATED_BY,
             CREATION_DATE,
             MODIFIED_BY,
             MODIFICATION_DATE
        )
        VALUES (
             P_ID_MASCOTA_FK,
             P_ID_ESTADO_FK,
             P_ID_TIPO_EXAMEN_FK,
             P_EXAMEN_RESULTADO,
             P_EXAMEN_FECHA_SEGUIMIENTO,
             P_CREATED_BY,
             P_CREATION_DATE,
             P_MODIFIED_BY,
             P_MODIFICATION_DATE
        );
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END INSERT_EXAMENES_TB_SP;
    
    --Procedimiento para modificar resultados de examenes
    PROCEDURE UPDATE_EXAMENES_TB_SP(
        P_ID_EXAMEN              IN FIDE_EXAMENES_TB.ID_EXAMEN_PK%TYPE,
        P_ID_MASCOTA_FK          IN FIDE_EXAMENES_TB.ID_MASCOTA_FK%TYPE,
        P_ID_ESTADO_FK           IN FIDE_EXAMENES_TB.ID_ESTADO_FK%TYPE,
        P_ID_TIPO_EXAMEN_FK      IN FIDE_EXAMENES_TB.ID_TIPO_EXAMEN_FK%TYPE,
        P_EXAMEN_RESULTADO       IN FIDE_EXAMENES_TB.EXAMEN_RESULTADO%TYPE,
        P_EXAMEN_FECHA_SEGUIMIENTO IN FIDE_EXAMENES_TB.EXAMEN_FECHA_SEGUIMIENTO%TYPE,
        P_MODIFIED_BY            IN FIDE_EXAMENES_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE      IN FIDE_EXAMENES_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_EXAMENES_TB
           SET ID_MASCOTA_FK          = P_ID_MASCOTA_FK,
               ID_ESTADO_FK           = P_ID_ESTADO_FK,
               ID_TIPO_EXAMEN_FK      = P_ID_TIPO_EXAMEN_FK,
               EXAMEN_RESULTADO       = P_EXAMEN_RESULTADO,
               EXAMEN_FECHA_SEGUIMIENTO = P_EXAMEN_FECHA_SEGUIMIENTO,
               MODIFIED_BY            = P_MODIFIED_BY,
               MODIFICATION_DATE      = P_MODIFICATION_DATE
         WHERE ID_EXAMEN_PK           = P_ID_EXAMEN;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END UPDATE_EXAMENES_TB_SP;
    
    --Procedmiento para hacer soft delete de resultados de examenes
    PROCEDURE DESACTIVAR_EXAMENES_TB_SP (
        P_ID_EXAMEN IN FIDE_EXAMENES_TB.ID_EXAMEN_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_EXAMENES_TB
           SET ID_ESTADO_FK = 0
         WHERE ID_EXAMEN_PK = P_ID_EXAMEN;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END DESACTIVAR_EXAMENES_TB_SP;
    

    
    --Procedimiento para insertar motivos de consulta
    PROCEDURE INSERT_CONSULTA_MOTIVO_TB_SP(
        P_ID_ESTADO_FK            IN FIDE_CONSULTA_MOTIVO_TB.ID_ESTADO_FK%TYPE,
        P_DESCRIPCION_MOTIVO      IN FIDE_CONSULTA_MOTIVO_TB.DESCRIPCION_MOTIVO%TYPE,
        P_CREATED_BY              IN FIDE_CONSULTA_MOTIVO_TB.CREATED_BY%TYPE,
        P_CREATION_DATE           IN FIDE_CONSULTA_MOTIVO_TB.CREATION_DATE%TYPE,
        P_MODIFIED_BY             IN FIDE_CONSULTA_MOTIVO_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE       IN FIDE_CONSULTA_MOTIVO_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        INSERT INTO FIDE_CONSULTA_MOTIVO_TB (
             ID_ESTADO_FK,
             DESCRIPCION_MOTIVO,
             CREATED_BY,
             CREATION_DATE,
             MODIFIED_BY,
             MODIFICATION_DATE
        )
        VALUES (
             P_ID_ESTADO_FK,
             P_DESCRIPCION_MOTIVO,
             P_CREATED_BY,
             P_CREATION_DATE,
             P_MODIFIED_BY,
             P_MODIFICATION_DATE
        );
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END INSERT_CONSULTA_MOTIVO_TB_SP;
    
    --Procedimiento para modificar motivos de consulta
    PROCEDURE UPDATE_CONSULTA_MOTIVO_TB_SP(
        P_ID_CONSULTA_MOTIVO    IN FIDE_CONSULTA_MOTIVO_TB.ID_CONSULTA_MOTIVO_PK%TYPE,
        P_ID_ESTADO_FK          IN FIDE_CONSULTA_MOTIVO_TB.ID_ESTADO_FK%TYPE,
        P_DESCRIPCION_MOTIVO    IN FIDE_CONSULTA_MOTIVO_TB.DESCRIPCION_MOTIVO%TYPE,
        P_MODIFIED_BY           IN FIDE_CONSULTA_MOTIVO_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE     IN FIDE_CONSULTA_MOTIVO_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_CONSULTA_MOTIVO_TB
           SET ID_ESTADO_FK        = P_ID_ESTADO_FK,
               DESCRIPCION_MOTIVO  = P_DESCRIPCION_MOTIVO,
               MODIFIED_BY         = P_MODIFIED_BY,
               MODIFICATION_DATE   = P_MODIFICATION_DATE
         WHERE ID_CONSULTA_MOTIVO_PK = P_ID_CONSULTA_MOTIVO;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END UPDATE_CONSULTA_MOTIVO_TB_SP;
    
    --Procedimiento para hacer soft delete de motivos de consulta
    PROCEDURE DESACTIVAR_CONSULTA_MOTIVO_TB_SP (
        P_ID_CONSULTA_MOTIVO IN FIDE_CONSULTA_MOTIVO_TB.ID_CONSULTA_MOTIVO_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_CONSULTA_MOTIVO_TB
           SET ID_ESTADO_FK = 0
         WHERE ID_CONSULTA_MOTIVO_PK = P_ID_CONSULTA_MOTIVO;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END DESACTIVAR_CONSULTA_MOTIVO_TB_SP;
    
    
    
    
    --Procedimiento para insertar consultas
    PROCEDURE INSERT_CONSULTAS_TB_SP(
        P_CONSULTA_FECHA          IN FIDE_CONSULTAS_TB.CONSULTA_FECHA%TYPE,
        P_ID_CONSULTA_MOTIVO_FK   IN FIDE_CONSULTAS_TB.ID_CONSULTA_MOTIVO_FK%TYPE,
        P_ID_ESTADO_FK            IN FIDE_CONSULTAS_TB.ID_ESTADO_FK%TYPE,
        P_ID_MASCOTA_FK           IN FIDE_CONSULTAS_TB.ID_MASCOTA_FK%TYPE,
        P_ID_USUARIO_FK           IN FIDE_CONSULTAS_TB.ID_USUARIO_FK%TYPE,
        P_CONSULTA_OBSERVACIONES  IN FIDE_CONSULTAS_TB.CONSULTA_OBSERVACIONES%TYPE,
        P_CREATED_BY              IN FIDE_CONSULTAS_TB.CREATED_BY%TYPE,
        P_CREATION_DATE           IN FIDE_CONSULTAS_TB.CREATION_DATE%TYPE,
        P_MODIFIED_BY             IN FIDE_CONSULTAS_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE       IN FIDE_CONSULTAS_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        INSERT INTO FIDE_CONSULTAS_TB (
            CONSULTA_FECHA,
            ID_CONSULTA_MOTIVO_FK,
            ID_ESTADO_FK,
            ID_MASCOTA_FK,
            ID_USUARIO_FK,
            CONSULTA_OBSERVACIONES,
            CREATED_BY,
            CREATION_DATE,
            MODIFIED_BY,
            MODIFICATION_DATE
        )
        VALUES (
            P_CONSULTA_FECHA,
            P_ID_CONSULTA_MOTIVO_FK,
            P_ID_ESTADO_FK,
            P_ID_MASCOTA_FK,
            P_ID_USUARIO_FK,
            P_CONSULTA_OBSERVACIONES,
            P_CREATED_BY,
            P_CREATION_DATE,
            P_MODIFIED_BY,
            P_MODIFICATION_DATE
        );
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END INSERT_CONSULTAS_TB_SP;
    
    --Procedimiento para modificar consultas
    PROCEDURE UPDATE_CONSULTAS_TB_SP(
        P_ID_CONSULTA             IN FIDE_CONSULTAS_TB.ID_CONSULTA_PK%TYPE,
        P_CONSULTA_FECHA          IN FIDE_CONSULTAS_TB.CONSULTA_FECHA%TYPE,
        P_ID_CONSULTA_MOTIVO_FK   IN FIDE_CONSULTAS_TB.ID_CONSULTA_MOTIVO_FK%TYPE,
        P_ID_ESTADO_FK            IN FIDE_CONSULTAS_TB.ID_ESTADO_FK%TYPE,
        P_ID_MASCOTA_FK           IN FIDE_CONSULTAS_TB.ID_MASCOTA_FK%TYPE,
        P_ID_USUARIO_FK           IN FIDE_CONSULTAS_TB.ID_USUARIO_FK%TYPE,
        P_CONSULTA_OBSERVACIONES  IN FIDE_CONSULTAS_TB.CONSULTA_OBSERVACIONES%TYPE,
        P_MODIFIED_BY             IN FIDE_CONSULTAS_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE       IN FIDE_CONSULTAS_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_CONSULTAS_TB
           SET CONSULTA_FECHA         = P_CONSULTA_FECHA,
               ID_CONSULTA_MOTIVO_FK  = P_ID_CONSULTA_MOTIVO_FK,
               ID_ESTADO_FK           = P_ID_ESTADO_FK,
               ID_MASCOTA_FK          = P_ID_MASCOTA_FK,
               ID_USUARIO_FK          = P_ID_USUARIO_FK,
               CONSULTA_OBSERVACIONES = P_CONSULTA_OBSERVACIONES,
               MODIFIED_BY            = P_MODIFIED_BY,
               MODIFICATION_DATE      = P_MODIFICATION_DATE
         WHERE ID_CONSULTA_PK         = P_ID_CONSULTA;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END UPDATE_CONSULTAS_TB_SP;
    
    --Procedimiento para hacer soft delete de consultas
    PROCEDURE DESACTIVAR_CONSULTAS_TB_SP (
        P_ID_CONSULTA IN FIDE_CONSULTAS_TB.ID_CONSULTA_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_CONSULTAS_TB
           SET ID_ESTADO_FK = 0
         WHERE ID_CONSULTA_PK = P_ID_CONSULTA;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END DESACTIVAR_CONSULTAS_TB_SP;
    
    --Procedimiento para insertar factura
    PROCEDURE INSERT_FACTURACIONES_TB_SP(
        P_ID_CONSULTA_FK          IN FIDE_FACTURACIONES_TB.ID_CONSULTA_FK%TYPE,
        P_ID_ESTADO_FK            IN FIDE_FACTURACIONES_TB.ID_ESTADO_FK%TYPE,
        P_FACTURA_FECHA_EMISION   IN FIDE_FACTURACIONES_TB.FACTURA_FECHA_EMISION%TYPE,
        P_FACTURA_MONTO_TOTAL     IN FIDE_FACTURACIONES_TB.FACTURA_MONTO_TOTAL%TYPE,
        P_FACTURA_DESCUENTO       IN FIDE_FACTURACIONES_TB.FACTURA_DESCUENTO%TYPE,
        P_FACTURA_IMPUESTOS       IN FIDE_FACTURACIONES_TB.FACTURA_IMPUESTOS%TYPE,
        P_FACTURA_MONTO_FINAL     IN FIDE_FACTURACIONES_TB.FACTURA_MONTO_FINAL%TYPE,
        P_FACTURA_SUBTOTAL        IN FIDE_FACTURACIONES_TB.FACTURA_SUBTOTAL%TYPE,
        P_CREATED_BY              IN FIDE_FACTURACIONES_TB.CREATED_BY%TYPE,
        P_CREATION_DATE           IN FIDE_FACTURACIONES_TB.CREATION_DATE%TYPE,
        P_MODIFIED_BY             IN FIDE_FACTURACIONES_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE       IN FIDE_FACTURACIONES_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        INSERT INTO FIDE_FACTURACIONES_TB (
            ID_CONSULTA_FK,
            ID_ESTADO_FK,
            FACTURA_FECHA_EMISION,
            FACTURA_MONTO_TOTAL,
            FACTURA_DESCUENTO,
            FACTURA_IMPUESTOS,
            FACTURA_MONTO_FINAL,
            FACTURA_SUBTOTAL,
            CREATED_BY,
            CREATION_DATE,
            MODIFIED_BY,
            MODIFICATION_DATE
        )
        VALUES (
            P_ID_CONSULTA_FK,
            P_ID_ESTADO_FK,
            P_FACTURA_FECHA_EMISION,
            P_FACTURA_MONTO_TOTAL,
            P_FACTURA_DESCUENTO,
            P_FACTURA_IMPUESTOS,
            P_FACTURA_MONTO_FINAL,
            P_FACTURA_SUBTOTAL,
            P_CREATED_BY,
            P_CREATION_DATE,
            P_MODIFIED_BY,
            P_MODIFICATION_DATE
        );
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END INSERT_FACTURACIONES_TB_SP;
    
    --Procedimiento para modificar factura
    PROCEDURE UPDATE_FACTURACIONES_TB_SP(
        P_ID_FACTURA            IN FIDE_FACTURACIONES_TB.ID_FACTURA_PK%TYPE,
        P_ID_CONSULTA_FK        IN FIDE_FACTURACIONES_TB.ID_CONSULTA_FK%TYPE,
        P_ID_ESTADO_FK          IN FIDE_FACTURACIONES_TB.ID_ESTADO_FK%TYPE,
        P_FACTURA_FECHA_EMISION IN FIDE_FACTURACIONES_TB.FACTURA_FECHA_EMISION%TYPE,
        P_FACTURA_MONTO_TOTAL   IN FIDE_FACTURACIONES_TB.FACTURA_MONTO_TOTAL%TYPE,
        P_FACTURA_DESCUENTO     IN FIDE_FACTURACIONES_TB.FACTURA_DESCUENTO%TYPE,
        P_FACTURA_IMPUESTOS     IN FIDE_FACTURACIONES_TB.FACTURA_IMPUESTOS%TYPE,
        P_FACTURA_MONTO_FINAL   IN FIDE_FACTURACIONES_TB.FACTURA_MONTO_FINAL%TYPE,
        P_FACTURA_SUBTOTAL      IN FIDE_FACTURACIONES_TB.FACTURA_SUBTOTAL%TYPE,
        P_MODIFIED_BY           IN FIDE_FACTURACIONES_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE     IN FIDE_FACTURACIONES_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_FACTURACIONES_TB
           SET ID_CONSULTA_FK          = P_ID_CONSULTA_FK,
               ID_ESTADO_FK            = P_ID_ESTADO_FK,
               FACTURA_FECHA_EMISION   = P_FACTURA_FECHA_EMISION,
               FACTURA_MONTO_TOTAL     = P_FACTURA_MONTO_TOTAL,
               FACTURA_DESCUENTO       = P_FACTURA_DESCUENTO,
               FACTURA_IMPUESTOS       = P_FACTURA_IMPUESTOS,
               FACTURA_MONTO_FINAL     = P_FACTURA_MONTO_FINAL,
               FACTURA_SUBTOTAL        = P_FACTURA_SUBTOTAL,
               MODIFIED_BY             = P_MODIFIED_BY,
               MODIFICATION_DATE       = P_MODIFICATION_DATE
         WHERE ID_FACTURA_PK           = P_ID_FACTURA;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END UPDATE_FACTURACIONES_TB_SP;
    
    --Procedimiento para hacer soft delete de las facturas
    PROCEDURE DESACTIVAR_FACTURACIONES_TB_SP (
        P_ID_FACTURA IN FIDE_FACTURACIONES_TB.ID_FACTURA_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_FACTURACIONES_TB
           SET ID_ESTADO_FK = 0
         WHERE ID_FACTURA_PK = P_ID_FACTURA;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END DESACTIVAR_FACTURACIONES_TB_SP;
    
    --Procedimiento para insertar proveedores
    PROCEDURE INSERT_PROVEEDORES_TB_SP(
        P_ID_ESTADO_FK                     IN FIDE_PROVEEDORES_TB.ID_ESTADO_FK%TYPE,
        P_ID_DIRECCION_FK                  IN FIDE_PROVEEDORES_TB.ID_DIRECCION_FK%TYPE,
        P_ID_TELEFONO_CONTACTO_FK          IN FIDE_PROVEEDORES_TB.ID_TELEFONO_CONTACTO_FK%TYPE,
        P_PROVEEDOR_NOMBRE                 IN FIDE_PROVEEDORES_TB.PROVEEDOR_NOMBRE%TYPE,
        P_PROVEEDOR_CORREO                 IN FIDE_PROVEEDORES_TB.PROVEEDOR_CORREO%TYPE,
        P_PROVEEDOR_DESCRIPCION_PRODUCTOS  IN FIDE_PROVEEDORES_TB.PROVEEDOR_DESCRIPCION_PRODUCTOS%TYPE,
        P_CREATED_BY                       IN FIDE_PROVEEDORES_TB.CREATED_BY%TYPE,
        P_CREATION_DATE                    IN FIDE_PROVEEDORES_TB.CREATION_DATE%TYPE,
        P_MODIFIED_BY                      IN FIDE_PROVEEDORES_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE                IN FIDE_PROVEEDORES_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        INSERT INTO FIDE_PROVEEDORES_TB (
            ID_ESTADO_FK,
            ID_DIRECCION_FK,
            ID_TELEFONO_CONTACTO_FK,
            PROVEEDOR_NOMBRE,
            PROVEEDOR_CORREO,
            PROVEEDOR_DESCRIPCION_PRODUCTOS,
            CREATED_BY,
            CREATION_DATE,
            MODIFIED_BY,
            MODIFICATION_DATE
        )
        VALUES (
            P_ID_ESTADO_FK,
            P_ID_DIRECCION_FK,
            P_ID_TELEFONO_CONTACTO_FK,
            P_PROVEEDOR_NOMBRE,
            P_PROVEEDOR_CORREO,
            P_PROVEEDOR_DESCRIPCION_PRODUCTOS,
            P_CREATED_BY,
            P_CREATION_DATE,
            P_MODIFIED_BY,
            P_MODIFICATION_DATE
        );
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END INSERT_PROVEEDORES_TB_SP;
    
    --Procedimiento para modificar proveedores
    PROCEDURE UPDATE_PROVEEDORES_TB_SP(
        P_ID_PROVEEDOR_PK                  IN FIDE_PROVEEDORES_TB.ID_PROVEEDOR_PK%TYPE,
        P_ID_ESTADO_FK                     IN FIDE_PROVEEDORES_TB.ID_ESTADO_FK%TYPE,
        P_ID_DIRECCION_FK                  IN FIDE_PROVEEDORES_TB.ID_DIRECCION_FK%TYPE,
        P_ID_TELEFONO_CONTACTO_FK          IN FIDE_PROVEEDORES_TB.ID_TELEFONO_CONTACTO_FK%TYPE,
        P_PROVEEDOR_NOMBRE                 IN FIDE_PROVEEDORES_TB.PROVEEDOR_NOMBRE%TYPE,
        P_PROVEEDOR_CORREO                 IN FIDE_PROVEEDORES_TB.PROVEEDOR_CORREO%TYPE,
        P_PROVEEDOR_DESCRIPCION_PRODUCTOS  IN FIDE_PROVEEDORES_TB.PROVEEDOR_DESCRIPCION_PRODUCTOS%TYPE,
        P_MODIFIED_BY                      IN FIDE_PROVEEDORES_TB.MODIFIED_BY%TYPE,
        P_MODIFICATION_DATE                IN FIDE_PROVEEDORES_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_PROVEEDORES_TB
           SET ID_ESTADO_FK                    = P_ID_ESTADO_FK,
               ID_DIRECCION_FK                 = P_ID_DIRECCION_FK,
               ID_TELEFONO_CONTACTO_FK         = P_ID_TELEFONO_CONTACTO_FK,
               PROVEEDOR_NOMBRE                = P_PROVEEDOR_NOMBRE,
               PROVEEDOR_CORREO                = P_PROVEEDOR_CORREO,
               PROVEEDOR_DESCRIPCION_PRODUCTOS = P_PROVEEDOR_DESCRIPCION_PRODUCTOS,
               MODIFIED_BY                     = P_MODIFIED_BY,
               MODIFICATION_DATE               = P_MODIFICATION_DATE
         WHERE ID_PROVEEDOR_PK                 = P_ID_PROVEEDOR_PK;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END UPDATE_PROVEEDORES_TB_SP;
    
    --Procedimiento para hacer soft delete de proveedores
    PROCEDURE DESACTIVAR_PROVEEDORES_TB_SP (
        P_ID_PROVEEDOR IN FIDE_PROVEEDORES_TB.ID_PROVEEDOR_PK%TYPE
    )
    IS
    BEGIN
        UPDATE FIDE_PROVEEDORES_TB
           SET ID_ESTADO_FK = 0
         WHERE ID_PROVEEDOR_PK = P_ID_PROVEEDOR;
    
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
    END DESACTIVAR_PROVEEDORES_TB_SP;

    FUNCTION EXISTE_USUARIO_FN(
        P_CORREO     IN FIDE_USUARIOS_TB.USUARIO_CORREO%TYPE,
        P_CONTRASENNA IN FIDE_USUARIOS_TB.USUARIO_CONTRASENNA%TYPE
    ) RETURN NUMBER IS
        CURSOR C_EXISTE IS
            SELECT 1
            FROM FIDE_USUARIOS_TB
            WHERE USUARIO_CORREO = P_CORREO
              AND USUARIO_CONTRASENNA = P_CONTRASENNA;
    
        V_EXISTE NUMBER := 0;
    BEGIN
        FOR REC IN C_EXISTE LOOP
            V_EXISTE := 1;
        END LOOP;
    
        RETURN V_EXISTE;
    END EXISTE_USUARIO_FN;
    
    -- Extraer direccion completa usuario por cedula
    FUNCTION OBTENER_DIRECCION_USUARIO_FN (P_CEDULA_USUARIO VARCHAR2)
      RETURN VARCHAR2 IS
      CURSOR C_DIRECCION IS
                                            SELECT D.DIRECCION_SENNAS, P.NOMBRE_PROVINCIA, C.NOMBRE_CANTON, DIS.NOMBRE_DISTRITO
                                            FROM FIDE_USUARIOS_TB U
                                            JOIN FIDE_DIRECCION_TB D ON U.ID_DIRECCION_FK = D.ID_DIRECCION_PK
                                            JOIN FIDE_DIRECCION_PROVINCIA_TB P ON D.ID_DIRECCION_PROVINCIA_FK = P.ID_DIRECCION_PROVINCIA_PK
                                            JOIN FIDE_DIRECCION_CANTON_TB C ON D.ID_DIRECCION_CANTON_FK = C.ID_DIRECCION_CANTON_PK
                                            JOIN FIDE_DIRECCION_DISTRITO_TB DIS ON D.ID_DIRECCION_DISTRITO_FK = DIS.ID_DIRECCION_DISTRITO_PK
                                            WHERE U.USUARIO_IDENTIFICACION = P_CEDULA_USUARIO;
      V_DIRECCION VARCHAR2(4000);
    BEGIN
      FOR REC IN C_DIRECCION LOOP
        V_DIRECCION := REC.DIRECCION_SENNAS || ', ' || REC.NOMBRE_DISTRITO || ', ' || REC.NOMBRE_CANTON || ', ' || REC.NOMBRE_PROVINCIA;
      END LOOP;
      RETURN V_DIRECCION;
    END OBTENER_DIRECCION_USUARIO_FN;
    
    -- Extraer mascotas de usuario por cedula
    FUNCTION OBTENER_MASCOTAS_USUARIO_FN (
        P_IDENTIFICACION_USUARIO VARCHAR2
    ) RETURN VARCHAR2 IS
    
        CURSOR C_MASCOTAS IS
            SELECT M.NOMBRE_MASCOTA
            FROM FIDE_MASCOTA_TB M
            JOIN FIDE_USUARIOS_TB U ON M.ID_USUARIO_FK = U.ID_USUARIO_PK
            WHERE U.USUARIO_IDENTIFICACION = P_IDENTIFICACION_USUARIO;
            
        V_RESULTADO VARCHAR2(4000) := '';
    BEGIN
        FOR REC IN C_MASCOTAS LOOP
            V_RESULTADO := V_RESULTADO || REC.NOMBRE_MASCOTA || ', ';
        END LOOP;
    
        IF V_RESULTADO IS NULL OR V_RESULTADO = '' THEN
            RETURN 'NO SE ENCONTRARON MASCOTAS PARA EL USUARIO ' || P_IDENTIFICACION_USUARIO;
        ELSE
            RETURN V_RESULTADO; 
        END IF;
    END OBTENER_MASCOTAS_USUARIO_FN;
    
    --Funcion que retorna 1 si la raza existe y 0 si no existe
    FUNCTION EXISTE_RAZA_POR_DESCRIPCION_FN(
      P_NOMBRE_RAZA VARCHAR2
    ) RETURN NUMBER IS
      CURSOR C_EXISTE IS 
      SELECT 1 
      FROM FIDE_MASCOTA_RAZA_TB 
      WHERE NOMBRE_RAZA = P_NOMBRE_RAZA;
        
        V_EXISTE NUMBER :=0;
        BEGIN
        FOR REC IN C_EXISTE LOOP
            V_EXISTE :=1;
        END LOOP;
       
       RETURN V_EXISTE;
    END EXISTE_RAZA_POR_DESCRIPCION_FN;
    
    --Validar fecha de cirugia por ID
    FUNCTION OBTENER_FECHA_CIRUGIA_FN(
      P_ID_CIRUGIA NUMBER
    ) 
    RETURN DATE IS
        CURSOR C_FECHA IS
      SELECT CIRUGIA_FECHA_INICIO 
      FROM FIDE_REGISTRO_CIRUGIAS_TB 
      WHERE ID_CIRUGIA_PK = P_ID_CIRUGIA; 
      V_FECHA DATE;
      BEGIN
      FOR REC IN C_FECHA LOOP
        V_FECHA:= REC.CIRUGIA_FECHA_INICIO;
        END LOOP;
        IF V_FECHA IS NULL THEN
            RETURN 'NO SE ENCONTRÓ FECHA PARA LA CITA';
        ELSE
            RETURN V_FECHA;
        END IF;
     
    END OBTENER_FECHA_CIRUGIA_FN;
    
    -- Obtener duenno mascota
    FUNCTION OBTENER_DUENNO_MASCOTA_FN (P_ID_MASCOTA NUMBER) 
      RETURN VARCHAR2 IS
      CURSOR C_DUENNO IS
        SELECT U.USUARIO_NOMBRE
        FROM FIDE_USUARIOS_TB U
        JOIN FIDE_MASCOTA_TB M ON M.ID_USUARIO_FK = U.ID_USUARIO_PK
        WHERE M.ID_MASCOTA_PK = P_ID_MASCOTA;
        
        V_RESULTADO VARCHAR2(4000):='';
      BEGIN
          FOR REC IN C_DUENNO LOOP
            V_RESULTADO := V_RESULTADO || REC.USUARIO_NOMBRE || ', ';
          END LOOP;
        
          IF V_RESULTADO IS NULL OR V_RESULTADO = '' THEN
            RETURN 'NO SE ENCONTRÓ DUEÑO PARA LA MASCOTA CON ID ' || P_ID_MASCOTA;
          ELSE
            RETURN RTRIM(V_RESULTADO, ', ');
          END IF;
      END OBTENER_DUENNO_MASCOTA_FN;
      
      -- Obtener nombre por ID
    FUNCTION OBTENER_USUARIO_POR_ID_FN(P_ID NUMBER)
        RETURN VARCHAR2 IS
        CURSOR C_NOMBRE IS
            SELECT USUARIO_NOMBRE
            FROM FIDE_USUARIOS_TB 
            WHERE ID_USUARIO_PK = P_ID;
        
        V_NOMBRE VARCHAR2(4000) := '';
    BEGIN
       
        FOR REC IN C_NOMBRE LOOP
            V_NOMBRE := REC.USUARIO_NOMBRE; 
        END LOOP;
        
        IF V_NOMBRE IS NULL OR V_NOMBRE = '' THEN
            RETURN 'NO SE ENCONTRÓ NOMBRE DEL USUARIO CON EL ID ' || P_ID;
        ELSE
            RETURN V_NOMBRE;
        END IF;
    END OBTENER_USUARIO_POR_ID_FN;

    PROCEDURE FIDE_ESTADO_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_ESTADO_PK, ESTADO_DESCRIPCION, CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_ESTADO_V;
    END FIDE_ESTADO_SELECT_SP;

    PROCEDURE FIDE_DIRECCION_PROVINCIA_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_DIRECCION_PROVINCIA_PK, ID_ESTADO_FK, NOMBRE_PROVINCIA,
                   CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_DIRECCION_PROVINCIA_V;
    END FIDE_DIRECCION_PROVINCIA_SELECT_SP;

    PROCEDURE FIDE_DIRECCION_CANTON_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_DIRECCION_CANTON_PK, ID_ESTADO_FK, NOMBRE_CANTON,
                   CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_DIRECCION_CANTON_V;
    END FIDE_DIRECCION_CANTON_SELECT_SP;

    PROCEDURE FIDE_DIRECCION_DISTRITO_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_DIRECCION_DISTRITO_PK, ID_ESTADO_FK, NOMBRE_DISTRITO,
                   CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_DIRECCION_DISTRITO_V;
    END FIDE_DIRECCION_DISTRITO_SELECT_SP;

    PROCEDURE FIDE_DIRECCION_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_DIRECCION_PK, ID_ESTADO_FK, ID_DIRECCION_PROVINCIA_FK,
                   ID_DIRECCION_CANTON_FK, ID_DIRECCION_DISTRITO_FK,
                   DIRECCION_SENNAS, CREATED_BY, CREATION_DATE,
                   MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_DIRECCION_V;
    END FIDE_DIRECCION_SELECT_SP;

    PROCEDURE FIDE_TELEFONO_CONTACTO_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_TELEFONO_CONTACTO_PK, ID_ESTADO_FK, TELEFONO_CONTACTO,
                   CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_TELEFONO_CONTACTO_TB;
    END FIDE_TELEFONO_CONTACTO_SELECT_SP;

    PROCEDURE FIDE_TIPO_USUARIO_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_TIPO_USUARIO_PK, ID_ESTADO_FK, DESCRIPCION_TIPO_USUARIO,
                   CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_TIPO_USUARIO_TB;
    END FIDE_TIPO_USUARIO_SELECT_SP;

    PROCEDURE FIDE_ESPECIALIDAD_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_ESPECIALIDAD_PK, ID_ESTADO_FK, NOMBRE_ESPECIALIDAD, DESCRIPCION_ESPECIALIDAD,
                   CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_ESPECIALIDAD_TB;
    END;

    PROCEDURE FIDE_USUARIOS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_USUARIO_PK, ID_ESTADO_FK, ID_ESPECIALIDAD_FK, ID_TIPO_USUARIO_FK,
                   ID_DIRECCION_FK, ID_TELEFONO_CONTACTO_FK, USUARIO_NOMBRE, USUARIO_CORREO,
                   USUARIO_CONTRASENNA, USUARIO_IDENTIFICACION, USUARIO_FECHA_REGISTRO,
                   USUARIO_CUENTA_BANCARIA, CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_USUARIOS_TB;
    END;

    PROCEDURE FIDE_MASCOTA_ESPECIE_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_MASCOTA_ESPECIE_PK, ID_ESTADO_FK, NOMBRE_ESPECIE,
                   CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_MASCOTA_ESPECIE_TB;
    END;

    PROCEDURE FIDE_MASCOTA_RAZA_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_MASCOTA_RAZA_PK, ID_ESTADO_FK, NOMBRE_RAZA,
                   CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_MASCOTA_RAZA_TB;
    END;

    PROCEDURE FIDE_MASCOTA_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_MASCOTA_PK, ID_ESTADO_FK, ID_MASCOTA_ESPECIE_FK, ID_MASCOTA_RAZA_FK,
                   ID_USUARIO_FK, NOMBRE_MASCOTA, FECHA_NACIMIENTO, GENERO,
                   CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_MASCOTA_TB;
    END;

    PROCEDURE FIDE_TIPO_EXAMEN_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_TIPO_EXAMEN_PK, ID_ESTADO_FK, DESCRIPCION_EXAMEN,
                   CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_TIPO_EXAMEN_TB;
    END;

    PROCEDURE FIDE_EXAMENES_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_EXAMEN_PK, ID_MASCOTA_FK, ID_ESTADO_FK, ID_TIPO_EXAMEN_FK,
                   EXAMEN_RESULTADO, EXAMEN_FECHA_SEGUIMIENTO,
                   CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,ACCION
            FROM FIDE_EXAMENES_TB;
    END;

    PROCEDURE FIDE_PAGOS_PLANILLAS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_PAGO_PLANILLA_PK, ID_USUARIO_FK, ID_ESTADO_FK, 
                PAGO_FECHA, PAGO_SALARIO_BRUTO, PAGO_SALARIO_NETO,
                PAGO_HORAS_EXTRA, PAGO_VACACIONES,
                CREATED_BY, CREATION_DATE, MODIFIED_BY, MODIFICATION_DATE,
                ACCION
            FROM FIDE_PAGOS_PLANILLAS_TB;
    END;

    PROCEDURE FIDE_HISTORIALES_MEDICOS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_MASCOTA_FK, 
                ID_CONSULTA_FK, 
                ID_USUARIO_FK, 
                ID_TIPO_USUARIO_FK, 
                ID_ESTADO_FK,
                HISTORIAL_FECHA_REGISTRO, 
                HISTORIAL_DIAGNOSTICO, 
                HISTORIAL_TRATAMIENTO, 
                HISTORIAL_NOTAS,
                CREATED_BY, 
                CREATION_DATE, 
                MODIFIED_BY, 
                MODIFICATION_DATE,
               ACCION
            FROM FIDE_HISTORIALES_MEDICOS_TB;
    END;

    PROCEDURE FIDE_CIRUGIAS_PERSONAL_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_RESULTADO FOR
            SELECT ID_CIRUGIA_FK,
                ID_USUARIO_FK,
                ID_ROL_CIRUGIA_FK,
                ID_ESTADO_FK,
                ID_TIPO_USUARIO_FK,
                ANOTACIONES_ADICIONALES,
                CREATED_BY,
                CREATION_DATE,
                MODIFIED_BY,
                MODIFICATION_DATE,
               ACCION
            FROM FIDE_CIRUGIAS_PERSONAL_TB;
    END;

PROCEDURE FIDE_CIRUGIAS_MEDICAMENTOS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
BEGIN
    OPEN P_RESULTADO FOR
        SELECT ID_CIRUGIA_FK,
               ID_PRODUCTO_FK,
               ID_ESTADO_FK,
               ID_TIPO_VIA_FK,
               CIRUGIA_MEDICAMENTO_DOSIS,
               CREATED_BY,
               CREATION_DATE,
               MODIFIED_BY,
               MODIFICATION_DATE,
               ACCION
        FROM FIDE_CIRUGIAS_MEDICAMENTOS_TB;
END;

PROCEDURE FIDE_REGISTRO_CIRUGIAS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
BEGIN
    OPEN P_RESULTADO FOR
        SELECT ID_CIRUGIA_PK,
               CIRUGIA_FECHA_INICIO,
               CIRUGIA_FECHA_FINAL,
               ID_ESTADO_FK,
               ID_MASCOTA_FK,
               CIRUGIA_ANOTACIONES,
               CIRUGIA_DIAG_PREVIO,
               CIRUGIA_DIAG_POST,
               CREATED_BY,
               CREATION_DATE,
               MODIFIED_BY,
               MODIFICATION_DATE,
               ACCION
        FROM FIDE_REGISTRO_CIRUGIAS_TB;
END;

PROCEDURE FIDE_ROLES_CIRUGIA_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
BEGIN
    OPEN P_RESULTADO FOR
        SELECT ID_ROL_CIRUGIA_PK,
               ID_ESTADO_FK,
               MEDICO_CIRUJANO,
               ASISTENTE_ANESTESIOLOGO,
               CREATED_BY,
               CREATION_DATE,
               MODIFIED_BY,
               MODIFICATION_DATE,
               ACCION
        FROM FIDE_ROLES_CIRUGIA_TB;
END;

PROCEDURE FIDE_TIPO_VIA_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
BEGIN
    OPEN P_RESULTADO FOR
        SELECT ID_TIPO_VIA_PK,
               ID_ESTADO_FK,
               TIPO_VIA_DESCRIPCION,
               CREATED_BY,
               CREATION_DATE,
               MODIFIED_BY,
               MODIFICATION_DATE,
               ACCION
        FROM FIDE_TIPO_VIA_TB;
END;

PROCEDURE FIDE_ORDEN_PRODUCTOS_SELECT_SP(P_RESULTADO OUT SYS_REFCURSOR) AS
BEGIN
    OPEN P_RESULTADO FOR
        SELECT ID_ORDEN_COMPRA_FK,
               ID_PRODUCTO_FK,
               ID_ESTADO_FK,
               ORDEN_PRODUCTO_CANTIDAD,
               ORDEN_PRODUCTO_PRECIO_UNITARIO,
               ORDEN_PRODUCTO_SUBTOTAL,
               CREATED_BY,
               CREATION_DATE,
               MODIFIED_BY,
               MODIFICATION_DATE,
               ACCION
        FROM FIDE_ORDEN_PRODUCTOS_TB;
END;

END PROYECTO_FUNCIONES_PROCEDIMIENTOS_PKG;
/  
    

    
    
    
    

    