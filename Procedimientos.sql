--Creacion procedimiento de inserciones FIDE_ESTADO_TB
CREATE OR REPLACE PROCEDURE INSERT_ESTADO_TB_SP(
                                            P_ID_ESTADO IN FIDE_ESTADO_TB.ID_ESTADO_PK%TYPE,
                                            P_ESTADO_DESCRIPCION IN FIDE_ESTADO_TB.ESTADO_DESCRIPCION%TYPE,
                                            P_CREATED_BY IN FIDE_ESTADO_TB.CREATED_BY%TYPE,
                                            P_CREATION_DATE IN FIDE_ESTADO_TB.CREATION_DATE%TYPE,
                                            P_MODIFIED_BY IN FIDE_ESTADO_TB.MODIFIED_BY%TYPE,
                                            P_MODIFICATION_DATE IN FIDE_ESTADO_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN 
    INSERT INTO FIDE_ESTADO_TB(ID_ESTADO_PK, ESTADO_DESCRIPCION,CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
    VALUES(P_ID_ESTADO, P_ESTADO_DESCRIPCION, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
            WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
            WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END;
/
--Creacion procedimiento de inserciones FIDE_DIRECCION_PROVINCIA_TB
CREATE OR REPLACE PROCEDURE INSERT_DIRECCION_PROVINCIA_TB_SP(
                                            P_ID_DIRECCION_PROVINCIA IN FIDE_DIRECCION_PROVINCIA_TB.ID_DIRECCION_PROVINCIA_PK%TYPE,
                                            P_ESTADO IN FIDE_DIRECCION_PROVINCIA_TB.ID_ESTADO_FK%TYPE,
                                            P_NOMBRE_PROVINCIA IN FIDE_DIRECCION_PROVINCIA_TB.NOMBRE_PROVINCIA%TYPE,
                                            P_CREATED_BY IN FIDE_DIRECCION_PROVINCIA_TB.CREATED_BY%TYPE,
                                            P_CREATION_DATE IN FIDE_DIRECCION_PROVINCIA_TB.CREATION_DATE%TYPE,
                                            P_MODIFIED_BY IN FIDE_DIRECCION_PROVINCIA_TB.MODIFIED_BY%TYPE,
                                            P_MODIFICATION_DATE IN FIDE_DIRECCION_PROVINCIA_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN 
    INSERT INTO FIDE_DIRECCION_PROVINCIA_TB(ID_DIRECCION_PROVINCIA_PK, ID_ESTADO_FK, NOMBRE_PROVINCIA,CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
    VALUES(P_ID_DIRECCION_PROVINCIA, P_ESTADO, P_NOMBRE_PROVINCIA, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
            WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
            WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END;
/
--Creacion procedimiento de inserciones FIDE_DIRECCION_CANTON_TB
CREATE OR REPLACE PROCEDURE INSERT_DIRECCION_CANTON_TB_SP(
                                            P_ID_DIRECCION_CANTON IN FIDE_DIRECCION_CANTON_TB.ID_DIRECCION_CANTON_PK%TYPE,
                                            P_ESTADO IN FIDE_DIRECCION_CANTON_TB.ID_ESTADO_FK%TYPE,
                                            P_NOMBRE_CANTON IN FIDE_DIRECCION_CANTON_TB.NOMBRE_CANTON%TYPE,
                                            P_CREATED_BY IN FIDE_DIRECCION_CANTON_TB.CREATED_BY%TYPE,
                                            P_CREATION_DATE IN FIDE_DIRECCION_CANTON_TB.CREATION_DATE%TYPE,
                                            P_MODIFIED_BY IN FIDE_DIRECCION_CANTON_TB.MODIFIED_BY%TYPE,
                                            P_MODIFICATION_DATE IN FIDE_DIRECCION_CANTON_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN 
    INSERT INTO FIDE_DIRECCION_CANTON_TB(ID_DIRECCION_CANTON_PK, ID_ESTADO_FK, NOMBRE_CANTON,CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
    VALUES(P_ID_DIRECCION_CANTON, P_ESTADO, P_NOMBRE_CANTON, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
            WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
            WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END;
/
--Creacion procedimiento de inserciones FIDE_DIRECCION_DISTRITO_TB
CREATE OR REPLACE PROCEDURE INSERT_DIRECCION_DISTRITO_TB_SP(
                                            P_ID_DIRECCION_DISTRITO IN FIDE_DIRECCION_DISTRITO_TB.ID_DIRECCION_DISTRITO_PK%TYPE,
                                            P_ESTADO IN FIDE_DIRECCION_DISTRITO_TB.ID_ESTADO_FK%TYPE,
                                            P_NOMBRE_DISTRITO IN FIDE_DIRECCION_DISTRITO_TB.NOMBRE_DISTRITO%TYPE,
                                            P_CREATED_BY IN FIDE_DIRECCION_DISTRITO_TB.CREATED_BY%TYPE,
                                            P_CREATION_DATE IN FIDE_DIRECCION_DISTRITO_TB.CREATION_DATE%TYPE,
                                            P_MODIFIED_BY IN FIDE_DIRECCION_DISTRITO_TB.MODIFIED_BY%TYPE,
                                            P_MODIFICATION_DATE IN FIDE_DIRECCION_DISTRITO_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN 
    INSERT INTO FIDE_DIRECCION_DISTRITO_TB(ID_DIRECCION_DISTRITO_PK, ID_ESTADO_FK, NOMBRE_DISTRITO,CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
    VALUES(P_ID_DIRECCION_DISTRITO, P_ESTADO, P_NOMBRE_DISTRITO, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
            WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
            WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END;
/
--Creacion procedimiento de inserciones FIDE_DIRECCION_TB
CREATE OR REPLACE PROCEDURE INSERT_DIRECCION_TB_SP(
                                            P_ID_DIRECCION IN FIDE_DIRECCION_TB.ID_DIRECCION_PK%TYPE,
                                            P_ESTADO IN FIDE_DIRECCION_TB.ID_ESTADO_FK%TYPE,
                                            P_DIRECCION_PROVINCIA IN FIDE_DIRECCION_TB.ID_DIRECCION_PROVINCIA_FK%TYPE,
                                            P_DIRECCION_CANTON IN FIDE_DIRECCION_TB.ID_DIRECCION_CANTON_FK%TYPE,
                                            P_DIRECCION_DISTRITO IN FIDE_DIRECCION_TB.ID_DIRECCION_DISTRITO_FK%TYPE,
                                            P_DIRECCION_SENNAS IN FIDE_DIRECCION_TB.DIRECCION_SENNAS%TYPE,
                                            P_CREATED_BY IN FIDE_DIRECCION_TB.CREATED_BY%TYPE,
                                            P_CREATION_DATE IN FIDE_DIRECCION_TB.CREATION_DATE%TYPE,
                                            P_MODIFIED_BY IN FIDE_DIRECCION_TB.MODIFIED_BY%TYPE,
                                            P_MODIFICATION_DATE IN FIDE_DIRECCION_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN 
    INSERT INTO FIDE_DIRECCION_TB(ID_DIRECCION_PK, ID_ESTADO_FK, ID_DIRECCION_PROVINCIA_FK, ID_DIRECCION_CANTON_FK, ID_DIRECCION_DISTRITO_FK, DIRECCION_SENNAS,
                                    CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
    VALUES(P_ID_DIRECCION, P_ESTADO, P_DIRECCION_PROVINCIA, P_DIRECCION_CANTON, P_DIRECCION_DISTRITO, P_DIRECCION_SENNAS,
            P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
            WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
            WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END;
/
--Creacion procedimiento de inserciones FIDE_TELEFONO_CONTACTO_TB
CREATE OR REPLACE PROCEDURE INSERT_TELEFONO_CONTACTO_TB_SP(
                                            P_ID_TELEFONO_CONTACTO IN FIDE_TELEFONO_CONTACTO_TB.ID_TELEFONO_CONTACTO_PK%TYPE,
                                            P_ESTADO IN FIDE_TELEFONO_CONTACTO_TB.ID_ESTADO_FK%TYPE,
                                            P_TELEFONO_CONTACTO IN FIDE_TELEFONO_CONTACTO_TB.TELEFONO_CONTACTO%TYPE,
                                            P_CREATED_BY IN FIDE_TELEFONO_CONTACTO_TB.CREATED_BY%TYPE,
                                            P_CREATION_DATE IN FIDE_TELEFONO_CONTACTO_TB.CREATION_DATE%TYPE,
                                            P_MODIFIED_BY IN FIDE_TELEFONO_CONTACTO_TB.MODIFIED_BY%TYPE,
                                            P_MODIFICATION_DATE IN FIDE_TELEFONO_CONTACTO_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN 
    INSERT INTO FIDE_TELEFONO_CONTACTO_TB(ID_TELEFONO_CONTACTO_PK, ID_ESTADO_FK, TELEFONO_CONTACTO,CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
    VALUES(P_ID_TELEFONO_CONTACTO, P_ESTADO, P_TELEFONO_CONTACTO, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
            WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
            WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END;
/
--Creacion procedimiento de inserciones FIDE_TIPO_USUARIO_TB
CREATE OR REPLACE PROCEDURE INSERT_TIPO_USUARIO_TB_SP(
                                            P_ID_TIPO_USUARIO IN FIDE_TIPO_USUARIO_TB.ID_TIPO_USUARIO_PK%TYPE,
                                            P_ESTADO IN FIDE_TIPO_USUARIO_TB.ID_ESTADO_FK%TYPE,
                                            P_DESCRIPCION_TIPO_USUARIO IN FIDE_TIPO_USUARIO_TB.DESCRIPCION_TIPO_USUARIO%TYPE,
                                            P_CREATED_BY IN FIDE_TIPO_USUARIO_TB.CREATED_BY%TYPE,
                                            P_CREATION_DATE IN FIDE_TIPO_USUARIO_TB.CREATION_DATE%TYPE,
                                            P_MODIFIED_BY IN FIDE_TIPO_USUARIO_TB.MODIFIED_BY%TYPE,
                                            P_MODIFICATION_DATE IN FIDE_TIPO_USUARIO_TB.MODIFICATION_DATE%TYPE
    )
    IS
    BEGIN 
    INSERT INTO FIDE_TIPO_USUARIO_TB(ID_TIPO_USUARIO_PK, ID_ESTADO_FK, DESCRIPCION_TIPO_USUARIO,CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
    VALUES(P_ID_TIPO_USUARIO, P_ESTADO, P_DESCRIPCION_TIPO_USUARIO, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
    EXCEPTION
            WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
            WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
    END;
/
--Creacion procedimiento de inserciones FIDE_ESPECIALIDAD_TB
CREATE OR REPLACE PROCEDURE INSERT_ESPECIALIDAD_TB_SP(
                                            P_ID_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.ID_ESPECIALIDAD_PK%TYPE,
                                            P_ESTADO IN FIDE_ESPECIALIDAD_TB.ID_ESTADO_FK%TYPE,
                                            P_NOMBRE_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.NOMBRE_ESPECIALIDAD%TYPE,
                                            P_DESCRIPCION_ESPECIALIDAD IN FIDE_ESPECIALIDAD_TB.DESCRIPCION_ESPECIALIDAD%TYPE,
                                            P_CREATED_BY IN FIDE_ESPECIALIDAD_TB.CREATED_BY%TYPE,
                                            P_CREATION_DATE IN FIDE_ESPECIALIDAD_TB.CREATION_DATE%TYPE,
                                            P_MODIFIED_BY IN FIDE_ESPECIALIDAD_TB.MODIFIED_BY%TYPE,
                                            P_MODIFICATION_DATE IN FIDE_ESPECIALIDAD_TB.MODIFICATION_DATE%TYPE
)
IS
BEGIN 
INSERT INTO FIDE_ESPECIALIDAD_TB(ID_ESPECIALIDAD_PK, ID_ESTADO_FK, NOMBRE_ESPECIALIDAD, DESCRIPCION_ESPECIALIDAD,CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
VALUES(P_ID_ESPECIALIDAD, P_ESTADO, P_NOMBRE_ESPECIALIDAD, P_DESCRIPCION_ESPECIALIDAD, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
COMMIT;
DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
EXCEPTION
        WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
END;
/
--Procedimiento de inserciones FIDE_USUARIOS_TB
CREATE OR REPLACE PROCEDURE INSERT_USUARIOS_TB_SP(
                                            P_ID_USUARIO IN FIDE_USUARIOS_TB.ID_USUARIO_PK%TYPE,
                                            P_ESTADO IN FIDE_USUARIOS_TB.ID_ESTADO_FK%TYPE,
                                            P_ESPECIALIDAD IN FIDE_USUARIOS_TB.ID_ESPECIALIDAD_FK%TYPE,
                                            P_ID_TIPO_USUARIO IN FIDE_USUARIOS_TB.ID_TIPO_USUARIO_FK%TYPE,
                                            P_USUARIO_NOMBRE IN FIDE_USUARIOS_TB.USUARIO_NOMBRE%TYPE,
                                            P_USUARIO_CORREO IN FIDE_USUARIOS_TB.USUARIO_CORREO%TYPE,
                                            P_USUARIO_CONTRASENNA IN FIDE_USUARIOS_TB.USUARIO_CONTRASENNA%TYPE,
                                            P_USUARIO_IDENTIFICACION IN FIDE_USUARIOS_TB.USUARIO_IDENTIFICACION%TYPE,
                                            P_USUARIO_FECHA_REGISTRO IN FIDE_USUARIOS_TB.USUARIO_FECHA_REGISTRO%TYPE,
                                            P_USUARIO_CUENTA_BANCARIAO IN FIDE_USUARIOS_TB.USUARIO_CUENTA_BANCARIA%TYPE,                                            
                                            P_CREATED_BY IN FIDE_USUARIOS_TB.CREATED_BY%TYPE,
                                            P_CREATION_DATE IN FIDE_USUARIOS_TB.CREATION_DATE%TYPE,
                                            P_MODIFIED_BY IN FIDE_USUARIOS_TB.MODIFIED_BY%TYPE,
                                            P_MODIFICATION_DATE IN FIDE_USUARIOS_TB.MODIFICATION_DATE%TYPE
)
IS
BEGIN 
INSERT INTO FIDE_USUARIOS_TB(ID_USUARIO_PK, ID_ESTADO_FK, ID_ESPECIALIDAD_FK, ID_TIPO_USUARIO_FK, USUARIO_NOMBRE, USUARIO_CORREO, USUARIO_CONTRASENNA, USUARIO_IDENTIFICACION, USUARIO_FECHA_REGISTRO,
                                USUARIO_CUENTA_BANCARIA, CREATED_BY,CREATION_DATE, MODIFIED_BY,MODIFICATION_DATE)
VALUES(P_ID_USUARIO, P_ESTADO, P_ESPECIALIDAD, P_ID_TIPO_USUARIO, P_USUARIO_NOMBRE, P_USUARIO_CORREO, P_USUARIO_CONTRASENNA, P_USUARIO_IDENTIFICACION, P_USUARIO_FECHA_REGISTRO, 
P_USUARIO_CUENTA_BANCARIAO, P_CREATED_BY, P_CREATION_DATE, P_MODIFIED_BY, P_MODIFICATION_DATE);
COMMIT;
DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
EXCEPTION
        WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
        WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
END;
/
--Procedimiento para insertar datos en la tabla de especies
CREATE OR REPLACE PROCEDURE INSERT_MASCOTA_ESPECIE_TB_SP(
    P_ID_MASCOTA_ESPECIE   IN FIDE_MASCOTA_ESPECIE_TB.ID_MASCOTA_ESPECIE_PK%TYPE,
    P_ID_ESTADO_FK         IN FIDE_MASCOTA_ESPECIE_TB.ID_ESTADO_FK%TYPE,
    P_NOMBRE_ESPECIE       IN FIDE_MASCOTA_ESPECIE_TB.NOMBRE_ESPECIE%TYPE,
    P_CREATED_BY           IN FIDE_MASCOTA_ESPECIE_TB.CREATED_BY%TYPE,
    P_CREATION_DATE        IN FIDE_MASCOTA_ESPECIE_TB.CREATION_DATE%TYPE,
    P_MODIFIED_BY          IN FIDE_MASCOTA_ESPECIE_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE    IN FIDE_MASCOTA_ESPECIE_TB.MODIFICATION_DATE%TYPE
)
IS
BEGIN
    INSERT INTO FIDE_MASCOTA_ESPECIE_TB (
        ID_MASCOTA_ESPECIE_PK,
        ID_ESTADO_FK,
        NOMBRE_ESPECIE,
        CREATED_BY,
        CREATION_DATE,
        MODIFIED_BY,
        MODIFICATION_DATE
    )
    VALUES (
        P_ID_MASCOTA_ESPECIE,
        P_ID_ESTADO_FK,
        P_NOMBRE_ESPECIE,
        P_CREATED_BY,
        P_CREATION_DATE,
        P_MODIFIED_BY,
        P_MODIFICATION_DATE
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
END;
/
--Procedimiento para hacer update de la tabla especies
CREATE OR REPLACE PROCEDURE UPDATE_MASCOTA_ESPECIE_TB_SP(
    P_ID_MASCOTA_ESPECIE   IN FIDE_MASCOTA_ESPECIE_TB.ID_MASCOTA_ESPECIE_PK%TYPE,
    P_ID_ESTADO_FK         IN FIDE_MASCOTA_ESPECIE_TB.ID_ESTADO_FK%TYPE,
    P_NOMBRE_ESPECIE       IN FIDE_MASCOTA_ESPECIE_TB.NOMBRE_ESPECIE%TYPE,
    P_MODIFIED_BY          IN FIDE_MASCOTA_ESPECIE_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE    IN FIDE_MASCOTA_ESPECIE_TB.MODIFICATION_DATE%TYPE
)
IS
BEGIN
    UPDATE FIDE_MASCOTA_ESPECIE_TB
       SET ID_ESTADO_FK       = P_ID_ESTADO_FK,
           NOMBRE_ESPECIE     = P_NOMBRE_ESPECIE,
           MODIFIED_BY        = P_MODIFIED_BY,
           MODIFICATION_DATE  = P_MODIFICATION_DATE
     WHERE ID_MASCOTA_ESPECIE_PK = P_ID_MASCOTA_ESPECIE;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
END;
/
--Procedimiento para hacer un soft delete de la tabla especies
CREATE OR REPLACE PROCEDURE DESACTIVAR_MASCOTA_ESPECIE_TB_SP (
    P_ID_MASCOTA_ESPECIE  IN FIDE_MASCOTA_ESPECIE_TB.ID_MASCOTA_ESPECIE_PK%TYPE
)
IS
BEGIN
    UPDATE FIDE_MASCOTA_ESPECIE_TB
       SET ID_ESTADO_FK = 0
     WHERE ID_MASCOTA_ESPECIE_PK = P_ID_MASCOTA_ESPECIE;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
END;
/
--Procedimiento para insertar de razas
CREATE OR REPLACE PROCEDURE INSERT_MASCOTA_RAZA_TB_SP(
    P_ID_MASCOTA_RAZA     IN FIDE_MASCOTA_RAZA_TB.ID_MASCOTA_RAZA_PK%TYPE,
    P_ID_ESTADO_FK        IN FIDE_MASCOTA_RAZA_TB.ID_ESTADO_FK%TYPE,
    P_NOMBRE_RAZA         IN FIDE_MASCOTA_RAZA_TB.NOMBRE_RAZA%TYPE,
    P_CREATED_BY          IN FIDE_MASCOTA_RAZA_TB.CREATED_BY%TYPE,
    P_CREATION_DATE       IN FIDE_MASCOTA_RAZA_TB.CREATION_DATE%TYPE,
    P_MODIFIED_BY         IN FIDE_MASCOTA_RAZA_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE   IN FIDE_MASCOTA_RAZA_TB.MODIFICATION_DATE%TYPE
)
IS
BEGIN
    INSERT INTO FIDE_MASCOTA_RAZA_TB (
        ID_MASCOTA_RAZA_PK,
        ID_ESTADO_FK,
        NOMBRE_RAZA,
        CREATED_BY,
        CREATION_DATE,
        MODIFIED_BY,
        MODIFICATION_DATE
    )
    VALUES (
        P_ID_MASCOTA_RAZA,
        P_ID_ESTADO_FK,
        P_NOMBRE_RAZA,
        P_CREATED_BY,
        P_CREATION_DATE,
        P_MODIFIED_BY,
        P_MODIFICATION_DATE
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
END;
/
--Procedimiento para modificar razas
CREATE OR REPLACE PROCEDURE UPDATE_MASCOTA_RAZA_TB_SP(
    P_ID_MASCOTA_RAZA   IN FIDE_MASCOTA_RAZA_TB.ID_MASCOTA_RAZA_PK%TYPE,
    P_ID_ESTADO_FK      IN FIDE_MASCOTA_RAZA_TB.ID_ESTADO_FK%TYPE,
    P_NOMBRE_RAZA       IN FIDE_MASCOTA_RAZA_TB.NOMBRE_RAZA%TYPE,
    P_MODIFIED_BY       IN FIDE_MASCOTA_RAZA_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE IN FIDE_MASCOTA_RAZA_TB.MODIFICATION_DATE%TYPE
)
IS
BEGIN
    UPDATE FIDE_MASCOTA_RAZA_TB
       SET ID_ESTADO_FK       = P_ID_ESTADO_FK,
           NOMBRE_RAZA        = P_NOMBRE_RAZA,
           MODIFIED_BY        = P_MODIFIED_BY,
           MODIFICATION_DATE  = P_MODIFICATION_DATE
     WHERE ID_MASCOTA_RAZA_PK = P_ID_MASCOTA_RAZA;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
END;
/
--Procedimiento para hacer soft delete de razas
CREATE OR REPLACE PROCEDURE DESACTIVAR_MASCOTA_ESPECIE_TB_SP (
    P_ID_MASCOTA_ESPECIE  IN FIDE_MASCOTA_ESPECIE_TB.ID_MASCOTA_ESPECIE_PK%TYPE
)
IS
BEGIN
    UPDATE FIDE_MASCOTA_ESPECIE_TB
       SET ID_ESTADO_FK = 0
     WHERE ID_MASCOTA_ESPECIE_PK = P_ID_MASCOTA_ESPECIE;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
END;
/
--Procedimiento para insertar mascotas
CREATE OR REPLACE PROCEDURE INSERT_MASCOTA_TB_SP (
    P_ID_MASCOTA             IN FIDE_MASCOTA_TB.ID_MASCOTA_PK%TYPE,
    P_ID_ESTADO_FK           IN FIDE_MASCOTA_TB.ID_ESTADO_FK%TYPE,
    P_ID_MASCOTA_ESPECIE_FK  IN FIDE_MASCOTA_TB.ID_MASCOTA_ESPECIE_FK%TYPE,
    P_ID_MASCOTA_RAZA_FK     IN FIDE_MASCOTA_TB.ID_MASCOTA_RAZA_FK%TYPE,
    P_ID_USUARIO_FK          IN FIDE_MASCOTA_TB.ID_USUARIO_FK%TYPE,
    P_NOMBRE_MASCOTA         IN FIDE_MASCOTA_TB.NOMBRE_MASCOTA%TYPE,
    P_FECHA_NACIMIENTO       IN FIDE_MASCOTA_TB.FECHA_NACIMIENTO%TYPE,
    P_GENERO                 IN FIDE_MASCOTA_TB.GENERO%TYPE,
    P_CREATED_BY             IN FIDE_MASCOTA_TB.CREATED_BY%TYPE,
    P_CREATION_DATE          IN FIDE_MASCOTA_TB.CREATION_DATE%TYPE,
    P_MODIFIED_BY            IN FIDE_MASCOTA_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE      IN FIDE_MASCOTA_TB.MODIFICATION_DATE%TYPE
)
IS
BEGIN
    INSERT INTO FIDE_MASCOTA_TB (
         ID_MASCOTA_PK,
         ID_ESTADO_FK,
         ID_MASCOTA_ESPECIE_FK,
         ID_MASCOTA_RAZA_FK,
         ID_USUARIO_FK,
         NOMBRE_MASCOTA,
         FECHA_NACIMIENTO,
         GENERO,
         CREATED_BY,
         CREATION_DATE,
         MODIFIED_BY,
         MODIFICATION_DATE
    )
    VALUES (
         P_ID_MASCOTA,
         P_ID_ESTADO_FK,
         P_ID_MASCOTA_ESPECIE_FK,
         P_ID_MASCOTA_RAZA_FK,
         P_ID_USUARIO_FK,
         P_NOMBRE_MASCOTA,
         P_FECHA_NACIMIENTO,
         P_GENERO,
         P_CREATED_BY,
         P_CREATION_DATE,
         P_MODIFIED_BY,
         P_MODIFICATION_DATE
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMIQUESE CON TI: ' || SQLERRM);
END;
/
--Procedimiento para modificar mascotas
CREATE OR REPLACE PROCEDURE UPDATE_MASCOTA_TB_SP(
    P_ID_MASCOTA             IN FIDE_MASCOTA_TB.ID_MASCOTA_PK%TYPE,
    P_ID_ESTADO_FK           IN FIDE_MASCOTA_TB.ID_ESTADO_FK%TYPE,
    P_ID_MASCOTA_ESPECIE_FK  IN FIDE_MASCOTA_TB.ID_MASCOTA_ESPECIE_FK%TYPE,
    P_ID_MASCOTA_RAZA_FK     IN FIDE_MASCOTA_TB.ID_MASCOTA_RAZA_FK%TYPE,
    P_ID_USUARIO_FK          IN FIDE_MASCOTA_TB.ID_USUARIO_FK%TYPE,
    P_NOMBRE_MASCOTA         IN FIDE_MASCOTA_TB.NOMBRE_MASCOTA%TYPE,
    P_FECHA_NACIMIENTO       IN FIDE_MASCOTA_TB.FECHA_NACIMIENTO%TYPE,
    P_GENERO                 IN FIDE_MASCOTA_TB.GENERO%TYPE,
    P_MODIFIED_BY            IN FIDE_MASCOTA_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE      IN FIDE_MASCOTA_TB.MODIFICATION_DATE%TYPE
)
IS
BEGIN
    UPDATE FIDE_MASCOTA_TB
       SET ID_ESTADO_FK          = P_ID_ESTADO_FK,
           ID_MASCOTA_ESPECIE_FK = P_ID_MASCOTA_ESPECIE_FK,
           ID_MASCOTA_RAZA_FK    = P_ID_MASCOTA_RAZA_FK,
           ID_USUARIO_FK         = P_ID_USUARIO_FK,
           NOMBRE_MASCOTA        = P_NOMBRE_MASCOTA,
           FECHA_NACIMIENTO      = P_FECHA_NACIMIENTO,
           GENERO                = P_GENERO,
           MODIFIED_BY           = P_MODIFIED_BY,
           MODIFICATION_DATE     = P_MODIFICATION_DATE
     WHERE ID_MASCOTA_PK         = P_ID_MASCOTA;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI '|| SQLERRM);
END UPDATE_MASCOTA_TB_SP;
/
--Procedimiento para hacer soft delete de mascotas
CREATE OR REPLACE PROCEDURE DESACTIVAR_MASCOTA_TB_SP (
    P_ID_MASCOTA IN FIDE_MASCOTA_TB.ID_MASCOTA_PK%TYPE
)
IS
BEGIN
    UPDATE FIDE_MASCOTA_TB
       SET ID_ESTADO_FK = 0
     WHERE ID_MASCOTA_PK = P_ID_MASCOTA;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
END;
/
--Procedimiento para insertar tipos de examen
CREATE OR REPLACE PROCEDURE INSERT_TIPO_EXAMEN_TB_SP(
    P_ID_TIPO_EXAMEN       IN FIDE_TIPO_EXAMEN_TB.ID_TIPO_EXAMEN_PK%TYPE,
    P_ID_ESTADO_FK         IN FIDE_TIPO_EXAMEN_TB.ID_ESTADO_FK%TYPE,
    P_DESCRIPCION_EXAMEN   IN FIDE_TIPO_EXAMEN_TB.DESCRIPCION_EXAMEN%TYPE,
    P_CREATED_BY           IN FIDE_TIPO_EXAMEN_TB.CREATED_BY%TYPE,
    P_CREATION_DATE        IN FIDE_TIPO_EXAMEN_TB.CREATION_DATE%TYPE,
    P_MODIFIED_BY          IN FIDE_TIPO_EXAMEN_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE    IN FIDE_TIPO_EXAMEN_TB.MODIFICATION_DATE%TYPE
)
IS
BEGIN
    INSERT INTO FIDE_TIPO_EXAMEN_TB (
        ID_TIPO_EXAMEN_PK,
        ID_ESTADO_FK,
        DESCRIPCION_EXAMEN,
        CREATED_BY,
        CREATION_DATE,
        MODIFIED_BY,
        MODIFICATION_DATE
    )
    VALUES (
        P_ID_TIPO_EXAMEN,
        P_ID_ESTADO_FK,
        P_DESCRIPCION_EXAMEN,
        P_CREATED_BY,
        P_CREATION_DATE,
        P_MODIFIED_BY,
        P_MODIFICATION_DATE
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
END;
/
--Procedimiento para modificar tipos de examen
CREATE OR REPLACE PROCEDURE UPDATE_TIPO_EXAMEN_TB_SP(
    P_ID_TIPO_EXAMEN       IN FIDE_TIPO_EXAMEN_TB.ID_TIPO_EXAMEN_PK%TYPE,
    P_ID_ESTADO_FK         IN FIDE_TIPO_EXAMEN_TB.ID_ESTADO_FK%TYPE,
    P_DESCRIPCION_EXAMEN   IN FIDE_TIPO_EXAMEN_TB.DESCRIPCION_EXAMEN%TYPE,
    P_MODIFIED_BY          IN FIDE_TIPO_EXAMEN_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE    IN FIDE_TIPO_EXAMEN_TB.MODIFICATION_DATE%TYPE
)
IS
BEGIN
    UPDATE FIDE_TIPO_EXAMEN_TB
       SET ID_ESTADO_FK       = P_ID_ESTADO_FK,
           DESCRIPCION_EXAMEN = P_DESCRIPCION_EXAMEN,
           MODIFIED_BY        = P_MODIFIED_BY,
           MODIFICATION_DATE  = P_MODIFICATION_DATE
     WHERE ID_TIPO_EXAMEN_PK   = P_ID_TIPO_EXAMEN;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
END;
/
--Procedimiento para hacer soft delete de examenes
CREATE OR REPLACE PROCEDURE DESACTIVAR_TIPO_EXAMEN_TB_SP (
    P_ID_TIPO_EXAMEN IN FIDE_TIPO_EXAMEN_TB.ID_TIPO_EXAMEN_PK%TYPE
)
IS
BEGIN
    UPDATE FIDE_TIPO_EXAMEN_TB
       SET ID_ESTADO_FK = 0
     WHERE ID_TIPO_EXAMEN_PK = P_ID_TIPO_EXAMEN;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
END DESACTIVAR_TIPO_EXAMEN_TB_SP;
/
--Procedimiento para insertar resultados de examenes
CREATE OR REPLACE PROCEDURE INSERT_EXAMENES_TB_SP(
    P_ID_EXAMEN_PK              IN FIDE_EXAMENES_TB.ID_EXAMEN_PK%TYPE,
    P_ID_MASCOTA_FK             IN FIDE_EXAMENES_TB.ID_MASCOTA_FK%TYPE,
    P_ID_ESTADO_FK              IN FIDE_EXAMENES_TB.ID_ESTADO_FK%TYPE,
    P_ID_TIPO_EXAMEN_FK         IN FIDE_EXAMENES_TB.ID_TIPO_EXAMEN_FK%TYPE,
    P_EXAMEN_RESULTADO          IN FIDE_EXAMENES_TB.EXAMEN_RESULTADO%TYPE,
    P_EXAMEN_FECHA_SEGUIMIENTO  IN FIDE_EXAMENES_TB.EXAMEN_FECHA_SEGUIMIENTO%TYPE,
    P_CREATED_BY                IN FIDE_EXAMENES_TB.CREATED_BY%TYPE,
    P_CREATION_DATE             IN FIDE_EXAMENES_TB.CREATION_DATE%TYPE,
    P_MODIFIED_BY               IN FIDE_EXAMENES_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE         IN FIDE_EXAMENES_TB.MODIFICATION_DATE%TYPE
)
IS
BEGIN
    INSERT INTO FIDE_EXAMENES_TB (
         ID_EXAMEN_PK,
         ID_MASCOTA_FK,
         ID_ESTADO_FK,
         ID_TIPO_EXAMEN_FK,
         EXAMEN_RESULTADO,
         EXAMEN_FECHA_SEGUIMIENTO,
         CREATED_BY,
         CREATION_DATE,
         MODIFIED_BY,
         MODIFICATION_DATE
    )
    VALUES (
         P_ID_EXAMEN_PK,
         P_ID_MASCOTA_FK,
         P_ID_ESTADO_FK,
         P_ID_TIPO_EXAMEN_FK,
         P_EXAMEN_RESULTADO,
         P_EXAMEN_FECHA_SEGUIMIENTO,
         P_CREATED_BY,
         P_CREATION_DATE,
         P_MODIFIED_BY,
         P_MODIFICATION_DATE
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
END;
/
--Procedimiento para modificar resultados de examenes
CREATE OR REPLACE PROCEDURE UPDATE_EXAMENES_TB_SP(
    P_ID_EXAMEN              IN FIDE_EXAMENES_TB.ID_EXAMEN_PK%TYPE,
    P_ID_MASCOTA_FK          IN FIDE_EXAMENES_TB.ID_MASCOTA_FK%TYPE,
    P_ID_ESTADO_FK           IN FIDE_EXAMENES_TB.ID_ESTADO_FK%TYPE,
    P_ID_TIPO_EXAMEN_FK      IN FIDE_EXAMENES_TB.ID_TIPO_EXAMEN_FK%TYPE,
    P_EXAMEN_RESULTADO       IN FIDE_EXAMENES_TB.EXAMEN_RESULTADO%TYPE,
    P_EXAMEN_FECHA_SEGUIMIENTO IN FIDE_EXAMENES_TB.EXAMEN_FECHA_SEGUIMIENTO%TYPE,
    P_MODIFIED_BY            IN FIDE_EXAMENES_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE      IN FIDE_EXAMENES_TB.MODIFICATION_DATE%TYPE
)
IS
BEGIN
    UPDATE FIDE_EXAMENES_TB
       SET ID_MASCOTA_FK          = P_ID_MASCOTA_FK,
           ID_ESTADO_FK           = P_ID_ESTADO_FK,
           ID_TIPO_EXAMEN_FK      = P_ID_TIPO_EXAMEN_FK,
           EXAMEN_RESULTADO       = P_EXAMEN_RESULTADO,
           EXAMEN_FECHA_SEGUIMIENTO = P_EXAMEN_FECHA_SEGUIMIENTO,
           MODIFIED_BY            = P_MODIFIED_BY,
           MODIFICATION_DATE      = P_MODIFICATION_DATE
     WHERE ID_EXAMEN_PK           = P_ID_EXAMEN;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
END;
/
--Procedmiento para hacer soft delete de resultados de examenes
CREATE OR REPLACE PROCEDURE DESACTIVAR_EXAMENES_TB_SP (
    P_ID_EXAMEN IN FIDE_EXAMENES_TB.ID_EXAMEN_PK%TYPE
)
IS
BEGIN
    UPDATE FIDE_EXAMENES_TB
       SET ID_ESTADO_FK = 0
     WHERE ID_EXAMEN_PK = P_ID_EXAMEN;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
END;
/
--Procedimiento para insertar motivos de consulta
CREATE OR REPLACE PROCEDURE INSERT_CONSULTA_MOTIVO_TB_SP(
    P_ID_CONSULTA_MOTIVO      IN FIDE_CONSULTA_MOTIVO_TB.ID_CONSULTA_MOTIVO_PK%TYPE,
    P_ID_ESTADO_FK            IN FIDE_CONSULTA_MOTIVO_TB.ID_ESTADO_FK%TYPE,
    P_DESCRIPCION_MOTIVO      IN FIDE_CONSULTA_MOTIVO_TB.DESCRIPCION_MOTIVO%TYPE,
    P_CREATED_BY              IN FIDE_CONSULTA_MOTIVO_TB.CREATED_BY%TYPE,
    P_CREATION_DATE           IN FIDE_CONSULTA_MOTIVO_TB.CREATION_DATE%TYPE,
    P_MODIFIED_BY             IN FIDE_CONSULTA_MOTIVO_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE       IN FIDE_CONSULTA_MOTIVO_TB.MODIFICATION_DATE%TYPE
)
IS
BEGIN
    INSERT INTO FIDE_CONSULTA_MOTIVO_TB (
         ID_CONSULTA_MOTIVO_PK,
         ID_ESTADO_FK,
         DESCRIPCION_MOTIVO,
         CREATED_BY,
         CREATION_DATE,
         MODIFIED_BY,
         MODIFICATION_DATE
    )
    VALUES (
         P_ID_CONSULTA_MOTIVO,
         P_ID_ESTADO_FK,
         P_DESCRIPCION_MOTIVO,
         P_CREATED_BY,
         P_CREATION_DATE,
         P_MODIFIED_BY,
         P_MODIFICATION_DATE
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
END;
/
--Procedimiento para modificar motivos de consulta
CREATE OR REPLACE PROCEDURE UPDATE_CONSULTA_MOTIVO_TB_SP(
    P_ID_CONSULTA_MOTIVO    IN FIDE_CONSULTA_MOTIVO_TB.ID_CONSULTA_MOTIVO_PK%TYPE,
    P_ID_ESTADO_FK          IN FIDE_CONSULTA_MOTIVO_TB.ID_ESTADO_FK%TYPE,
    P_DESCRIPCION_MOTIVO    IN FIDE_CONSULTA_MOTIVO_TB.DESCRIPCION_MOTIVO%TYPE,
    P_MODIFIED_BY           IN FIDE_CONSULTA_MOTIVO_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE     IN FIDE_CONSULTA_MOTIVO_TB.MODIFICATION_DATE%TYPE
)
IS
BEGIN
    UPDATE FIDE_CONSULTA_MOTIVO_TB
       SET ID_ESTADO_FK        = P_ID_ESTADO_FK,
           DESCRIPCION_MOTIVO  = P_DESCRIPCION_MOTIVO,
           MODIFIED_BY         = P_MODIFIED_BY,
           MODIFICATION_DATE   = P_MODIFICATION_DATE
     WHERE ID_CONSULTA_MOTIVO_PK = P_ID_CONSULTA_MOTIVO;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
END;
/
--Procedimiento para hacer soft delete de motivos de consulta
CREATE OR REPLACE PROCEDURE DESACTIVAR_CONSULTA_MOTIVO_TB_SP (
    P_ID_CONSULTA_MOTIVO IN FIDE_CONSULTA_MOTIVO_TB.ID_CONSULTA_MOTIVO_PK%TYPE
)
IS
BEGIN
    UPDATE FIDE_CONSULTA_MOTIVO_TB
       SET ID_ESTADO_FK = 0
     WHERE ID_CONSULTA_MOTIVO_PK = P_ID_CONSULTA_MOTIVO;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
END;
/
--Procedimiento para insertar consultas
CREATE OR REPLACE PROCEDURE INSERT_CONSULTAS_TB_SP(
    P_ID_CONSULTA_PK          IN FIDE_CONSULTAS_TB.ID_CONSULTA_PK%TYPE,
    P_CONSULTA_FECHA          IN FIDE_CONSULTAS_TB.CONSULTA_FECHA%TYPE,
    P_ID_CONSULTA_MOTIVO_FK   IN FIDE_CONSULTAS_TB.ID_CONSULTA_MOTIVO_FK%TYPE,
    P_ID_ESTADO_FK            IN FIDE_CONSULTAS_TB.ID_ESTADO_FK%TYPE,
    P_ID_MASCOTA_FK           IN FIDE_CONSULTAS_TB.ID_MASCOTA_FK%TYPE,
    P_ID_USUARIO_FK           IN FIDE_CONSULTAS_TB.ID_USUARIO_FK%TYPE,
    P_CONSULTA_OBSERVACIONES  IN FIDE_CONSULTAS_TB.CONSULTA_OBSERVACIONES%TYPE,
    P_CREATED_BY              IN FIDE_CONSULTAS_TB.CREATED_BY%TYPE,
    P_CREATION_DATE           IN FIDE_CONSULTAS_TB.CREATION_DATE%TYPE,
    P_MODIFIED_BY             IN FIDE_CONSULTAS_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE       IN FIDE_CONSULTAS_TB.MODIFICATION_DATE%TYPE
)
IS
BEGIN
    INSERT INTO FIDE_CONSULTAS_TB (
        ID_CONSULTA_PK,
        CONSULTA_FECHA,
        ID_CONSULTA_MOTIVO_FK,
        ID_ESTADO_FK,
        ID_MASCOTA_FK,
        ID_USUARIO_FK,
        CONSULTA_OBSERVACIONES,
        CREATED_BY,
        CREATION_DATE,
        MODIFIED_BY,
        MODIFICATION_DATE
    )
    VALUES (
        P_ID_CONSULTA_PK,
        P_CONSULTA_FECHA,
        P_ID_CONSULTA_MOTIVO_FK,
        P_ID_ESTADO_FK,
        P_ID_MASCOTA_FK,
        P_ID_USUARIO_FK,
        P_CONSULTA_OBSERVACIONES,
        P_CREATED_BY,
        P_CREATION_DATE,
        P_MODIFIED_BY,
        P_MODIFICATION_DATE
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
END;
/
--Procedimiento para modificar consultas
CREATE OR REPLACE PROCEDURE UPDATE_CONSULTAS_TB_SP(
    P_ID_CONSULTA             IN FIDE_CONSULTAS_TB.ID_CONSULTA_PK%TYPE,
    P_CONSULTA_FECHA          IN FIDE_CONSULTAS_TB.CONSULTA_FECHA%TYPE,
    P_ID_CONSULTA_MOTIVO_FK   IN FIDE_CONSULTAS_TB.ID_CONSULTA_MOTIVO_FK%TYPE,
    P_ID_ESTADO_FK            IN FIDE_CONSULTAS_TB.ID_ESTADO_FK%TYPE,
    P_ID_MASCOTA_FK           IN FIDE_CONSULTAS_TB.ID_MASCOTA_FK%TYPE,
    P_ID_USUARIO_FK           IN FIDE_CONSULTAS_TB.ID_USUARIO_FK%TYPE,
    P_CONSULTA_OBSERVACIONES  IN FIDE_CONSULTAS_TB.CONSULTA_OBSERVACIONES%TYPE,
    P_MODIFIED_BY             IN FIDE_CONSULTAS_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE       IN FIDE_CONSULTAS_TB.MODIFICATION_DATE%TYPE
)
IS
BEGIN
    UPDATE FIDE_CONSULTAS_TB
       SET CONSULTA_FECHA         = P_CONSULTA_FECHA,
           ID_CONSULTA_MOTIVO_FK  = P_ID_CONSULTA_MOTIVO_FK,
           ID_ESTADO_FK           = P_ID_ESTADO_FK,
           ID_MASCOTA_FK          = P_ID_MASCOTA_FK,
           ID_USUARIO_FK          = P_ID_USUARIO_FK,
           CONSULTA_OBSERVACIONES = P_CONSULTA_OBSERVACIONES,
           MODIFIED_BY            = P_MODIFIED_BY,
           MODIFICATION_DATE      = P_MODIFICATION_DATE
     WHERE ID_CONSULTA_PK         = P_ID_CONSULTA;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
END;
/
--Procedimiento para hacer soft delete de consultas
CREATE OR REPLACE PROCEDURE DESACTIVAR_CONSULTAS_TB_SP (
    P_ID_CONSULTA IN FIDE_CONSULTAS_TB.ID_CONSULTA_PK%TYPE
)
IS
BEGIN
    UPDATE FIDE_CONSULTAS_TB
       SET ID_ESTADO_FK = 0
     WHERE ID_CONSULTA_PK = P_ID_CONSULTA;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
END;
/
--Procedimiento para insertar factura
CREATE OR REPLACE PROCEDURE INSERT_FACTURACIONES_TB_SP(
    P_ID_FACTURA_PK           IN FIDE_FACTURACIONES_TB.ID_FACTURA_PK%TYPE,
    P_ID_CONSULTA_FK          IN FIDE_FACTURACIONES_TB.ID_CONSULTA_FK%TYPE,
    P_ID_ESTADO_FK            IN FIDE_FACTURACIONES_TB.ID_ESTADO_FK%TYPE,
    P_FACTURA_FECHA_EMISION   IN FIDE_FACTURACIONES_TB.FACTURA_FECHA_EMISION%TYPE,
    P_FACTURA_MONTO_TOTAL     IN FIDE_FACTURACIONES_TB.FACTURA_MONTO_TOTAL%TYPE,
    P_FACTURA_DESCUENTO       IN FIDE_FACTURACIONES_TB.FACTURA_DESCUENTO%TYPE,
    P_FACTURA_IMPUESTOS       IN FIDE_FACTURACIONES_TB.FACTURA_IMPUESTOS%TYPE,
    P_FACTURA_MONTO_FINAL     IN FIDE_FACTURACIONES_TB.FACTURA_MONTO_FINAL%TYPE,
    P_FACTURA_SUBTOTAL        IN FIDE_FACTURACIONES_TB.FACTURA_SUBTOTAL%TYPE,
    P_CREATED_BY              IN FIDE_FACTURACIONES_TB.CREATED_BY%TYPE,
    P_CREATION_DATE           IN FIDE_FACTURACIONES_TB.CREATION_DATE%TYPE,
    P_MODIFIED_BY             IN FIDE_FACTURACIONES_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE       IN FIDE_FACTURACIONES_TB.MODIFICATION_DATE%TYPE
)
IS
BEGIN
    INSERT INTO FIDE_FACTURACIONES_TB (
        ID_FACTURA_PK,
        ID_CONSULTA_FK,
        ID_ESTADO_FK,
        FACTURA_FECHA_EMISION,
        FACTURA_MONTO_TOTAL,
        FACTURA_DESCUENTO,
        FACTURA_IMPUESTOS,
        FACTURA_MONTO_FINAL,
        FACTURA_SUBTOTAL,
        CREATED_BY,
        CREATION_DATE,
        MODIFIED_BY,
        MODIFICATION_DATE
    )
    VALUES (
        P_ID_FACTURA_PK,
        P_ID_CONSULTA_FK,
        P_ID_ESTADO_FK,
        P_FACTURA_FECHA_EMISION,
        P_FACTURA_MONTO_TOTAL,
        P_FACTURA_DESCUENTO,
        P_FACTURA_IMPUESTOS,
        P_FACTURA_MONTO_FINAL,
        P_FACTURA_SUBTOTAL,
        P_CREATED_BY,
        P_CREATION_DATE,
        P_MODIFIED_BY,
        P_MODIFICATION_DATE
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
END;
/
--Procedimiento para modificar factura
CREATE OR REPLACE PROCEDURE UPDATE_FACTURACIONES_TB_SP(
    P_ID_FACTURA            IN FIDE_FACTURACIONES_TB.ID_FACTURA_PK%TYPE,
    P_ID_CONSULTA_FK        IN FIDE_FACTURACIONES_TB.ID_CONSULTA_FK%TYPE,
    P_ID_ESTADO_FK          IN FIDE_FACTURACIONES_TB.ID_ESTADO_FK%TYPE,
    P_FACTURA_FECHA_EMISION IN FIDE_FACTURACIONES_TB.FACTURA_FECHA_EMISION%TYPE,
    P_FACTURA_MONTO_TOTAL   IN FIDE_FACTURACIONES_TB.FACTURA_MONTO_TOTAL%TYPE,
    P_FACTURA_DESCUENTO     IN FIDE_FACTURACIONES_TB.FACTURA_DESCUENTO%TYPE,
    P_FACTURA_IMPUESTOS     IN FIDE_FACTURACIONES_TB.FACTURA_IMPUESTOS%TYPE,
    P_FACTURA_MONTO_FINAL   IN FIDE_FACTURACIONES_TB.FACTURA_MONTO_FINAL%TYPE,
    P_FACTURA_SUBTOTAL      IN FIDE_FACTURACIONES_TB.FACTURA_SUBTOTAL%TYPE,
    P_MODIFIED_BY           IN FIDE_FACTURACIONES_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE     IN FIDE_FACTURACIONES_TB.MODIFICATION_DATE%TYPE
)
IS
BEGIN
    UPDATE FIDE_FACTURACIONES_TB
       SET ID_CONSULTA_FK          = P_ID_CONSULTA_FK,
           ID_ESTADO_FK            = P_ID_ESTADO_FK,
           FACTURA_FECHA_EMISION   = P_FACTURA_FECHA_EMISION,
           FACTURA_MONTO_TOTAL     = P_FACTURA_MONTO_TOTAL,
           FACTURA_DESCUENTO       = P_FACTURA_DESCUENTO,
           FACTURA_IMPUESTOS       = P_FACTURA_IMPUESTOS,
           FACTURA_MONTO_FINAL     = P_FACTURA_MONTO_FINAL,
           FACTURA_SUBTOTAL        = P_FACTURA_SUBTOTAL,
           MODIFIED_BY             = P_MODIFIED_BY,
           MODIFICATION_DATE       = P_MODIFICATION_DATE
     WHERE ID_FACTURA_PK           = P_ID_FACTURA;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
END;
/
--Procedimiento para hacer soft delete de las facturas
CREATE OR REPLACE PROCEDURE DESACTIVAR_FACTURACIONES_TB_SP (
    P_ID_FACTURA IN FIDE_FACTURACIONES_TB.ID_FACTURA_PK%TYPE
)
IS
BEGIN
    UPDATE FIDE_FACTURACIONES_TB
       SET ID_ESTADO_FK = 0
     WHERE ID_FACTURA_PK = P_ID_FACTURA;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
END;
/
--Procedimiento para insertar proveedores
CREATE OR REPLACE PROCEDURE INSERT_PROVEEDORES_TB_SP(
    P_ID_PROVEEDOR_PK                  IN FIDE_PROVEEDORES_TB.ID_PROVEEDOR_PK%TYPE,
    P_ID_ESTADO_FK                     IN FIDE_PROVEEDORES_TB.ID_ESTADO_FK%TYPE,
    P_ID_DIRECCION_FK                  IN FIDE_PROVEEDORES_TB.ID_DIRECCION_FK%TYPE,
    P_ID_TELEFONO_CONTACTO_FK          IN FIDE_PROVEEDORES_TB.ID_TELEFONO_CONTACTO_FK%TYPE,
    P_PROVEEDOR_NOMBRE                 IN FIDE_PROVEEDORES_TB.PROVEEDOR_NOMBRE%TYPE,
    P_PROVEEDOR_CORREO                 IN FIDE_PROVEEDORES_TB.PROVEEDOR_CORREO%TYPE,
    P_PROVEEDOR_DESCRIPCION_PRODUCTOS  IN FIDE_PROVEEDORES_TB.PROVEEDOR_DESCRIPCION_PRODUCTOS%TYPE,
    P_CREATED_BY                       IN FIDE_PROVEEDORES_TB.CREATED_BY%TYPE,
    P_CREATION_DATE                    IN FIDE_PROVEEDORES_TB.CREATION_DATE%TYPE,
    P_MODIFIED_BY                      IN FIDE_PROVEEDORES_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE                IN FIDE_PROVEEDORES_TB.MODIFICATION_DATE%TYPE
)
IS
BEGIN
    INSERT INTO FIDE_PROVEEDORES_TB (
        ID_PROVEEDOR_PK,
        ID_ESTADO_FK,
        ID_DIRECCION_FK,
        ID_TELEFONO_CONTACTO_FK,
        PROVEEDOR_NOMBRE,
        PROVEEDOR_CORREO,
        PROVEEDOR_DESCRIPCION_PRODUCTOS,
        CREATED_BY,
        CREATION_DATE,
        MODIFIED_BY,
        MODIFICATION_DATE
    )
    VALUES (
        P_ID_PROVEEDOR_PK,
        P_ID_ESTADO_FK,
        P_ID_DIRECCION_FK,
        P_ID_TELEFONO_CONTACTO_FK,
        P_PROVEEDOR_NOMBRE,
        P_PROVEEDOR_CORREO,
        P_PROVEEDOR_DESCRIPCION_PRODUCTOS,
        P_CREATED_BY,
        P_CREATION_DATE,
        P_MODIFIED_BY,
        P_MODIFICATION_DATE
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS INGRESADOS CON EXITO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA INSERTAR');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
END;
/
--Procedimiento para modificar proveedores
CREATE OR REPLACE PROCEDURE UPDATE_PROVEEDORES_TB_SP(
    P_ID_PROVEEDOR_PK                  IN FIDE_PROVEEDORES_TB.ID_PROVEEDOR_PK%TYPE,
    P_ID_ESTADO_FK                     IN FIDE_PROVEEDORES_TB.ID_ESTADO_FK%TYPE,
    P_ID_DIRECCION_FK                  IN FIDE_PROVEEDORES_TB.ID_DIRECCION_FK%TYPE,
    P_ID_TELEFONO_CONTACTO_FK          IN FIDE_PROVEEDORES_TB.ID_TELEFONO_CONTACTO_FK%TYPE,
    P_PROVEEDOR_NOMBRE                 IN FIDE_PROVEEDORES_TB.PROVEEDOR_NOMBRE%TYPE,
    P_PROVEEDOR_CORREO                 IN FIDE_PROVEEDORES_TB.PROVEEDOR_CORREO%TYPE,
    P_PROVEEDOR_DESCRIPCION_PRODUCTOS  IN FIDE_PROVEEDORES_TB.PROVEEDOR_DESCRIPCION_PRODUCTOS%TYPE,
    P_MODIFIED_BY                      IN FIDE_PROVEEDORES_TB.MODIFIED_BY%TYPE,
    P_MODIFICATION_DATE                IN FIDE_PROVEEDORES_TB.MODIFICATION_DATE%TYPE
)
IS
BEGIN
    UPDATE FIDE_PROVEEDORES_TB
       SET ID_ESTADO_FK                    = P_ID_ESTADO_FK,
           ID_DIRECCION_FK                 = P_ID_DIRECCION_FK,
           ID_TELEFONO_CONTACTO_FK         = P_ID_TELEFONO_CONTACTO_FK,
           PROVEEDOR_NOMBRE                = P_PROVEEDOR_NOMBRE,
           PROVEEDOR_CORREO                = P_PROVEEDOR_CORREO,
           PROVEEDOR_DESCRIPCION_PRODUCTOS = P_PROVEEDOR_DESCRIPCION_PRODUCTOS,
           MODIFIED_BY                     = P_MODIFIED_BY,
           MODIFICATION_DATE               = P_MODIFICATION_DATE
     WHERE ID_PROVEEDOR_PK                 = P_ID_PROVEEDOR_PK;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS CON EXITO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA ACTUALIZAR');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
END UPDATE_PROVEEDORES_TB_SP;
/
--Procedimiento para hacer soft delete de proveedores
CREATE OR REPLACE PROCEDURE DESACTIVAR_PROVEEDORES_TB_SP (
    P_ID_PROVEEDOR IN FIDE_PROVEEDORES_TB.ID_PROVEEDOR_PK%TYPE
)
IS
BEGIN
    UPDATE FIDE_PROVEEDORES_TB
       SET ID_ESTADO_FK = 0
     WHERE ID_PROVEEDOR_PK = P_ID_PROVEEDOR;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('REGISTRO MARCADO COMO INACTIVO');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON REGISTROS PARA MARCAR COMO INACTIVO');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR COMUNIQUESE CON TI ' || SQLERRM);
END;
/








